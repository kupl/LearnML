../engine/main.native -dd -submission ../benchmarks_incorrect/diff/12/sub1.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml
-----------------------------
Submission
-----------------------------

exception EMPTYLIST
type aexp =
|Const of int
|Var of string
|Sum of aexp list
|Times of aexp list
|Power of (string * int)

let rec diff (aexp, str)  = 
 (match aexp with 
|Const a -> Const (0)
|Var b -> if (str = b) then Const (1)
 else Const (0)
|Power (pstr, i) -> if (str = pstr) then Times ([Const (i); Power ((pstr, (i - 1)))])
 else Const (0)
|Times alst -> 
 (match alst with 
|[] -> Const (0)
|h::[] -> diff ((h, str))
|h::t -> Sum ([Times ((diff ((h, str)) :: t)); Times ((h :: [diff ((Times (t), str))]))]))
|Sum [] -> Const (0)
|Sum h::[] -> Const (0)
|Sum h::t -> Sum ([diff ((h, str)); diff ((Sum (t), str))]))

-----------------------------
Submission
-----------------------------

exception EMPTYLIST
type aexp =
|Power of (string * int)
|Times of aexp list
|Sum of aexp list
|Var of string
|Const of int

let rec diff (aexp, str)  = (45020, 
 (match (44947, aexp with 
|Const a -> (44949, Const ((44948, 0)
|Var b -> (44957, if (44952, ((44950, str = (44951, b) then (44954, Const ((44953, 1)
 else (44956, Const ((44955, 0)
|Power (pstr, i) -> (44973, if (44960, ((44958, str = (44959, pstr) then (44970, Times ((44969, [(44962, Const ((44961, i); (44968, Power ((44967, ((44963, pstr, (44966, ((44964, i - (44965, 1)))])
 else (44972, Const ((44971, 0)
|Times alst -> (45002, 
 (match (44974, alst with 
|[] -> (44976, Const ((44975, 0)
|h::[] -> (44981, (44977, diff ((44980, ((44978, h, (44979, str))
|h::t -> (45001, Sum ((45000, [(44989, Times ((44988, ((44986, (44982, diff ((44985, ((44983, h, (44984, str)) :: (44987, t)); (44999, Times ((44998, ((44990, h :: (44997, [(44996, (44991, diff ((44995, ((44993, Times ((44992, t), (44994, str))]))]))
|Sum [] -> (45004, Const ((45003, 0)
|Sum h::[] -> (45006, Const ((45005, 0)
|Sum h::t -> (45019, Sum ((45018, [(45011, (45007, diff ((45010, ((45008, h, (45009, str)); (45017, (45012, diff ((45016, ((45014, Sum ((45013, t), (45015, str))]))

-----------------------------
Most Similar Sol ../benchmarks_correct/diff/18/sub9.ml Score : 1
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff  : ((aexp * string) -> aexp) = 
fun (exp, x) -> 
 (match exp with 
|Const n -> Const (0)
|Var s -> if (s != x) then Const (0)
 else Const (1)
|Power (s, n) -> if (s != x) then Const (0)
 else Times ([Const (n); Power ((s, (n - 1)))])
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([diff ((hd, x)); diff ((Sum (tl), x))])))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{diff -> (18390 : 
Input : ((aexp : aexp), (str : string)) 
Output : aexp
Body : 
 (match aexp with 
|Const a -> Const (0)
|Var b -> if (str = b) then Const (1)
 else Const (0)
|Power (pstr, i) -> if (str = pstr) then Times ([Const (i); Power ((pstr, (i - 1)))])
 else Const (0)
|Times alst -> 
 (match alst with 
|[] -> Const (0)
|h::[] -> diff ((h, str))
|h::t -> Sum ([Times ((diff ((h, str)) :: t)); Times ((h :: [diff ((Times (t), str))]))]))
|Sum [] -> Const (0)
|Sum h::[] -> Const (0)
|Sum h::t -> Sum ([diff ((h, str)); diff ((Sum (t), str))]))}
Edge : 
{(18390, 18390) -> }
Starting : 18390
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{diff -> (18349 : 
Input : ((exp : aexp), (x : string)) 
Output : aexp
Body : 
 (match exp with 
|Const n -> Const (0)
|Var s -> if (s != x) then Const (0)
 else Const (1)
|Power (s, n) -> if (s != x) then Const (0)
 else Times ([Const (n); Power ((s, (n - 1)))])
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([diff ((hd, x)); diff ((Sum (tl), x))])))}
Edge : 
{(18349, 18349) -> }
Starting : 18349
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{diff -> diff}
------Remainings in submission ------
{}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44952 : (? != ?))

Decls : 
,Exp : Modify (44953 : 0)

Decls : 
,Exp : Modify (44955 : 1)

Decls : 
,Exp : Modify (44960 : (? != ?))

Decls : 
,Exp : Modify (44970 : Const (0))

Decls : 
,Exp : Modify (44972 : Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
,Exp : Modify (44974 : ?)

Decls : 
,Exp : Modify (44986 : ? ((?, ?)))

Decls : 
,Exp : Modify (44987 : ?)

Decls : 
,Exp : Modify (44998 : [?; ? ((Times (?), ?))])

Decls : 
,Exp : Insert (Sum l -> 
 (match ? with 
|[] -> Const (0)
|hd::tl -> Sum ([? ((?, ?)); ? ((Sum (?), ?))])) At label 45020

Decls : 
,Exp : Delete (h::[] -> diff ((h, str)) At label 45002

Decls : 
,Exp : Delete (Sum [] -> Const (0) At label 45020

Decls : 
,Exp : Delete (Sum h::t -> Sum ([diff ((h, str)); diff ((Sum (t), str))]) At label 45020

Decls : 
,Exp : Delete (Sum h::[] -> Const (0) At label 45020

Decls : 
}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44952 : (? != ?))

Decls : 
,Exp : Modify (44953 : 0)

Decls : 
,Exp : Modify (44955 : 1)

Decls : 
,Exp : Modify (44960 : (? != ?))

Decls : 
,Exp : Modify (44970 : Const (0))

Decls : 
,Exp : Modify (44974 : ?)

Decls : 
,Exp : Modify (44986 : ? ((?, ?)))

Decls : 
,Exp : Modify (44987 : ?)

Decls : 
,Exp : Modify (44998 : [?; ? ((Times (?), ?))])

Decls : 
,Exp : Insert (Sum l -> 
 (match ? with 
|[] -> Const (0)
|hd::tl -> Sum ([? ((?, ?)); ? ((Sum (?), ?))])) At label 45020

Decls : 
,Exp : Delete (h::[] -> diff ((h, str)) At label 45002

Decls : 
,Exp : Delete (Sum [] -> Const (0) At label 45020

Decls : 
,Exp : Delete (Sum h::t -> Sum ([diff ((h, str)); diff ((Sum (t), str))]) At label 45020

Decls : 
,Exp : Delete (Sum h::[] -> Const (0) At label 45020

Decls : 
}
-----------------------------
Patch
-----------------------------

exception EMPTYLIST
type aexp =
|Const of int
|Var of string
|Sum of aexp list
|Times of aexp list
|Power of (string * int)

let rec diff (aexp, str)  = 
 (match aexp with 
|Const a -> Const (0)
|Var b -> if (str = b) then Const (1)
 else Const (0)
|Power (pstr, i) -> if (str = pstr) then Times ([Const (i); Power ((pstr, (i - 1)))])
 else Const (0)
|Times alst -> 
 (match alst with 
|[] -> Const (0)
|h::[] -> diff ((h, str))
|h::t -> Sum ([Times ((diff ((h, str)) :: t)); Times ((h :: [diff ((Times (t), str))]))]))
|Sum [] -> Const (0)
|Sum h::t -> Sum ([diff ((h, str)); diff ((Sum (t), str))]))

Time : 0.0119340419769
Error occurs : ../engine/main.native -dd -submission ../benchmarks_incorrect/diff/12/sub11.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml

Error occurs : ../engine/main.native -dd -submission ../benchmarks_incorrect/diff/12/sub12.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml

Error occurs : ../engine/main.native -dd -submission ../benchmarks_incorrect/diff/12/sub13.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml

Error occurs : ../engine/main.native -dd -submission ../benchmarks_incorrect/diff/12/sub14.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml

../engine/main.native -dd -submission ../benchmarks_incorrect/diff/12/sub16.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml
-----------------------------
Submission
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
 (match aexp with 
|Const c -> Const (0)
|Var v -> if (str = v) then Const (1)
 else Const (0)
|Power (v, p) -> if (v = str) then Times ([Const (p); Power ((v, (p - 1)))])
 else Const (0)
|Times aexpl -> 
 (match aexpl with 
|[] -> Times ([])
|hd::tl -> Sum ([Times ((diff ((hd, str)) :: tl)); Times ([hd; diff ((Times (tl), str))])]))
|Sum aexpl -> 
let diffwithstr e  = diff ((e, str))
 in 
Sum (List.map (diffwithstr) (aexpl)))

-----------------------------
Submission
-----------------------------
type aexp =
|Sum of aexp list
|Times of aexp list
|Power of (string * int)
|Var of string
|Const of int

let rec diff (aexp, str)  = (45009, 
 (match (44947, aexp with 
|Const c -> (44949, Const ((44948, 0)
|Var v -> (44957, if (44952, ((44950, str = (44951, v) then (44954, Const ((44953, 1)
 else (44956, Const ((44955, 0)
|Power (v, p) -> (44973, if (44960, ((44958, v = (44959, str) then (44970, Times ((44969, [(44962, Const ((44961, p); (44968, Power ((44967, ((44963, v, (44966, ((44964, p - (44965, 1)))])
 else (44972, Const ((44971, 0)
|Times aexpl -> (44996, 
 (match (44974, aexpl with 
|[] -> (44976, Times ((44975, [])
|hd::tl -> (44995, Sum ((44994, [(44984, Times ((44983, ((44981, (44977, diff ((44980, ((44978, hd, (44979, str)) :: (44982, tl)); (44993, Times ((44992, [(44985, hd; (44991, (44986, diff ((44990, ((44988, Times ((44987, tl), (44989, str))])]))
|Sum aexpl -> (45008, 
let diffwithstr e  = (45001, (44997, diff ((45000, ((44998, e, (44999, str))
 in 
(45007, Sum ((45006, (45005, (45002, __list_map__ ((45003, diffwithstr) ((45004, aexpl)))

-----------------------------
Most Similar Sol ../benchmarks_correct/diff/13/sub36.ml Score : 3
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

exception InvalidArgument

let rec diff (aexp, var)  = 
let rec diff_sub a  = diff ((a, var))
 in 

 (match aexp with 
|Const a -> Const (0)
|Var a -> if (a = var) then Const (1)
 else Const (0)
|Power (a, n) -> if (a = var) then if (n = 1) then Const (1)
 else Times ([Const (n); Power ((a, (n - 1)))])
 else Const (0)
|Times l -> 
 (match l with 
|[] -> raise InvalidArgument
|hd::[] -> diff ((hd, var))
|hd::tl -> Sum (([Times ((diff ((hd, var)) :: tl))] @ [Times ((hd :: [diff ((Times (tl), var))]))])))
|Sum l -> 
 (match l with 
|[] -> raise InvalidArgument
|_ -> Sum (List.map (diff_sub) (l))))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{__list_map__ -> (18801 : 
Input : (func : (#494647 -> #494649)) (lst : #494647 list) 
Output : #494649 list
Body : 
 (match lst with 
|[] -> []
|hd::tl -> (func (hd) :: List.map (func) (tl))),

diff -> (18828 : 
Input : ((aexp : aexp), (str : string)) 
Output : aexp
Body : 
 (match aexp with 
|Const c -> Const (0)
|Var v -> if (str = v) then Const (1)
 else Const (0)
|Power (v, p) -> if (v = str) then Times ([Const (p); Power ((v, (p - 1)))])
 else Const (0)
|Times aexpl -> 
 (match aexpl with 
|[] -> Times ([])
|hd::tl -> Sum ([Times ((diff ((hd, str)) :: tl)); Times ([hd; diff ((Times (tl), str))])]))
|Sum aexpl -> Sum (List.map (diffwithstr) (aexpl))),

diffwithstr -> (18829 : 
Input : (e : aexp) 
Output : aexp
Body : diff ((e, str))}
Edge : 
{(18801, 18801) -> ,
(18828, 18801) -> ,
(18828, 18828) -> ,
(18828, 18829) -> ,
(18829, 18828) -> }
Starting : 18828
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{__list_map__ -> (18758 : 
Input : (func : (#493521 -> #493523)) (lst : #493521 list) 
Output : #493523 list
Body : 
 (match lst with 
|[] -> []
|hd::tl -> (func (hd) :: List.map (func) (tl))),

diff -> (18785 : 
Input : ((aexp : aexp), (var : string)) 
Output : aexp
Body : 
 (match aexp with 
|Const a -> Const (0)
|Var a -> if (a = var) then Const (1)
 else Const (0)
|Power (a, n) -> if (a = var) then if (n = 1) then Const (1)
 else Times ([Const (n); Power ((a, (n - 1)))])
 else Const (0)
|Times l -> 
 (match l with 
|[] -> raise InvalidArgument
|hd::[] -> diff ((hd, var))
|hd::tl -> Sum (([Times ((diff ((hd, var)) :: tl))] @ [Times ((hd :: [diff ((Times (tl), var))]))])))
|Sum l -> 
 (match l with 
|[] -> raise InvalidArgument
|_ -> Sum (List.map (diff_sub) (l)))),

diff_sub -> (18786 : 
Input : (a : aexp) 
Output : aexp
Body : diff ((a, var))}
Edge : 
{(18758, 18758) -> ,
(18785, 18758) -> ,
(18785, 18785) -> ,
(18785, 18786) -> ,
(18786, 18785) -> }
Starting : 18785
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{__list_map__ -> __list_map__,
diff -> diff,
diffwithstr -> diff_sub}
------Remainings in submission ------
{}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44950 : ?)

Decls : 
,Exp : Modify (44951 : ?)

Decls : 
,Exp : Modify (44958 : ?)

Decls : 
,Exp : Modify (44959 : ?)

Decls : 
,Exp : Modify (44970 : if (? = 1) then Const (1)
 else Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
,Exp : Modify (44974 : ?)

Decls : 
,Exp : Modify (44994 : ([Times ((? ((?, ?)) :: ?))] @ [Times ((? :: [? ((Times (?), ?))]))]))

Decls : 
,Exp : Modify (45001 : ? ((?, ?)))

Decls : 
,Exp : Modify (45007 : 
 (match ? with 
|[] -> raise InvalidArgument
|_ -> Sum (? (?) (?))))

Decls : 
,Exp : Insert (hd::[] -> ? ((?, ?)) At label 44996

Decls : 
}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44950 : ?)

Decls : 
,Exp : Modify (44951 : ?)

Decls : 
,Exp : Modify (44958 : ?)

Decls : 
,Exp : Modify (44959 : ?)

Decls : 
,Exp : Modify (44970 : if (? = 1) then Const (1)
 else Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
,Exp : Modify (44974 : ?)

Decls : 
,Exp : Modify (44994 : ([Times ((? ((?, ?)) :: ?))] @ [Times ((? :: [? ((Times (?), ?))]))]))

Decls : 
,Exp : Modify (45001 : ? ((?, ?)))

Decls : 
,Exp : Modify (45007 : 
 (match ? with 
|[] -> raise InvalidArgument
|_ -> Sum (? (?) (?))))

Decls : 
,Exp : Insert (hd::[] -> ? ((?, ?)) At label 44996

Decls : 
}
-----------------------------
Patch
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
 (match aexp with 
|Const c -> Const (0)
|Var v -> if (str = v) then Const (1)
 else Const (0)
|Power (v, p) -> if (v = str) then Times ([Const (p); Power ((v, (p - 1)))])
 else Const (0)
|Times aexpl -> 
 (match aexpl with 
|[] -> Times ([])
|hd::[] -> diff ((hd, str))
|hd::tl -> Sum ([Times ((diff ((hd, str)) :: tl)); Times ([hd; diff ((Times (tl), str))])]))
|Sum aexpl -> 
let diffwithstr e  = diff ((e, str))
 in 
Sum (List.map (diffwithstr) (aexpl)))

Time : 0.0132429599762
../engine/main.native -dd -submission ../benchmarks_incorrect/diff/12/sub23.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml
-----------------------------
Submission
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (e, v)  = 
 (match e with 
|Const a -> Const (0)
|Var a -> if (a = v) then Const (1)
 else Const (0)
|Power (a, n) -> if (a = v) then if (n = 0) then Const (0)
 else Times ([Const (n); Power ((a, (n - 1)))])
 else Const (0)
|Times l -> 
 (match l with 
|[] -> Const (1)
|h::t -> if (diff ((h, v)) = Const (0)) then Times ([h; diff ((Times (t), v))])
 else if (diff ((h, v)) = Const (1)) then Sum ([Times (t); Times ([h; diff ((Times (t), v))])])
 else Sum ([Times (([diff ((h, v))] @ t)); Times ([h; diff ((Times (t), v))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::t -> if (diff ((h, v)) = Const (0)) then diff ((Sum (t), v))
 else Sum ([diff ((h, v)); diff ((Sum (t), v))])))

-----------------------------
Submission
-----------------------------
type aexp =
|Sum of aexp list
|Times of aexp list
|Power of (string * int)
|Var of string
|Const of int

let rec diff (e, v)  = (45076, 
 (match (44947, e with 
|Const a -> (44949, Const ((44948, 0)
|Var a -> (44957, if (44952, ((44950, a = (44951, v) then (44954, Const ((44953, 1)
 else (44956, Const ((44955, 0)
|Power (a, n) -> (44979, if (44960, ((44958, a = (44959, v) then (44976, if (44963, ((44961, n = (44962, 0) then (44965, Const ((44964, 0)
 else (44975, Times ((44974, [(44967, Const ((44966, n); (44973, Power ((44972, ((44968, a, (44971, ((44969, n - (44970, 1)))])
 else (44978, Const ((44977, 0)
|Times l -> (45043, 
 (match (44980, l with 
|[] -> (44982, Const ((44981, 1)
|h::t -> (45042, if (44990, ((44987, (44983, diff ((44986, ((44984, h, (44985, v)) = (44989, Const ((44988, 0)) then (44999, Times ((44998, [(44991, h; (44997, (44992, diff ((44996, ((44994, Times ((44993, t), (44995, v))])
 else (45041, if (45007, ((45004, (45000, diff ((45003, ((45001, h, (45002, v)) = (45006, Const ((45005, 1)) then (45020, Sum ((45019, [(45009, Times ((45008, t); (45018, Times ((45017, [(45010, h; (45016, (45011, diff ((45015, ((45013, Times ((45012, t), (45014, v))])])
 else (45040, Sum ((45039, [(45029, Times ((45028, ((45026, [(45025, (45021, diff ((45024, ((45022, h, (45023, v))] @ (45027, t)); (45038, Times ((45037, [(45030, h; (45036, (45031, diff ((45035, ((45033, Times ((45032, t), (45034, v))])]))
|Sum l -> (45075, 
 (match (45044, l with 
|[] -> (45046, Const ((45045, 0)
|h::t -> (45074, if (45054, ((45051, (45047, diff ((45050, ((45048, h, (45049, v)) = (45053, Const ((45052, 0)) then (45060, (45055, diff ((45059, ((45057, Sum ((45056, t), (45058, v))
 else (45073, Sum ((45072, [(45065, (45061, diff ((45064, ((45062, h, (45063, v)); (45071, (45066, diff ((45070, ((45068, Sum ((45067, t), (45069, v))])))

-----------------------------
Most Similar Sol ../benchmarks_correct/diff/18/sub9.ml Score : 1
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff  : ((aexp * string) -> aexp) = 
fun (exp, x) -> 
 (match exp with 
|Const n -> Const (0)
|Var s -> if (s != x) then Const (0)
 else Const (1)
|Power (s, n) -> if (s != x) then Const (0)
 else Times ([Const (n); Power ((s, (n - 1)))])
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([diff ((hd, x)); diff ((Sum (tl), x))])))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{diff -> (18390 : 
Input : ((e : aexp), (v : string)) 
Output : aexp
Body : 
 (match e with 
|Const a -> Const (0)
|Var a -> if (a = v) then Const (1)
 else Const (0)
|Power (a, n) -> if (a = v) then if (n = 0) then Const (0)
 else Times ([Const (n); Power ((a, (n - 1)))])
 else Const (0)
|Times l -> 
 (match l with 
|[] -> Const (1)
|h::t -> if (diff ((h, v)) = Const (0)) then Times ([h; diff ((Times (t), v))])
 else if (diff ((h, v)) = Const (1)) then Sum ([Times (t); Times ([h; diff ((Times (t), v))])])
 else Sum ([Times (([diff ((h, v))] @ t)); Times ([h; diff ((Times (t), v))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::t -> if (diff ((h, v)) = Const (0)) then diff ((Sum (t), v))
 else Sum ([diff ((h, v)); diff ((Sum (t), v))])))}
Edge : 
{(18390, 18390) -> }
Starting : 18390
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{diff -> (18349 : 
Input : ((exp : aexp), (x : string)) 
Output : aexp
Body : 
 (match exp with 
|Const n -> Const (0)
|Var s -> if (s != x) then Const (0)
 else Const (1)
|Power (s, n) -> if (s != x) then Const (0)
 else Times ([Const (n); Power ((s, (n - 1)))])
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([diff ((hd, x)); diff ((Sum (tl), x))])))}
Edge : 
{(18349, 18349) -> }
Starting : 18349
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{diff -> diff}
------Remainings in submission ------
{}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44952 : (? != ?))

Decls : 
,Exp : Modify (44953 : 0)

Decls : 
,Exp : Modify (44955 : 1)

Decls : 
,Exp : Modify (44960 : (? != ?))

Decls : 
,Exp : Modify (44976 : Const (0))

Decls : 
,Exp : Modify (44978 : Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
,Exp : Modify (44980 : ?)

Decls : 
,Exp : Modify (44981 : 0)

Decls : 
,Exp : Modify (45042 : Sum ([Times ((? ((?, ?)) :: ?)); Times ([?; ? ((Times (?), ?))])]))

Decls : 
,Exp : Modify (45044 : ?)

Decls : 
,Exp : Modify (45074 : Sum ([? ((?, ?)); ? ((Sum (?), ?))]))

Decls : 
}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44952 : (? != ?))

Decls : 
,Exp : Modify (44953 : 0)

Decls : 
,Exp : Modify (44955 : 1)

Decls : 
,Exp : Modify (44960 : (? != ?))

Decls : 
,Exp : Modify (44976 : Const (0))

Decls : 
,Exp : Modify (44978 : Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
,Exp : Modify (44980 : ?)

Decls : 
,Exp : Modify (44981 : 0)

Decls : 
,Exp : Modify (45042 : Sum ([Times ((? ((?, ?)) :: ?)); Times ([?; ? ((Times (?), ?))])]))

Decls : 
,Exp : Modify (45044 : ?)

Decls : 
,Exp : Modify (45074 : Sum ([? ((?, ?)); ? ((Sum (?), ?))]))

Decls : 
}
-----------------------------
Patch
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (e, v)  = 
 (match e with 
|Const a -> Const (0)
|Var a -> if (a = v) then Const (1)
 else Const (0)
|Power (a, n) -> if (a = v) then if (n = 0) then Const (0)
 else Times ([Const (n); Power ((a, (n - 1)))])
 else Const (0)
|Times l -> 
 (match l with 
|[] -> Const (0)
|h::t -> if (diff ((h, v)) = Const (0)) then Times ([h; diff ((Times (t), v))])
 else if (diff ((h, v)) = Const (1)) then Sum ([Times (t); Times ([h; diff ((Times (t), v))])])
 else Sum ([Times (([diff ((h, v))] @ t)); Times ([h; diff ((Times (t), v))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::t -> if (diff ((h, v)) = Const (0)) then diff ((Sum (t), v))
 else Sum ([diff ((h, v)); diff ((Sum (t), v))])))

Time : 0.00615310668945
../engine/main.native -dd -submission ../benchmarks_incorrect/diff/12/sub3.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml
-----------------------------
Submission
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff  : ((aexp * string) -> aexp) = 
fun (alexp, str) -> 
let zeroTimes  : (aexp -> aexp) = 
fun a -> 
 (match a with 
|Times hd::tl -> if ((hd = Const (0)) || List.mem (Const (0)) (tl)) then Const (0)
 else a
|_ -> a)
 in 

 (match alexp with 
|Const c -> Const (0)
|Var s -> if (s != str) then Const (0)
 else Const (1)
|Power (s, n) -> if (s != str) then Const (0)
 else if (n = 0) then Const (1)
 else if (n = 1) then Const (n)
 else if (n = 2) then Times ((Const (n) :: (Var (s) :: [])))
 else Times ((Const (n) :: (Power ((s, (n - 1))) :: [])))
|Times hd::tl -> if (tl = []) then diff ((hd, str))
 else 
let ht  = zeroTimes (Times ((diff ((hd, str)) :: tl)))
 in 

let st  = zeroTimes (Times ((hd :: (diff ((Times (tl), str)) :: []))))
 in 
if ((ht = Const (0)) && (st = Const (0))) then Const (0)
 else if (ht = Const (0)) then st
 else if (st = Const (0)) then ht
 else Sum ((ht :: (st :: [])))
|Times [] -> Const (0)
|Sum hd::tl -> if (tl = []) then diff ((hd, str))
 else 
let h  = diff ((hd, str))
 in 

let t  = diff ((Sum (tl), str))
 in 
if (h = Const (0)) then t
 else if (t = Const (0)) then h
 else Sum ((h :: (t :: [])))
|Sum [] -> Const (0))

-----------------------------
Submission
-----------------------------
type aexp =
|Sum of aexp list
|Times of aexp list
|Power of (string * int)
|Var of string
|Const of int

let rec diff  : ((aexp * string) -> aexp) = (45129, 
fun (alexp, str) -> (45128, 
let zeroTimes  : (aexp -> aexp) = (44965, 
fun a -> (44964, 
 (match (44947, a with 
|Times hd::tl -> (44962, if (44958, ((44951, ((44948, hd = (44950, Const ((44949, 0)) || (44957, (44956, (44952, __list_mem__ ((44954, Const ((44953, 0)) ((44955, tl)) then (44960, Const ((44959, 0)
 else (44961, a
|_ -> (44963, a)
 in 
(45127, 
 (match (44966, alexp with 
|Const c -> (44968, Const ((44967, 0)
|Var s -> (44976, if (44971, ((44969, s != (44970, str) then (44973, Const ((44972, 0)
 else (44975, Const ((44974, 1)
|Power (s, n) -> (45018, if (44979, ((44977, s != (44978, str) then (44981, Const ((44980, 0)
 else (45017, if (44984, ((44982, n = (44983, 0) then (44986, Const ((44985, 1)
 else (45016, if (44989, ((44987, n = (44988, 1) then (44991, Const ((44990, n)
 else (45015, if (44994, ((44992, n = (44993, 2) then (45002, Times ((45001, ((44996, Const ((44995, n) :: (45000, ((44998, Var ((44997, s) :: (44999, [])))
 else (45014, Times ((45013, ((45004, Const ((45003, n) :: (45012, ((45010, Power ((45009, ((45005, s, (45008, ((45006, n - (45007, 1))) :: (45011, [])))
|Times hd::tl -> (45082, if (45021, ((45019, tl = (45020, []) then (45026, (45022, diff ((45025, ((45023, hd, (45024, str))
 else (45081, 
let ht  = (45036, (45027, zeroTimes ((45035, Times ((45034, ((45032, (45028, diff ((45031, ((45029, hd, (45030, str)) :: (45033, tl)))
 in 
(45080, 
let st  = (45049, (45037, zeroTimes ((45048, Times ((45047, ((45038, hd :: (45046, ((45044, (45039, diff ((45043, ((45041, Times ((45040, tl), (45042, str)) :: (45045, []))))
 in 
(45079, if (45058, ((45053, ((45050, ht = (45052, Const ((45051, 0)) && (45057, ((45054, st = (45056, Const ((45055, 0))) then (45060, Const ((45059, 0)
 else (45078, if (45064, ((45061, ht = (45063, Const ((45062, 0)) then (45065, st
 else (45077, if (45069, ((45066, st = (45068, Const ((45067, 0)) then (45070, ht
 else (45076, Sum ((45075, ((45071, ht :: (45074, ((45072, st :: (45073, [])))
|Times [] -> (45084, Const ((45083, 0)
|Sum hd::tl -> (45124, if (45087, ((45085, tl = (45086, []) then (45092, (45088, diff ((45091, ((45089, hd, (45090, str))
 else (45123, 
let h  = (45097, (45093, diff ((45096, ((45094, hd, (45095, str))
 in 
(45122, 
let t  = (45103, (45098, diff ((45102, ((45100, Sum ((45099, tl), (45101, str))
 in 
(45121, if (45107, ((45104, h = (45106, Const ((45105, 0)) then (45108, t
 else (45120, if (45112, ((45109, t = (45111, Const ((45110, 0)) then (45113, h
 else (45119, Sum ((45118, ((45114, h :: (45117, ((45115, t :: (45116, [])))
|Sum [] -> (45126, Const ((45125, 0))

-----------------------------
Most Similar Sol ../benchmarks_correct/diff/17/sub54.ml Score : 3
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec simplifier f  = 
let res  = 
 (match f with 
|Times l -> if List.exists (
fun x -> if (x = Const (0)) then true
 else false) (l) then Const (0)
 else 
 (match l with 
|[] -> Times ([])
|hd::tl -> 
let lst  = 
 (match simplifier (Times (tl)) with 
|Times lst -> lst
|_ -> [])
 in 
Times ((simplifier (hd) :: lst)))
|Sum l -> 
 (match l with 
|[] -> Sum ([])
|hd::tl -> if (hd = Const (0)) then Sum (tl)
 else 
let lst  = 
 (match simplifier (Sum (tl)) with 
|Sum lst -> lst
|_ -> [])
 in 
Sum ((simplifier (hd) :: lst)))
|Power (s, n) -> 
 (match n with 
|0 -> Const (1)
|1 -> Var (s)
|_ -> f)
|_ -> f)
 in 
if (f = res) then res
 else simplifier (res)

let rec diff  : ((aexp * string) -> aexp) = 
fun (e, x) -> 
let res  = 
 (match e with 
|Const n -> Const (0)
|Var s -> if (s = x) then Const (1)
 else Const (0)
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|[y] -> diff ((y, x))
|hd::tl -> 
let l1  = [diff ((hd, x))]
 in 

let l2  = 
 (match diff ((Sum (tl), x)) with 
|Sum l -> (l1 @ l)
|i -> (l1 @ [i]))
 in 
Sum (l2))
|Power (s, n) -> 
 (match (s, n) with 
|(_, 0) -> Const (0)
|(s, 1) -> diff ((Var (s), x))
|(p, q) -> if (p = x) then Times ([Const (q); Power ((p, (q - 1)))])
 else Const (0)))
 in 
simplifier (res)

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{__list_mem__ -> (18802 : 
Input : elem (lst : #513102 list) 
Output : bool
Body : 
 (match lst with 
|[] -> false
|hd::tl -> ((hd = elem) || List.mem (elem) (tl))),

diff -> (18828 : 
Input : ((alexp : aexp), (str : string)) 
Output : aexp
Body : 
 (match alexp with 
|Const c -> Const (0)
|Var s -> if (s != str) then Const (0)
 else Const (1)
|Power (s, n) -> if (s != str) then Const (0)
 else if (n = 0) then Const (1)
 else if (n = 1) then Const (n)
 else if (n = 2) then Times ((Const (n) :: (Var (s) :: [])))
 else Times ((Const (n) :: (Power ((s, (n - 1))) :: [])))
|Times hd::tl -> if (tl = []) then diff ((hd, str))
 else 
let ht  : aexp = zeroTimes (Times ((diff ((hd, str)) :: tl)))
 in 

let st  : aexp = zeroTimes (Times ((hd :: (diff ((Times (tl), str)) :: []))))
 in 
if ((ht = Const (0)) && (st = Const (0))) then Const (0)
 else if (ht = Const (0)) then st
 else if (st = Const (0)) then ht
 else Sum ((ht :: (st :: [])))
|Times [] -> Const (0)
|Sum hd::tl -> if (tl = []) then diff ((hd, str))
 else 
let h  : aexp = diff ((hd, str))
 in 

let t  : aexp = diff ((Sum (tl), str))
 in 
if (h = Const (0)) then t
 else if (t = Const (0)) then h
 else Sum ((h :: (t :: [])))
|Sum [] -> Const (0)),

zeroTimes -> (18829 : 
Input : (a : aexp) 
Output : aexp
Body : 
 (match a with 
|Times hd::tl -> if ((hd = Const (0)) || List.mem (Const (0)) (tl)) then Const (0)
 else a
|_ -> a)}
Edge : 
{(18802, 18802) -> ,
(18828, 18828) -> ,
(18828, 18829) -> ,
(18829, 18802) -> }
Starting : 18828
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{__list_exists__ -> (18760 : 
Input : (pred : (#511856 -> bool)) (lst : #511856 list) 
Output : bool
Body : 
 (match lst with 
|[] -> false
|hd::tl -> (pred (hd) || List.exists (pred) (tl))),

diff -> (18786 : 
Input : ((e : aexp), (x : string)) 
Output : aexp
Body : 
let res  : aexp = 
 (match e with 
|Const n -> Const (0)
|Var s -> if (s = x) then Const (1)
 else Const (0)
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|[y] -> diff ((y, x))
|hd::tl -> 
let l1  : aexp list = [diff ((hd, x))]
 in 

let l2  : aexp list = 
 (match diff ((Sum (tl), x)) with 
|Sum l -> (l1 @ l)
|i -> (l1 @ [i]))
 in 
Sum (l2))
|Power (s, n) -> 
 (match (s, n) with 
|(_, 0) -> Const (0)
|(s, 1) -> diff ((Var (s), x))
|(p, q) -> if (p = x) then Times ([Const (q); Power ((p, (q - 1)))])
 else Const (0)))
 in 
simplifier (res),

simplifier -> (18785 : 
Input : (f : aexp) 
Output : aexp
Body : 
let res  : aexp = 
 (match f with 
|Times l -> if List.exists (
fun (x : aexp) -> if (x = Const (0)) then true
 else false) (l) then Const (0)
 else 
 (match l with 
|[] -> Times ([])
|hd::tl -> 
let lst  : aexp list = 
 (match simplifier (Times (tl)) with 
|Times lst -> lst
|_ -> [])
 in 
Times ((simplifier (hd) :: lst)))
|Sum l -> 
 (match l with 
|[] -> Sum ([])
|hd::tl -> if (hd = Const (0)) then Sum (tl)
 else 
let lst  : aexp list = 
 (match simplifier (Sum (tl)) with 
|Sum lst -> lst
|_ -> [])
 in 
Sum ((simplifier (hd) :: lst)))
|Power (s, n) -> 
 (match n with 
|0 -> Const (1)
|1 -> Var (s)
|_ -> f)
|_ -> f)
 in 
if (f = res) then res
 else simplifier (res)}
Edge : 
{(18760, 18760) -> ,
(18785, 18760) -> ,
(18785, 18785) -> ,
(18786, 18785) -> ,
(18786, 18786) -> }
Starting : 18786
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{__list_mem__ -> __list_exists__,
diff -> diff,
zeroTimes -> simplifier}
------Remainings in submission ------
{}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44964 : 
let res  : aexp = 
 (match ? with 
|Times l -> if ? (
fun (x : aexp) -> if (? = Const (0)) then true
 else false) (?) then Const (0)
 else 
 (match ? with 
|[] -> Times ([])
|hd::tl -> 
let lst  : aexp list = 
 (match ? (Times (?)) with 
|Times lst -> ?
|_ -> [])
 in 
Times ((? (?) :: ?)))
|Sum l -> 
 (match ? with 
|[] -> Sum ([])
|hd::tl -> if (? = Const (0)) then Sum (?)
 else 
let lst  : aexp list = 
 (match ? (Sum (?)) with 
|Sum lst -> ?
|_ -> [])
 in 
Sum ((? (?) :: ?)))
|Power (s, n) -> 
 (match ? with 
|0 -> Const (1)
|1 -> Var (?)
|_ -> ?)
|_ -> ?)
 in 
if (? = ?) then ?
 else ? (?))

Decls : 
,Exp : Modify (45127 : 
let res  : aexp = 
 (match ? with 
|Const n -> Const (0)
|Var s -> if (? = ?) then Const (1)
 else Const (0)
|Times l -> 
 (match ? with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((? ((?, ?)) :: ?)); Times ([?; ? ((Times (?), ?))])]))
|Sum l -> 
 (match ? with 
|[] -> Const (0)
|[y] -> ? ((?, ?))
|hd::tl -> 
let l1  : aexp list = [? ((?, ?))]
 in 

let l2  : aexp list = 
 (match ? ((Sum (?), ?)) with 
|Sum l -> (? @ ?)
|i -> (? @ [?]))
 in 
Sum (?))
|Power (s, n) -> 
 (match (?, ?) with 
|(_, 0) -> Const (0)
|(s, 1) -> ? ((Var (?), ?))
|(p, q) -> if (? = ?) then Times ([Const (?); Power ((?, (? - 1)))])
 else Const (0)))
 in 
? (?))

Decls : 
}
-----------------------------
Templates
-----------------------------
{Exp : Modify (45127 : 
let res  : aexp = 
 (match ? with 
|Const n -> Const (0)
|Var s -> if (? = ?) then Const (1)
 else Const (0)
|Times l -> 
 (match ? with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((? ((?, ?)) :: ?)); Times ([?; ? ((Times (?), ?))])]))
|Sum l -> 
 (match ? with 
|[] -> Const (0)
|[y] -> ? ((?, ?))
|hd::tl -> 
let l1  : aexp list = [? ((?, ?))]
 in 

let l2  : aexp list = 
 (match ? ((Sum (?), ?)) with 
|Sum l -> (? @ ?)
|i -> (? @ [?]))
 in 
Sum (?))
|Power (s, n) -> 
 (match (?, ?) with 
|(_, 0) -> Const (0)
|(s, 1) -> ? ((Var (?), ?))
|(p, q) -> if (? = ?) then Times ([Const (?); Power ((?, (? - 1)))])
 else Const (0)))
 in 
? (?))

Decls : 
}
../engine/main.native -dd -submission ../benchmarks_incorrect/diff/12/sub30.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml
-----------------------------
Submission
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, var)  = 
 (match aexp with 
|Const x -> Const (0)
|Var x -> Const (1)
|Power (x, i) -> if (i = 0) then Const (0)
 else if (i = 1) then Const (1)
 else Times ((Const (i) :: (Power ((x, (i - 1))) :: [])))
|Times aexplist -> 
 (match aexplist with 
|[] -> Const (0)
|hd::tl -> Sum ((Times ((diff ((hd, var)) :: tl)) :: (Times ((hd :: (diff ((Times (tl), var)) :: []))) :: []))))
|Sum aexplist -> Sum (List.map (
fun x -> diff ((x, var))) (aexplist)))

-----------------------------
Submission
-----------------------------
type aexp =
|Sum of aexp list
|Times of aexp list
|Power of (string * int)
|Var of string
|Const of int

let rec diff (aexp, var)  = (45014, 
 (match (44947, aexp with 
|Const x -> (44949, Const ((44948, 0)
|Var x -> (44951, Const ((44950, 1)
|Power (x, i) -> (44975, if (44954, ((44952, i = (44953, 0) then (44956, Const ((44955, 0)
 else (44974, if (44959, ((44957, i = (44958, 1) then (44961, Const ((44960, 1)
 else (44973, Times ((44972, ((44963, Const ((44962, i) :: (44971, ((44969, Power ((44968, ((44964, x, (44967, ((44965, i - (44966, 1))) :: (44970, [])))
|Times aexplist -> (45002, 
 (match (44976, aexplist with 
|[] -> (44978, Const ((44977, 0)
|hd::tl -> (45001, Sum ((45000, ((44986, Times ((44985, ((44983, (44979, diff ((44982, ((44980, hd, (44981, var)) :: (44984, tl)) :: (44999, ((44997, Times ((44996, ((44987, hd :: (44995, ((44993, (44988, diff ((44992, ((44990, Times ((44989, tl), (44991, var)) :: (44994, []))) :: (44998, []))))
|Sum aexplist -> (45013, Sum ((45012, (45011, (45003, __list_map__ ((45009, 
fun x -> (45008, (45004, diff ((45007, ((45005, x, (45006, var))) ((45010, aexplist)))

-----------------------------
Most Similar Sol ../benchmarks_correct/diff/18/sub65.ml Score : 2
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec map  : ((a -> b) -> (a list -> b list)) = 
fun func lst -> 
 (match lst with 
|[] -> []
|hd::tl -> (func (hd) :: map (func) (tl)))

let rec diff  : ((aexp * string) -> aexp) = 
fun (exp, x) -> 
 (match exp with 
|Const n -> Const (0)
|Var y -> if (x != y) then Const (0)
 else Const (1)
|Power (y, n) -> if (x != y) then Const (0)
 else if (n < 0) then raise Failure ("Invalid Input")
 else if (n = 0) then Const (0)
 else Times ([Const (n); Power ((y, (n - 1)))])
|Times es -> 
 (match es with 
|[] -> raise Failure ("Invalid Input")
|[e] -> diff ((e, x))
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum es -> Sum (map (
fun e -> diff ((e, x))) (es)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{__list_map__ -> (18365 : 
Input : (func : (#497270 -> #497272)) (lst : #497270 list) 
Output : #497272 list
Body : 
 (match lst with 
|[] -> []
|hd::tl -> (func (hd) :: List.map (func) (tl))),

diff -> (18392 : 
Input : ((aexp : aexp), var) 
Output : aexp
Body : 
 (match aexp with 
|Const x -> Const (0)
|Var x -> Const (1)
|Power (x, i) -> if (i = 0) then Const (0)
 else if (i = 1) then Const (1)
 else Times ((Const (i) :: (Power ((x, (i - 1))) :: [])))
|Times aexplist -> 
 (match aexplist with 
|[] -> Const (0)
|hd::tl -> Sum ((Times ((diff ((hd, var)) :: tl)) :: (Times ((hd :: (diff ((Times (tl), var)) :: []))) :: []))))
|Sum aexplist -> Sum (List.map (
fun (x : aexp) -> diff ((x, var))) (aexplist)))}
Edge : 
{(18365, 18365) -> ,
(18392, 18365) -> ,
(18392, 18392) -> }
Starting : 18392
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{diff -> (18350 : 
Input : ((exp : aexp), (x : string)) 
Output : aexp
Body : 
 (match exp with 
|Const n -> Const (0)
|Var y -> if (x != y) then Const (0)
 else Const (1)
|Power (y, n) -> if (x != y) then Const (0)
 else if (n < 0) then raise Failure ("Invalid Input")
 else if (n = 0) then Const (0)
 else Times ([Const (n); Power ((y, (n - 1)))])
|Times es -> 
 (match es with 
|[] -> raise Failure ("Invalid Input")
|[e] -> diff ((e, x))
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum es -> Sum (map (
fun (e : aexp) -> diff ((e, x))) (es))),

map -> (18349 : 
Input : (func : (#496554 -> #496556)) (lst : #496554 list) 
Output : #496138 list
Body : 
 (match lst with 
|[] -> []
|hd::tl -> (func (hd) :: map (func) (tl)))}
Edge : 
{(18349, 18349) -> ,
(18350, 18349) -> ,
(18350, 18350) -> }
Starting : 18350
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{__list_map__ -> map,
diff -> diff}
------Remainings in submission ------
{}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44951 : if (? != ?) then Const (0)
 else Const (1))

Decls : 
,Exp : Modify (44954 : (? != ?))

Decls : 
,Exp : Modify (44959 : (? < 0))

Decls : 
,Exp : Modify (44973 : if (? = 0) then Const (0)
 else Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
,Exp : Modify (44976 : ?)

Decls : 
,Exp : Modify (45000 : [Times ((? ((?, ?)) :: ?)); Times ([?; ? ((Times (?), ?))])])

Decls : 
,Exp : Modify (45012 : ? (
fun (e : aexp) -> ? ((?, ?))) (?))

Decls : 
,Exp : Insert ([e] -> ? ((?, ?)) At label 45002

Decls : 
}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44951 : if (? != ?) then Const (0)
 else Const (1))

Decls : 
,Exp : Modify (44954 : (? != ?))

Decls : 
,Exp : Modify (44959 : (? < 0))

Decls : 
,Exp : Modify (44973 : if (? = 0) then Const (0)
 else Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
,Exp : Modify (44976 : ?)

Decls : 
,Exp : Modify (45000 : [Times ((? ((?, ?)) :: ?)); Times ([?; ? ((Times (?), ?))])])

Decls : 
,Exp : Modify (45012 : ? (
fun (e : aexp) -> ? ((?, ?))) (?))

Decls : 
,Exp : Insert ([e] -> ? ((?, ?)) At label 45002

Decls : 
}
-----------------------------
Patch
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, var)  = 
 (match aexp with 
|Const x -> Const (0)
|Var x -> if (var != x) then Const (0)
 else Const (1)
|Power (x, i) -> if (var != x) then Const (0)
 else if (i = 1) then Const (1)
 else Times ((Const (i) :: (Power ((x, (i - 1))) :: [])))
|Times aexplist -> 
 (match aexplist with 
|[] -> Const (0)
|hd::tl -> Sum ((Times ((diff ((hd, var)) :: tl)) :: (Times ((hd :: (diff ((Times (tl), var)) :: []))) :: []))))
|Sum aexplist -> Sum (List.map (
fun x -> diff ((x, var))) (aexplist)))

Time : 0.0871200561523
../engine/main.native -dd -submission ../benchmarks_incorrect/diff/12/sub31.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml
-----------------------------
Submission
-----------------------------

exception Error of string
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec diff_times orihd li s n  = 
 (match li with 
|hd::tl -> if ((hd = orihd) && (n = 1)) then Const (0)
 else Sum (List.append ([Times ((diff ((hd, s)) :: tl))]) ([diff_times (orihd) (List.append (tl) ([hd])) (s) (1)])))
 in 

 (match aexp with 
|Const _ -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, i) -> if (s = str) then Times ([Const (i); Power ((s, (i - 1)))])
 else Const (0)
|Times l -> if (l = []) then raise Error ("no times!")
 else diff_times (List.hd (l)) (l) (str) (0)
|Sum hd::tl -> if (tl = []) then diff ((hd, str))
 else Sum (List.append ([diff ((hd, str))]) ([diff ((Sum (tl), str))])))

-----------------------------
Submission
-----------------------------

exception Error of string
type aexp =
|Sum of aexp list
|Times of aexp list
|Power of (string * int)
|Var of string
|Const of int

let rec diff (aexp, str)  = (45059, 
let rec diff_times orihd li s n  = (44986, 
 (match (44947, li with 
|hd::tl -> (44985, if (44954, ((44950, ((44948, hd = (44949, orihd) && (44953, ((44951, n = (44952, 1)) then (44956, Const ((44955, 0)
 else (44984, Sum ((44983, (44982, (44957, __list_append__ ((44966, [(44965, Times ((44964, ((44962, (44958, diff ((44961, ((44959, hd, (44960, s)) :: (44963, tl))]) ((44981, [(44980, (44979, (44978, (44977, (44967, diff_times ((44968, orihd) ((44974, (44973, (44969, __list_append__ ((44970, tl) ((44972, [(44971, hd])) ((44975, s) ((44976, 1)])))
 in 
(45058, 
 (match (44987, aexp with 
|Const _ -> (44989, Const ((44988, 0)
|Var s -> (44997, if (44992, ((44990, s = (44991, str) then (44994, Const ((44993, 1)
 else (44996, Const ((44995, 0)
|Power (s, i) -> (45013, if (45000, ((44998, s = (44999, str) then (45010, Times ((45009, [(45002, Const ((45001, i); (45008, Power ((45007, ((45003, s, (45006, ((45004, i - (45005, 1)))])
 else (45012, Const ((45011, 0)
|Times l -> (45031, if (45016, ((45014, l = (45015, []) then (45019, raise (45018, Error ((45017, "no times!")
 else (45030, (45029, (45028, (45027, (45020, diff_times ((45023, (45021, __list_hd__ ((45022, l)) ((45024, l) ((45025, str) ((45026, 0)
|Sum hd::tl -> (45057, if (45034, ((45032, tl = (45033, []) then (45039, (45035, diff ((45038, ((45036, hd, (45037, str))
 else (45056, Sum ((45055, (45054, (45040, __list_append__ ((45046, [(45045, (45041, diff ((45044, ((45042, hd, (45043, str))]) ((45053, [(45052, (45047, diff ((45051, ((45049, Sum ((45048, tl), (45050, str))])))

-----------------------------
Most Similar Sol ../benchmarks_correct/diff/12/sub45.ml Score : 1
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let diff  = 
let rec indiff  = 
fun (x, y) -> 
 (match x with 
|Const _ -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a = y) then Times ([Const (b); Power ((a, (b - 1)))])
 else Const (0)
|Sum x -> 
let rec sm  = 
fun x -> 
 (match x with 
|h::t -> (indiff ((h, y)) :: sm (t))
|_ -> [])
 in 
Sum (sm (x))
|Times x -> 
let rec tms  = 
fun w x -> 
 (match x with 
|h::t -> (Times ((w @ (indiff ((h, y)) :: t))) :: tms ((w @ [h])) (t))
|_ -> [])
 in 
Sum (tms ([]) (x)))
 in 

fun (x, y) -> indiff ((x, y))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{__list_append__ -> (18809 : 
Input : (lst1 : #505596 list) (lst2 : #505596 list) 
Output : #505533 list
Body : (lst1 @ lst2),

__list_hd__ -> (18803 : 
Input : (lst : #505540 list) 
Output : #505533
Body : 
 (match lst with 
|[] -> raise ListError
|hd::tl -> hd),

diff -> (18832 : 
Input : ((aexp : aexp), (str : string)) 
Output : aexp
Body : 
 (match aexp with 
|Const _ -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, i) -> if (s = str) then Times ([Const (i); Power ((s, (i - 1)))])
 else Const (0)
|Times l -> if (l = []) then raise Error ("no times!")
 else diff_times (List.hd (l)) (l) (str) (0)
|Sum hd::tl -> if (tl = []) then diff ((hd, str))
 else Sum (List.append ([diff ((hd, str))]) ([diff ((Sum (tl), str))]))),

diff_times -> (18833 : 
Input : (orihd : aexp) (li : aexp list) (s : string) (n : int) 
Output : aexp
Body : 
 (match li with 
|hd::tl -> if ((hd = orihd) && (n = 1)) then Const (0)
 else Sum (List.append ([Times ((diff ((hd, s)) :: tl))]) ([diff_times (orihd) (List.append (tl) ([hd])) (s) (1)])))}
Edge : 
{(18832, 18803) -> ,
(18832, 18809) -> ,
(18832, 18832) -> ,
(18832, 18833) -> ,
(18833, 18809) -> ,
(18833, 18832) -> ,
(18833, 18833) -> }
Starting : 18832
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{diff -> (18785 : 
Input : ((x : aexp), (y : string)) 
Output : aexp
Body : indiff ((x, y)),

indiff -> (18786 : 
Input : ((x : aexp), (y : string)) 
Output : aexp
Body : 
 (match x with 
|Const _ -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a = y) then Times ([Const (b); Power ((a, (b - 1)))])
 else Const (0)
|Sum x -> Sum (sm (x))
|Times x -> Sum (tms ([]) (x))),

sm -> (18787 : 
Input : (x : aexp list) 
Output : aexp list
Body : 
 (match x with 
|h::t -> (indiff ((h, y)) :: sm (t))
|_ -> []),

tms -> (18788 : 
Input : (w : aexp list) (x : aexp list) 
Output : aexp list
Body : 
 (match x with 
|h::t -> (Times ((w @ (indiff ((h, y)) :: t))) :: tms ((w @ [h])) (t))
|_ -> [])}
Edge : 
{(18785, 18786) -> ,
(18786, 18787) -> ,
(18786, 18788) -> ,
(18787, 18786) -> ,
(18787, 18787) -> ,
(18788, 18786) -> ,
(18788, 18788) -> }
Starting : 18785
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{__list_append__ -> tms,
__list_hd__ -> sm,
diff -> diff}
------Remainings in submission ------
{diff_times}
------Remainings in solution ------
{indiff}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : li)

Decls : 
,Exp : Modify (44948 : aexp)

Decls : 
,Exp : Modify (44948 : hd)

Decls : 
,Exp : Modify (44948 : orihd)

Decls : 
,Exp : Modify (44949 : aexp)

Decls : 
,Exp : Modify (44949 : hd)

Decls : 
,Exp : Modify (44949 : orihd)

Decls : 
,Exp : Modify (44951 : n)

Decls : 
,Exp : Modify (44952 : n)

Decls : 
,Exp : Modify (44955 : n)

Decls : 
,Exp : Modify (44958 : diff)

Decls : 
,Exp : Modify (44959 : aexp)

Decls : 
,Exp : Modify (44959 : hd)

Decls : 
,Exp : Modify (44959 : orihd)

Decls : 
,Exp : Modify (44960 : s)

Decls : 
,Exp : Modify (44960 : str)

Decls : 
,Exp : Modify (44962 : aexp)

Decls : 
,Exp : Modify (44962 : hd)

Decls : 
,Exp : Modify (44962 : orihd)

Decls : 
,Exp : Modify (44963 : li)

Decls : 
,Exp : Modify (44963 : tl)

Decls : 
,Exp : Modify (44964 : li)

Decls : 
,Exp : Modify (44964 : tl)

Decls : 
,Exp : Modify (44967 : diff_times)

Decls : 
,Exp : Modify (44968 : aexp)

Decls : 
,Exp : Modify (44968 : hd)

Decls : 
,Exp : Modify (44968 : orihd)

Decls : 
,Exp : Modify (44970 : li)

Decls : 
,Exp : Modify (44970 : tl)

Decls : 
,Exp : Modify (44971 : aexp)

Decls : 
,Exp : Modify (44971 : hd)

Decls : 
,Exp : Modify (44971 : orihd)

Decls : 
,Exp : Modify (44974 : li)

Decls : 
,Exp : Modify (44974 : tl)

Decls : 
,Exp : Modify (44975 : s)

Decls : 
,Exp : Modify (44975 : str)

Decls : 
,Exp : Modify (44976 : n)

Decls : 
,Exp : Modify (44977 : diff_times (aexp))

Decls : 
,Exp : Modify (44977 : diff_times (hd))

Decls : 
,Exp : Modify (44977 : diff_times (orihd))

Decls : 
,Exp : Modify (44980 : aexp)

Decls : 
,Exp : Modify (44980 : hd)

Decls : 
,Exp : Modify (44980 : orihd)

Decls : 
,Exp : Modify (44983 : li)

Decls : 
,Exp : Modify (44983 : tl)

Decls : 
,Exp : Modify (44985 : aexp)

Decls : 
,Exp : Modify (44985 : hd)

Decls : 
,Exp : Modify (44985 : orihd)

Decls : 
,Exp : Modify (45058 : ? ((?, ?)))

Decls : 

let indiff ((x : aexp), (y : string))  : aexp = 
 (match x with 
|Const _ -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a = y) then Times ([Const (b); Power ((a, (b - 1)))])
 else Const (0)
|Sum x -> Sum (sm (x))
|Times x -> Sum (tms ([]) (x)))

Callers : {__list_append__,__list_hd__,diff}
,Exp : Insert (_ -> [] At label 45076

Decls : 
,Exp : Delete ([] -> raise ListError At label 45076

Decls : 
}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : li)

Decls : 
,Exp : Modify (44948 : aexp)

Decls : 
,Exp : Modify (44948 : hd)

Decls : 
,Exp : Modify (44948 : orihd)

Decls : 
,Exp : Modify (44949 : aexp)

Decls : 
,Exp : Modify (44949 : hd)

Decls : 
,Exp : Modify (44949 : orihd)

Decls : 
,Exp : Modify (44951 : n)

Decls : 
,Exp : Modify (44952 : n)

Decls : 
,Exp : Modify (44955 : n)

Decls : 
,Exp : Modify (44958 : diff)

Decls : 
,Exp : Modify (44959 : aexp)

Decls : 
,Exp : Modify (44959 : hd)

Decls : 
,Exp : Modify (44959 : orihd)

Decls : 
,Exp : Modify (44960 : s)

Decls : 
,Exp : Modify (44960 : str)

Decls : 
,Exp : Modify (44962 : aexp)

Decls : 
,Exp : Modify (44962 : hd)

Decls : 
,Exp : Modify (44962 : orihd)

Decls : 
,Exp : Modify (44963 : li)

Decls : 
,Exp : Modify (44963 : tl)

Decls : 
,Exp : Modify (44964 : li)

Decls : 
,Exp : Modify (44964 : tl)

Decls : 
,Exp : Modify (44967 : diff_times)

Decls : 
,Exp : Modify (44968 : aexp)

Decls : 
,Exp : Modify (44968 : hd)

Decls : 
,Exp : Modify (44968 : orihd)

Decls : 
,Exp : Modify (44970 : li)

Decls : 
,Exp : Modify (44970 : tl)

Decls : 
,Exp : Modify (44971 : aexp)

Decls : 
,Exp : Modify (44971 : hd)

Decls : 
,Exp : Modify (44971 : orihd)

Decls : 
,Exp : Modify (44974 : li)

Decls : 
,Exp : Modify (44974 : tl)

Decls : 
,Exp : Modify (44975 : s)

Decls : 
,Exp : Modify (44975 : str)

Decls : 
,Exp : Modify (44976 : n)

Decls : 
,Exp : Modify (44977 : diff_times (aexp))

Decls : 
,Exp : Modify (44977 : diff_times (hd))

Decls : 
,Exp : Modify (44977 : diff_times (orihd))

Decls : 
,Exp : Modify (44980 : aexp)

Decls : 
,Exp : Modify (44980 : hd)

Decls : 
,Exp : Modify (44980 : orihd)

Decls : 
,Exp : Modify (44983 : li)

Decls : 
,Exp : Modify (44983 : tl)

Decls : 
,Exp : Modify (44985 : aexp)

Decls : 
,Exp : Modify (44985 : hd)

Decls : 
,Exp : Modify (44985 : orihd)

Decls : 
,Exp : Modify (45058 : ? ((?, ?)))

Decls : 

let indiff ((x : aexp), (y : string))  : aexp = 
 (match x with 
|Const _ -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a = y) then Times ([Const (b); Power ((a, (b - 1)))])
 else Const (0)
|Sum x -> Sum (sm (x))
|Times x -> Sum (tms ([]) (x)))

Callers : {__list_append__,__list_hd__,diff}
,Exp : Insert (_ -> [] At label 45076

Decls : 
,Exp : Delete ([] -> raise ListError At label 45076

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/diff/12/sub32.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml
-----------------------------
Submission
-----------------------------

exception Error of string
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec diff_times orihd li s n  = 
 (match li with 
|hd::tl -> if ((hd = orihd) && (n = 1)) then Const (0)
 else Sum (List.append ([Times ((diff ((hd, s)) :: tl))]) ([diff_times (orihd) (List.append (tl) ([hd])) (s) (1)])))
 in 

 (match aexp with 
|Const _ -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, i) -> if (s = str) then Times ([Const (i); Power ((s, (i - 1)))])
 else Const (0)
|Times l -> if (l = []) then raise Error ("no times!")
 else diff_times (List.hd (l)) (l) (str) (0)
|Sum hd::tl -> if (tl = []) then diff ((hd, str))
 else Sum (List.append ([diff ((hd, str))]) ([diff ((Sum (tl), str))])))

-----------------------------
Submission
-----------------------------

exception Error of string
type aexp =
|Sum of aexp list
|Times of aexp list
|Power of (string * int)
|Var of string
|Const of int

let rec diff (aexp, str)  = (45059, 
let rec diff_times orihd li s n  = (44986, 
 (match (44947, li with 
|hd::tl -> (44985, if (44954, ((44950, ((44948, hd = (44949, orihd) && (44953, ((44951, n = (44952, 1)) then (44956, Const ((44955, 0)
 else (44984, Sum ((44983, (44982, (44957, __list_append__ ((44966, [(44965, Times ((44964, ((44962, (44958, diff ((44961, ((44959, hd, (44960, s)) :: (44963, tl))]) ((44981, [(44980, (44979, (44978, (44977, (44967, diff_times ((44968, orihd) ((44974, (44973, (44969, __list_append__ ((44970, tl) ((44972, [(44971, hd])) ((44975, s) ((44976, 1)])))
 in 
(45058, 
 (match (44987, aexp with 
|Const _ -> (44989, Const ((44988, 0)
|Var s -> (44997, if (44992, ((44990, s = (44991, str) then (44994, Const ((44993, 1)
 else (44996, Const ((44995, 0)
|Power (s, i) -> (45013, if (45000, ((44998, s = (44999, str) then (45010, Times ((45009, [(45002, Const ((45001, i); (45008, Power ((45007, ((45003, s, (45006, ((45004, i - (45005, 1)))])
 else (45012, Const ((45011, 0)
|Times l -> (45031, if (45016, ((45014, l = (45015, []) then (45019, raise (45018, Error ((45017, "no times!")
 else (45030, (45029, (45028, (45027, (45020, diff_times ((45023, (45021, __list_hd__ ((45022, l)) ((45024, l) ((45025, str) ((45026, 0)
|Sum hd::tl -> (45057, if (45034, ((45032, tl = (45033, []) then (45039, (45035, diff ((45038, ((45036, hd, (45037, str))
 else (45056, Sum ((45055, (45054, (45040, __list_append__ ((45046, [(45045, (45041, diff ((45044, ((45042, hd, (45043, str))]) ((45053, [(45052, (45047, diff ((45051, ((45049, Sum ((45048, tl), (45050, str))])))

-----------------------------
Most Similar Sol ../benchmarks_correct/diff/12/sub45.ml Score : 1
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let diff  = 
let rec indiff  = 
fun (x, y) -> 
 (match x with 
|Const _ -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a = y) then Times ([Const (b); Power ((a, (b - 1)))])
 else Const (0)
|Sum x -> 
let rec sm  = 
fun x -> 
 (match x with 
|h::t -> (indiff ((h, y)) :: sm (t))
|_ -> [])
 in 
Sum (sm (x))
|Times x -> 
let rec tms  = 
fun w x -> 
 (match x with 
|h::t -> (Times ((w @ (indiff ((h, y)) :: t))) :: tms ((w @ [h])) (t))
|_ -> [])
 in 
Sum (tms ([]) (x)))
 in 

fun (x, y) -> indiff ((x, y))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{__list_append__ -> (18809 : 
Input : (lst1 : #505596 list) (lst2 : #505596 list) 
Output : #505533 list
Body : (lst1 @ lst2),

__list_hd__ -> (18803 : 
Input : (lst : #505540 list) 
Output : #505533
Body : 
 (match lst with 
|[] -> raise ListError
|hd::tl -> hd),

diff -> (18832 : 
Input : ((aexp : aexp), (str : string)) 
Output : aexp
Body : 
 (match aexp with 
|Const _ -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, i) -> if (s = str) then Times ([Const (i); Power ((s, (i - 1)))])
 else Const (0)
|Times l -> if (l = []) then raise Error ("no times!")
 else diff_times (List.hd (l)) (l) (str) (0)
|Sum hd::tl -> if (tl = []) then diff ((hd, str))
 else Sum (List.append ([diff ((hd, str))]) ([diff ((Sum (tl), str))]))),

diff_times -> (18833 : 
Input : (orihd : aexp) (li : aexp list) (s : string) (n : int) 
Output : aexp
Body : 
 (match li with 
|hd::tl -> if ((hd = orihd) && (n = 1)) then Const (0)
 else Sum (List.append ([Times ((diff ((hd, s)) :: tl))]) ([diff_times (orihd) (List.append (tl) ([hd])) (s) (1)])))}
Edge : 
{(18832, 18803) -> ,
(18832, 18809) -> ,
(18832, 18832) -> ,
(18832, 18833) -> ,
(18833, 18809) -> ,
(18833, 18832) -> ,
(18833, 18833) -> }
Starting : 18832
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{diff -> (18785 : 
Input : ((x : aexp), (y : string)) 
Output : aexp
Body : indiff ((x, y)),

indiff -> (18786 : 
Input : ((x : aexp), (y : string)) 
Output : aexp
Body : 
 (match x with 
|Const _ -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a = y) then Times ([Const (b); Power ((a, (b - 1)))])
 else Const (0)
|Sum x -> Sum (sm (x))
|Times x -> Sum (tms ([]) (x))),

sm -> (18787 : 
Input : (x : aexp list) 
Output : aexp list
Body : 
 (match x with 
|h::t -> (indiff ((h, y)) :: sm (t))
|_ -> []),

tms -> (18788 : 
Input : (w : aexp list) (x : aexp list) 
Output : aexp list
Body : 
 (match x with 
|h::t -> (Times ((w @ (indiff ((h, y)) :: t))) :: tms ((w @ [h])) (t))
|_ -> [])}
Edge : 
{(18785, 18786) -> ,
(18786, 18787) -> ,
(18786, 18788) -> ,
(18787, 18786) -> ,
(18787, 18787) -> ,
(18788, 18786) -> ,
(18788, 18788) -> }
Starting : 18785
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{__list_append__ -> tms,
__list_hd__ -> sm,
diff -> diff}
------Remainings in submission ------
{diff_times}
------Remainings in solution ------
{indiff}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : li)

Decls : 
,Exp : Modify (44948 : aexp)

Decls : 
,Exp : Modify (44948 : hd)

Decls : 
,Exp : Modify (44948 : orihd)

Decls : 
,Exp : Modify (44949 : aexp)

Decls : 
,Exp : Modify (44949 : hd)

Decls : 
,Exp : Modify (44949 : orihd)

Decls : 
,Exp : Modify (44951 : n)

Decls : 
,Exp : Modify (44952 : n)

Decls : 
,Exp : Modify (44955 : n)

Decls : 
,Exp : Modify (44958 : diff)

Decls : 
,Exp : Modify (44959 : aexp)

Decls : 
,Exp : Modify (44959 : hd)

Decls : 
,Exp : Modify (44959 : orihd)

Decls : 
,Exp : Modify (44960 : s)

Decls : 
,Exp : Modify (44960 : str)

Decls : 
,Exp : Modify (44962 : aexp)

Decls : 
,Exp : Modify (44962 : hd)

Decls : 
,Exp : Modify (44962 : orihd)

Decls : 
,Exp : Modify (44963 : li)

Decls : 
,Exp : Modify (44963 : tl)

Decls : 
,Exp : Modify (44964 : li)

Decls : 
,Exp : Modify (44964 : tl)

Decls : 
,Exp : Modify (44967 : diff_times)

Decls : 
,Exp : Modify (44968 : aexp)

Decls : 
,Exp : Modify (44968 : hd)

Decls : 
,Exp : Modify (44968 : orihd)

Decls : 
,Exp : Modify (44970 : li)

Decls : 
,Exp : Modify (44970 : tl)

Decls : 
,Exp : Modify (44971 : aexp)

Decls : 
,Exp : Modify (44971 : hd)

Decls : 
,Exp : Modify (44971 : orihd)

Decls : 
,Exp : Modify (44974 : li)

Decls : 
,Exp : Modify (44974 : tl)

Decls : 
,Exp : Modify (44975 : s)

Decls : 
,Exp : Modify (44975 : str)

Decls : 
,Exp : Modify (44976 : n)

Decls : 
,Exp : Modify (44977 : diff_times (aexp))

Decls : 
,Exp : Modify (44977 : diff_times (hd))

Decls : 
,Exp : Modify (44977 : diff_times (orihd))

Decls : 
,Exp : Modify (44980 : aexp)

Decls : 
,Exp : Modify (44980 : hd)

Decls : 
,Exp : Modify (44980 : orihd)

Decls : 
,Exp : Modify (44983 : li)

Decls : 
,Exp : Modify (44983 : tl)

Decls : 
,Exp : Modify (44985 : aexp)

Decls : 
,Exp : Modify (44985 : hd)

Decls : 
,Exp : Modify (44985 : orihd)

Decls : 
,Exp : Modify (45058 : ? ((?, ?)))

Decls : 

let indiff ((x : aexp), (y : string))  : aexp = 
 (match x with 
|Const _ -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a = y) then Times ([Const (b); Power ((a, (b - 1)))])
 else Const (0)
|Sum x -> Sum (sm (x))
|Times x -> Sum (tms ([]) (x)))

Callers : {__list_append__,__list_hd__,diff}
,Exp : Insert (_ -> [] At label 45076

Decls : 
,Exp : Delete ([] -> raise ListError At label 45076

Decls : 
}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : li)

Decls : 
,Exp : Modify (44948 : aexp)

Decls : 
,Exp : Modify (44948 : hd)

Decls : 
,Exp : Modify (44948 : orihd)

Decls : 
,Exp : Modify (44949 : aexp)

Decls : 
,Exp : Modify (44949 : hd)

Decls : 
,Exp : Modify (44949 : orihd)

Decls : 
,Exp : Modify (44951 : n)

Decls : 
,Exp : Modify (44952 : n)

Decls : 
,Exp : Modify (44955 : n)

Decls : 
,Exp : Modify (44958 : diff)

Decls : 
,Exp : Modify (44959 : aexp)

Decls : 
,Exp : Modify (44959 : hd)

Decls : 
,Exp : Modify (44959 : orihd)

Decls : 
,Exp : Modify (44960 : s)

Decls : 
,Exp : Modify (44960 : str)

Decls : 
,Exp : Modify (44962 : aexp)

Decls : 
,Exp : Modify (44962 : hd)

Decls : 
,Exp : Modify (44962 : orihd)

Decls : 
,Exp : Modify (44963 : li)

Decls : 
,Exp : Modify (44963 : tl)

Decls : 
,Exp : Modify (44964 : li)

Decls : 
,Exp : Modify (44964 : tl)

Decls : 
,Exp : Modify (44967 : diff_times)

Decls : 
,Exp : Modify (44968 : aexp)

Decls : 
,Exp : Modify (44968 : hd)

Decls : 
,Exp : Modify (44968 : orihd)

Decls : 
,Exp : Modify (44970 : li)

Decls : 
,Exp : Modify (44970 : tl)

Decls : 
,Exp : Modify (44971 : aexp)

Decls : 
,Exp : Modify (44971 : hd)

Decls : 
,Exp : Modify (44971 : orihd)

Decls : 
,Exp : Modify (44974 : li)

Decls : 
,Exp : Modify (44974 : tl)

Decls : 
,Exp : Modify (44975 : s)

Decls : 
,Exp : Modify (44975 : str)

Decls : 
,Exp : Modify (44976 : n)

Decls : 
,Exp : Modify (44977 : diff_times (aexp))

Decls : 
,Exp : Modify (44977 : diff_times (hd))

Decls : 
,Exp : Modify (44977 : diff_times (orihd))

Decls : 
,Exp : Modify (44980 : aexp)

Decls : 
,Exp : Modify (44980 : hd)

Decls : 
,Exp : Modify (44980 : orihd)

Decls : 
,Exp : Modify (44983 : li)

Decls : 
,Exp : Modify (44983 : tl)

Decls : 
,Exp : Modify (44985 : aexp)

Decls : 
,Exp : Modify (44985 : hd)

Decls : 
,Exp : Modify (44985 : orihd)

Decls : 
,Exp : Modify (45058 : ? ((?, ?)))

Decls : 

let indiff ((x : aexp), (y : string))  : aexp = 
 (match x with 
|Const _ -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a = y) then Times ([Const (b); Power ((a, (b - 1)))])
 else Const (0)
|Sum x -> Sum (sm (x))
|Times x -> Sum (tms ([]) (x)))

Callers : {__list_append__,__list_hd__,diff}
,Exp : Insert (_ -> [] At label 45076

Decls : 
,Exp : Delete ([] -> raise ListError At label 45076

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/diff/12/sub4.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml
-----------------------------
Submission
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (x, y)  = 
 (match x with 
|Const c -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a != y) then Const (0)
 else if (b = 1) then Var (a)
 else if (b = 2) then Times ([Const (2); Var (a)])
 else Times ([Const (b); Power ((a, (b - 1)))])
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::t -> Sum ([diff ((h, y)); diff ((Sum (t), y))]))
|Times l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, y))
|Const a::t -> Times ([Const (a); diff ((Times (t), y))])
|h::t -> Sum ([Times ([diff ((h, y)); Times (t)]); Times ([h; diff ((Times (t), y))])])))

-----------------------------
Submission
-----------------------------
type aexp =
|Sum of aexp list
|Times of aexp list
|Power of (string * int)
|Var of string
|Const of int

let rec diff (x, y)  = (45046, 
 (match (44947, x with 
|Const c -> (44949, Const ((44948, 0)
|Var a -> (44957, if (44952, ((44950, a = (44951, y) then (44954, Const ((44953, 1)
 else (44956, Const ((44955, 0)
|Power (a, b) -> (44989, if (44960, ((44958, a != (44959, y) then (44962, Const ((44961, 0)
 else (44988, if (44965, ((44963, b = (44964, 1) then (44967, Var ((44966, a)
 else (44987, if (44970, ((44968, b = (44969, 2) then (44976, Times ((44975, [(44972, Const ((44971, 2); (44974, Var ((44973, a)])
 else (44986, Times ((44985, [(44978, Const ((44977, b); (44984, Power ((44983, ((44979, a, (44982, ((44980, b - (44981, 1)))])
|Sum l -> (45006, 
 (match (44990, l with 
|[] -> (44992, Const ((44991, 0)
|h::t -> (45005, Sum ((45004, [(44997, (44993, diff ((44996, ((44994, h, (44995, y)); (45003, (44998, diff ((45002, ((45000, Sum ((44999, t), (45001, y))]))
|Times l -> (45045, 
 (match (45007, l with 
|[] -> (45009, Const ((45008, 0)
|h::[] -> (45014, (45010, diff ((45013, ((45011, h, (45012, y))
|Const a::t -> (45024, Times ((45023, [(45016, Const ((45015, a); (45022, (45017, diff ((45021, ((45019, Times ((45018, t), (45020, y))])
|h::t -> (45044, Sum ((45043, [(45033, Times ((45032, [(45029, (45025, diff ((45028, ((45026, h, (45027, y)); (45031, Times ((45030, t)]); (45042, Times ((45041, [(45034, h; (45040, (45035, diff ((45039, ((45037, Times ((45036, t), (45038, y))])])))

-----------------------------
Most Similar Sol ../benchmarks_correct/diff/18/sub9.ml Score : 1
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff  : ((aexp * string) -> aexp) = 
fun (exp, x) -> 
 (match exp with 
|Const n -> Const (0)
|Var s -> if (s != x) then Const (0)
 else Const (1)
|Power (s, n) -> if (s != x) then Const (0)
 else Times ([Const (n); Power ((s, (n - 1)))])
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([diff ((hd, x)); diff ((Sum (tl), x))])))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{diff -> (18390 : 
Input : ((x : aexp), (y : string)) 
Output : aexp
Body : 
 (match x with 
|Const c -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a != y) then Const (0)
 else if (b = 1) then Var (a)
 else if (b = 2) then Times ([Const (2); Var (a)])
 else Times ([Const (b); Power ((a, (b - 1)))])
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::t -> Sum ([diff ((h, y)); diff ((Sum (t), y))]))
|Times l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, y))
|Const a::t -> Times ([Const (a); diff ((Times (t), y))])
|h::t -> Sum ([Times ([diff ((h, y)); Times (t)]); Times ([h; diff ((Times (t), y))])])))}
Edge : 
{(18390, 18390) -> }
Starting : 18390
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{diff -> (18349 : 
Input : ((exp : aexp), (x : string)) 
Output : aexp
Body : 
 (match exp with 
|Const n -> Const (0)
|Var s -> if (s != x) then Const (0)
 else Const (1)
|Power (s, n) -> if (s != x) then Const (0)
 else Times ([Const (n); Power ((s, (n - 1)))])
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([diff ((hd, x)); diff ((Sum (tl), x))])))}
Edge : 
{(18349, 18349) -> }
Starting : 18349
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{diff -> diff}
------Remainings in submission ------
{}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44952 : (? != ?))

Decls : 
,Exp : Modify (44953 : 0)

Decls : 
,Exp : Modify (44955 : 1)

Decls : 
,Exp : Modify (44958 : ?)

Decls : 
,Exp : Modify (44959 : ?)

Decls : 
,Exp : Modify (44988 : Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
,Exp : Modify (44990 : ?)

Decls : 
,Exp : Modify (44997 : ? ((?, ?)))

Decls : 
,Exp : Modify (45003 : ? ((Sum (?), ?)))

Decls : 
,Exp : Modify (45007 : ?)

Decls : 
,Exp : Modify (45032 : (? ((?, ?)) :: ?))

Decls : 
,Exp : Modify (45034 : ?)

Decls : 
,Exp : Modify (45040 : ? ((Times (?), ?)))

Decls : 
,Exp : Delete (h::[] -> diff ((h, y)) At label 45045

Decls : 
,Exp : Delete (Const a::t -> Times ([Const (a); diff ((Times (t), y))]) At label 45045

Decls : 
}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44958 : ?)

Decls : 
,Exp : Modify (44959 : ?)

Decls : 
,Exp : Modify (44988 : Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
}
-----------------------------
Patch
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (x, y)  = 
 (match x with 
|Const c -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a != y) then Const (0)
 else Times ([Const (b); Power ((a, (b - 1)))])
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::t -> Sum ([diff ((h, y)); diff ((Sum (t), y))]))
|Times l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, y))
|Const a::t -> Times ([Const (a); diff ((Times (t), y))])
|h::t -> Sum ([Times ([diff ((h, y)); Times (t)]); Times ([h; diff ((Times (t), y))])])))

Time : 0.00869202613831
../engine/main.native -dd -submission ../benchmarks_incorrect/diff/12/sub5.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml
-----------------------------
Submission
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (x, y)  = 
 (match x with 
|Const c -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a != y) then Const (0)
 else if (b = 1) then Var (a)
 else if (b = 2) then Times ([Const (2); Var (a)])
 else Times ([Const (b); Power ((a, (b - 1)))])
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::t -> Sum ([diff ((h, y)); diff ((Sum (t), y))]))
|Times l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, y))
|Const a::t -> Times ([Const (a); diff ((Times (t), y))])
|h::t -> Sum ([Times ([diff ((h, y)); Times (t)]); Times ([h; diff ((Times (t), y))])])))

-----------------------------
Submission
-----------------------------
type aexp =
|Sum of aexp list
|Times of aexp list
|Power of (string * int)
|Var of string
|Const of int

let rec diff (x, y)  = (45046, 
 (match (44947, x with 
|Const c -> (44949, Const ((44948, 0)
|Var a -> (44957, if (44952, ((44950, a = (44951, y) then (44954, Const ((44953, 1)
 else (44956, Const ((44955, 0)
|Power (a, b) -> (44989, if (44960, ((44958, a != (44959, y) then (44962, Const ((44961, 0)
 else (44988, if (44965, ((44963, b = (44964, 1) then (44967, Var ((44966, a)
 else (44987, if (44970, ((44968, b = (44969, 2) then (44976, Times ((44975, [(44972, Const ((44971, 2); (44974, Var ((44973, a)])
 else (44986, Times ((44985, [(44978, Const ((44977, b); (44984, Power ((44983, ((44979, a, (44982, ((44980, b - (44981, 1)))])
|Sum l -> (45006, 
 (match (44990, l with 
|[] -> (44992, Const ((44991, 0)
|h::t -> (45005, Sum ((45004, [(44997, (44993, diff ((44996, ((44994, h, (44995, y)); (45003, (44998, diff ((45002, ((45000, Sum ((44999, t), (45001, y))]))
|Times l -> (45045, 
 (match (45007, l with 
|[] -> (45009, Const ((45008, 0)
|h::[] -> (45014, (45010, diff ((45013, ((45011, h, (45012, y))
|Const a::t -> (45024, Times ((45023, [(45016, Const ((45015, a); (45022, (45017, diff ((45021, ((45019, Times ((45018, t), (45020, y))])
|h::t -> (45044, Sum ((45043, [(45033, Times ((45032, [(45029, (45025, diff ((45028, ((45026, h, (45027, y)); (45031, Times ((45030, t)]); (45042, Times ((45041, [(45034, h; (45040, (45035, diff ((45039, ((45037, Times ((45036, t), (45038, y))])])))

-----------------------------
Most Similar Sol ../benchmarks_correct/diff/18/sub9.ml Score : 1
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff  : ((aexp * string) -> aexp) = 
fun (exp, x) -> 
 (match exp with 
|Const n -> Const (0)
|Var s -> if (s != x) then Const (0)
 else Const (1)
|Power (s, n) -> if (s != x) then Const (0)
 else Times ([Const (n); Power ((s, (n - 1)))])
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([diff ((hd, x)); diff ((Sum (tl), x))])))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{diff -> (18390 : 
Input : ((x : aexp), (y : string)) 
Output : aexp
Body : 
 (match x with 
|Const c -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a != y) then Const (0)
 else if (b = 1) then Var (a)
 else if (b = 2) then Times ([Const (2); Var (a)])
 else Times ([Const (b); Power ((a, (b - 1)))])
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::t -> Sum ([diff ((h, y)); diff ((Sum (t), y))]))
|Times l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, y))
|Const a::t -> Times ([Const (a); diff ((Times (t), y))])
|h::t -> Sum ([Times ([diff ((h, y)); Times (t)]); Times ([h; diff ((Times (t), y))])])))}
Edge : 
{(18390, 18390) -> }
Starting : 18390
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{diff -> (18349 : 
Input : ((exp : aexp), (x : string)) 
Output : aexp
Body : 
 (match exp with 
|Const n -> Const (0)
|Var s -> if (s != x) then Const (0)
 else Const (1)
|Power (s, n) -> if (s != x) then Const (0)
 else Times ([Const (n); Power ((s, (n - 1)))])
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([diff ((hd, x)); diff ((Sum (tl), x))])))}
Edge : 
{(18349, 18349) -> }
Starting : 18349
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{diff -> diff}
------Remainings in submission ------
{}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44952 : (? != ?))

Decls : 
,Exp : Modify (44953 : 0)

Decls : 
,Exp : Modify (44955 : 1)

Decls : 
,Exp : Modify (44958 : ?)

Decls : 
,Exp : Modify (44959 : ?)

Decls : 
,Exp : Modify (44988 : Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
,Exp : Modify (44990 : ?)

Decls : 
,Exp : Modify (44997 : ? ((?, ?)))

Decls : 
,Exp : Modify (45003 : ? ((Sum (?), ?)))

Decls : 
,Exp : Modify (45007 : ?)

Decls : 
,Exp : Modify (45032 : (? ((?, ?)) :: ?))

Decls : 
,Exp : Modify (45034 : ?)

Decls : 
,Exp : Modify (45040 : ? ((Times (?), ?)))

Decls : 
,Exp : Delete (h::[] -> diff ((h, y)) At label 45045

Decls : 
,Exp : Delete (Const a::t -> Times ([Const (a); diff ((Times (t), y))]) At label 45045

Decls : 
}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44958 : ?)

Decls : 
,Exp : Modify (44959 : ?)

Decls : 
,Exp : Modify (44988 : Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
}
-----------------------------
Patch
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (x, y)  = 
 (match x with 
|Const c -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a != y) then Const (0)
 else Times ([Const (b); Power ((a, (b - 1)))])
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::t -> Sum ([diff ((h, y)); diff ((Sum (t), y))]))
|Times l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, y))
|Const a::t -> Times ([Const (a); diff ((Times (t), y))])
|h::t -> Sum ([Times ([diff ((h, y)); Times (t)]); Times ([h; diff ((Times (t), y))])])))

Time : 0.00873994827271
../engine/main.native -dd -submission ../benchmarks_incorrect/diff/12/sub6.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml
-----------------------------
Submission
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (x, y)  = 
 (match x with 
|Const c -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a != y) then Const (0)
 else if (b = 1) then Var (a)
 else if (b = 2) then Times ([Const (2); Var (a)])
 else Times ([Const (b); Power ((a, (b - 1)))])
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::t -> Sum ([diff ((h, y)); diff ((Sum (t), y))]))
|Times l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, y))
|Const a::t -> Times ([Const (a); diff ((Times (t), y))])
|h::t -> Sum ([Times ([diff ((h, y)); Times (t)]); Times ([h; diff ((Times (t), y))])])))

-----------------------------
Submission
-----------------------------
type aexp =
|Sum of aexp list
|Times of aexp list
|Power of (string * int)
|Var of string
|Const of int

let rec diff (x, y)  = (45046, 
 (match (44947, x with 
|Const c -> (44949, Const ((44948, 0)
|Var a -> (44957, if (44952, ((44950, a = (44951, y) then (44954, Const ((44953, 1)
 else (44956, Const ((44955, 0)
|Power (a, b) -> (44989, if (44960, ((44958, a != (44959, y) then (44962, Const ((44961, 0)
 else (44988, if (44965, ((44963, b = (44964, 1) then (44967, Var ((44966, a)
 else (44987, if (44970, ((44968, b = (44969, 2) then (44976, Times ((44975, [(44972, Const ((44971, 2); (44974, Var ((44973, a)])
 else (44986, Times ((44985, [(44978, Const ((44977, b); (44984, Power ((44983, ((44979, a, (44982, ((44980, b - (44981, 1)))])
|Sum l -> (45006, 
 (match (44990, l with 
|[] -> (44992, Const ((44991, 0)
|h::t -> (45005, Sum ((45004, [(44997, (44993, diff ((44996, ((44994, h, (44995, y)); (45003, (44998, diff ((45002, ((45000, Sum ((44999, t), (45001, y))]))
|Times l -> (45045, 
 (match (45007, l with 
|[] -> (45009, Const ((45008, 0)
|h::[] -> (45014, (45010, diff ((45013, ((45011, h, (45012, y))
|Const a::t -> (45024, Times ((45023, [(45016, Const ((45015, a); (45022, (45017, diff ((45021, ((45019, Times ((45018, t), (45020, y))])
|h::t -> (45044, Sum ((45043, [(45033, Times ((45032, [(45029, (45025, diff ((45028, ((45026, h, (45027, y)); (45031, Times ((45030, t)]); (45042, Times ((45041, [(45034, h; (45040, (45035, diff ((45039, ((45037, Times ((45036, t), (45038, y))])])))

-----------------------------
Most Similar Sol ../benchmarks_correct/diff/18/sub9.ml Score : 1
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff  : ((aexp * string) -> aexp) = 
fun (exp, x) -> 
 (match exp with 
|Const n -> Const (0)
|Var s -> if (s != x) then Const (0)
 else Const (1)
|Power (s, n) -> if (s != x) then Const (0)
 else Times ([Const (n); Power ((s, (n - 1)))])
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([diff ((hd, x)); diff ((Sum (tl), x))])))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{diff -> (18390 : 
Input : ((x : aexp), (y : string)) 
Output : aexp
Body : 
 (match x with 
|Const c -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a != y) then Const (0)
 else if (b = 1) then Var (a)
 else if (b = 2) then Times ([Const (2); Var (a)])
 else Times ([Const (b); Power ((a, (b - 1)))])
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::t -> Sum ([diff ((h, y)); diff ((Sum (t), y))]))
|Times l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, y))
|Const a::t -> Times ([Const (a); diff ((Times (t), y))])
|h::t -> Sum ([Times ([diff ((h, y)); Times (t)]); Times ([h; diff ((Times (t), y))])])))}
Edge : 
{(18390, 18390) -> }
Starting : 18390
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{diff -> (18349 : 
Input : ((exp : aexp), (x : string)) 
Output : aexp
Body : 
 (match exp with 
|Const n -> Const (0)
|Var s -> if (s != x) then Const (0)
 else Const (1)
|Power (s, n) -> if (s != x) then Const (0)
 else Times ([Const (n); Power ((s, (n - 1)))])
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([diff ((hd, x)); diff ((Sum (tl), x))])))}
Edge : 
{(18349, 18349) -> }
Starting : 18349
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{diff -> diff}
------Remainings in submission ------
{}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44952 : (? != ?))

Decls : 
,Exp : Modify (44953 : 0)

Decls : 
,Exp : Modify (44955 : 1)

Decls : 
,Exp : Modify (44958 : ?)

Decls : 
,Exp : Modify (44959 : ?)

Decls : 
,Exp : Modify (44988 : Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
,Exp : Modify (44990 : ?)

Decls : 
,Exp : Modify (44997 : ? ((?, ?)))

Decls : 
,Exp : Modify (45003 : ? ((Sum (?), ?)))

Decls : 
,Exp : Modify (45007 : ?)

Decls : 
,Exp : Modify (45032 : (? ((?, ?)) :: ?))

Decls : 
,Exp : Modify (45034 : ?)

Decls : 
,Exp : Modify (45040 : ? ((Times (?), ?)))

Decls : 
,Exp : Delete (h::[] -> diff ((h, y)) At label 45045

Decls : 
,Exp : Delete (Const a::t -> Times ([Const (a); diff ((Times (t), y))]) At label 45045

Decls : 
}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44958 : ?)

Decls : 
,Exp : Modify (44959 : ?)

Decls : 
,Exp : Modify (44988 : Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
}
-----------------------------
Patch
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (x, y)  = 
 (match x with 
|Const c -> Const (0)
|Var a -> if (a = y) then Const (1)
 else Const (0)
|Power (a, b) -> if (a != y) then Const (0)
 else Times ([Const (b); Power ((a, (b - 1)))])
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::t -> Sum ([diff ((h, y)); diff ((Sum (t), y))]))
|Times l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, y))
|Const a::t -> Times ([Const (a); diff ((Times (t), y))])
|h::t -> Sum ([Times ([diff ((h, y)); Times (t)]); Times ([h; diff ((Times (t), y))])])))

Time : 0.00872015953064
../engine/main.native -dd -submission ../benchmarks_incorrect/diff/13/sub10.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml
-----------------------------
Submission
-----------------------------

exception InvalidArgument
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let diff  : ((aexp * string) -> aexp) = 
fun (e, str) -> 
let rec diff_sub (e, str)  = 
 (match e with 
|Const n -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (str, n) -> Times ([Const (n); Power ((str, (n - 1)))])
|Times lst -> 
 (match lst with 
|[] -> raise InvalidArgument
|a::[] -> diff_sub ((a, str))
|a::t -> Sum ([Times ([diff_sub ((a, str)); Times (t)]); Times ([a; diff_sub ((Times (t), str))])]))
|Sum lst -> 
 (match lst with 
|[] -> raise InvalidArgument
|a::[] -> diff_sub ((a, str))
|a::t -> Sum ([diff_sub ((a, str)); diff_sub ((Sum (t), str))])))
 in 
diff_sub ((e, str))

-----------------------------
Submission
-----------------------------

exception InvalidArgument
type aexp =
|Sum of aexp list
|Times of aexp list
|Power of (string * int)
|Var of string
|Const of int

let diff  : ((aexp * string) -> aexp) = (45026, 
fun (e, str) -> (45025, 
let rec diff_sub (e, str)  = (45019, 
 (match (44947, e with 
|Const n -> (44949, Const ((44948, 0)
|Var s -> (44957, if (44952, ((44950, s = (44951, str) then (44954, Const ((44953, 1)
 else (44956, Const ((44955, 0)
|Power (str, n) -> (44967, Times ((44966, [(44959, Const ((44958, n); (44965, Power ((44964, ((44960, str, (44963, ((44961, n - (44962, 1)))])
|Times lst -> (44996, 
 (match (44968, lst with 
|[] -> (44970, raise (44969, InvalidArgument
|a::[] -> (44975, (44971, diff_sub ((44974, ((44972, a, (44973, str))
|a::t -> (44995, Sum ((44994, [(44984, Times ((44983, [(44980, (44976, diff_sub ((44979, ((44977, a, (44978, str)); (44982, Times ((44981, t)]); (44993, Times ((44992, [(44985, a; (44991, (44986, diff_sub ((44990, ((44988, Times ((44987, t), (44989, str))])]))
|Sum lst -> (45018, 
 (match (44997, lst with 
|[] -> (44999, raise (44998, InvalidArgument
|a::[] -> (45004, (45000, diff_sub ((45003, ((45001, a, (45002, str))
|a::t -> (45017, Sum ((45016, [(45009, (45005, diff_sub ((45008, ((45006, a, (45007, str)); (45015, (45010, diff_sub ((45014, ((45012, Sum ((45011, t), (45013, str))])))
 in 
(45024, (45020, diff_sub ((45023, ((45021, e, (45022, str))

-----------------------------
Most Similar Sol ../benchmarks_correct/diff/17/sub46.ml Score : 2
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let make_sum e  = Sum (([e] @ [Const (0)]))

let rec f (a, x)  = 
 (match a with 
|Const n -> Const (0)
|Var y -> if (x = y) then Const (1)
 else Const (0)
|Power (y, n) -> if (x = y) then Times ([Const (n); Power ((y, (n - 1)))])
 else Const (0)
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((f ((hd, x)) :: tl)); Times ((hd :: [f ((Times (tl), x))]))]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([f ((hd, x)); f ((Sum (tl), x))])))

let diff  : ((aexp * string) -> aexp) = 
fun (e, x) -> f ((e, x))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{diff -> (18830 : 
Input : ((e : aexp), (str : string)) 
Output : aexp
Body : diff_sub ((e, str)),

diff_sub -> (18831 : 
Input : ((e : aexp), (str : string)) 
Output : aexp
Body : 
 (match e with 
|Const n -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (str, n) -> Times ([Const (n); Power ((str, (n - 1)))])
|Times lst -> 
 (match lst with 
|[] -> raise InvalidArgument
|a::[] -> diff_sub ((a, str))
|a::t -> Sum ([Times ([diff_sub ((a, str)); Times (t)]); Times ([a; diff_sub ((Times (t), str))])]))
|Sum lst -> 
 (match lst with 
|[] -> raise InvalidArgument
|a::[] -> diff_sub ((a, str))
|a::t -> Sum ([diff_sub ((a, str)); diff_sub ((Sum (t), str))])))}
Edge : 
{(18830, 18831) -> ,
(18831, 18831) -> }
Starting : 18830
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{diff -> (18787 : 
Input : ((e : aexp), (x : string)) 
Output : aexp
Body : f ((e, x)),

f -> (18786 : 
Input : ((a : aexp), (x : string)) 
Output : aexp
Body : 
 (match a with 
|Const n -> Const (0)
|Var y -> if (x = y) then Const (1)
 else Const (0)
|Power (y, n) -> if (x = y) then Times ([Const (n); Power ((y, (n - 1)))])
 else Const (0)
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((f ((hd, x)) :: tl)); Times ((hd :: [f ((Times (tl), x))]))]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([f ((hd, x)); f ((Sum (tl), x))])))}
Edge : 
{(18786, 18786) -> ,
(18787, 18786) -> }
Starting : 18787
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{diff -> diff,
diff_sub -> f}
------Remainings in submission ------
{}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44950 : ?)

Decls : 
,Exp : Modify (44951 : ?)

Decls : 
,Exp : Modify (44967 : if (? = ?) then Times ([Const (?); Power ((?, (? - 1)))])
 else Const (0))

Decls : 
,Exp : Modify (44968 : ?)

Decls : 
,Exp : Modify (44970 : Const (0))

Decls : 
,Exp : Modify (44983 : (? ((?, ?)) :: ?))

Decls : 
,Exp : Modify (44992 : (? :: [? ((Times (?), ?))]))

Decls : 
,Exp : Modify (44997 : ?)

Decls : 
,Exp : Modify (44999 : Const (0))

Decls : 
,Exp : Modify (45009 : ? ((?, ?)))

Decls : 
,Exp : Modify (45015 : ? ((Sum (?), ?)))

Decls : 
,Exp : Modify (45024 : ? ((?, ?)))

Decls : 
,Exp : Delete (a::[] -> diff_sub ((a, str)) At label 44996

Decls : 
,Exp : Delete (a::[] -> diff_sub ((a, str)) At label 45018

Decls : 
}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44950 : ?)

Decls : 
,Exp : Modify (44951 : ?)

Decls : 
,Exp : Modify (44967 : if (? = ?) then Times ([Const (?); Power ((?, (? - 1)))])
 else Const (0))

Decls : 
,Exp : Modify (44968 : ?)

Decls : 
,Exp : Modify (44983 : (? ((?, ?)) :: ?))

Decls : 
,Exp : Modify (44992 : (? :: [? ((Times (?), ?))]))

Decls : 
,Exp : Modify (44997 : ?)

Decls : 
,Exp : Modify (45009 : ? ((?, ?)))

Decls : 
,Exp : Modify (45015 : ? ((Sum (?), ?)))

Decls : 
,Exp : Modify (45024 : ? ((?, ?)))

Decls : 
,Exp : Delete (a::[] -> diff_sub ((a, str)) At label 44996

Decls : 
,Exp : Delete (a::[] -> diff_sub ((a, str)) At label 45018

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/diff/13/sub16.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml
-----------------------------
Submission
-----------------------------

exception InvalidArgument

exception L2AL_null
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec list2aexplist (aexplist, st)  = 
 (match aexplist with 
|h::[] -> [diff ((h, st))]
|h::t -> ([diff ((h, st))] @ list2aexplist ((t, st)))
|[] -> raise L2AL_null)
 in 

 (match aexp with 
|Const c -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, n) -> if (n = 0) then Const (1)
 else if ((n = 1) && (s = str)) then Const (2)
 else if ((n = 1) && (s != str)) then Const (3)
 else if (s = str) then Times ([Const (n); Power ((s, (n - 1)))])
 else Const (0)
|Sum aexplist -> 
 (match aexplist with 
|[] -> raise InvalidArgument
|h::[] -> diff ((h, str))
|h::t -> Sum (([diff ((h, str))] @ list2aexplist ((t, str)))))
|Times aexplist -> 
 (match aexplist with 
|[] -> raise InvalidArgument
|h::[] -> diff ((h, str))
|h::t -> Sum ([Times (([diff ((h, str))] @ t)); Times (([h] @ [diff ((Times (t), str))]))])))

-----------------------------
Submission
-----------------------------

exception InvalidArgument

exception L2AL_null
type aexp =
|Sum of aexp list
|Times of aexp list
|Power of (string * int)
|Var of string
|Const of int

let rec diff (aexp, str)  = (45076, 
let rec list2aexplist (aexplist, st)  = (44968, 
 (match (44947, aexplist with 
|h::[] -> (44953, [(44952, (44948, diff ((44951, ((44949, h, (44950, st))]
|h::t -> (44965, ((44959, [(44958, (44954, diff ((44957, ((44955, h, (44956, st))] @ (44964, (44960, list2aexplist ((44963, ((44961, t, (44962, st)))
|[] -> (44967, raise (44966, L2AL_null)
 in 
(45075, 
 (match (44969, aexp with 
|Const c -> (44971, Const ((44970, 0)
|Var s -> (44979, if (44974, ((44972, s = (44973, str) then (44976, Const ((44975, 1)
 else (44978, Const ((44977, 0)
|Power (s, n) -> (45021, if (44982, ((44980, n = (44981, 0) then (44984, Const ((44983, 1)
 else (45020, if (44991, ((44987, ((44985, n = (44986, 1) && (44990, ((44988, s = (44989, str)) then (44993, Const ((44992, 2)
 else (45019, if (45000, ((44996, ((44994, n = (44995, 1) && (44999, ((44997, s != (44998, str)) then (45002, Const ((45001, 3)
 else (45018, if (45005, ((45003, s = (45004, str) then (45015, Times ((45014, [(45007, Const ((45006, n); (45013, Power ((45012, ((45008, s, (45011, ((45009, n - (45010, 1)))])
 else (45017, Const ((45016, 0)
|Sum aexplist -> (45043, 
 (match (45022, aexplist with 
|[] -> (45024, raise (45023, InvalidArgument
|h::[] -> (45029, (45025, diff ((45028, ((45026, h, (45027, str))
|h::t -> (45042, Sum ((45041, ((45035, [(45034, (45030, diff ((45033, ((45031, h, (45032, str))] @ (45040, (45036, list2aexplist ((45039, ((45037, t, (45038, str)))))
|Times aexplist -> (45074, 
 (match (45044, aexplist with 
|[] -> (45046, raise (45045, InvalidArgument
|h::[] -> (45051, (45047, diff ((45050, ((45048, h, (45049, str))
|h::t -> (45073, Sum ((45072, [(45060, Times ((45059, ((45057, [(45056, (45052, diff ((45055, ((45053, h, (45054, str))] @ (45058, t)); (45071, Times ((45070, ((45062, [(45061, h] @ (45069, [(45068, (45063, diff ((45067, ((45065, Times ((45064, t), (45066, str))]))])))

-----------------------------
Most Similar Sol ../benchmarks_correct/diff/16/sub6.ml Score : 2
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diffRec  : ((aexp list * string) -> aexp list) = 
fun (aexpList, var) -> 
 (match aexpList with 
|[] -> []
|hd::tl -> (diff ((hd, var)) :: diffRec ((tl, var))))
and diff  : ((aexp * string) -> aexp) = 
fun (exp, var) -> 
 (match exp with 
|Sum aexpList -> Sum (diffRec ((aexpList, var)))
|Power (string1, int1) -> if (string1 = var) then if (int1 = 0) then Const (0)
 else if (int1 = 1) then Const (1)
 else Times ([Const (int1); Power ((var, (int1 - 1)))])
 else Const (0)
|Times aexpList -> 
 (match aexpList with 
|[] -> Sum ([])
|hd::tl -> if (tl = []) then diff ((hd, var))
 else Sum ([Times ((diff ((hd, var)) :: tl)); Times ([hd; diff ((Times (tl), var))])]))
|Var string1 -> diff ((Power ((string1, 1)), var))
|Const int1 -> Const (0))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{diff -> (18828 : 
Input : ((aexp : aexp), (str : string)) 
Output : aexp
Body : 
 (match aexp with 
|Const c -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, n) -> if (n = 0) then Const (1)
 else if ((n = 1) && (s = str)) then Const (2)
 else if ((n = 1) && (s != str)) then Const (3)
 else if (s = str) then Times ([Const (n); Power ((s, (n - 1)))])
 else Const (0)
|Sum aexplist -> 
 (match aexplist with 
|[] -> raise InvalidArgument
|h::[] -> diff ((h, str))
|h::t -> Sum (([diff ((h, str))] @ list2aexplist ((t, str)))))
|Times aexplist -> 
 (match aexplist with 
|[] -> raise InvalidArgument
|h::[] -> diff ((h, str))
|h::t -> Sum ([Times (([diff ((h, str))] @ t)); Times (([h] @ [diff ((Times (t), str))]))]))),

list2aexplist -> (18829 : 
Input : ((aexplist : aexp list), (st : string)) 
Output : aexp list
Body : 
 (match aexplist with 
|h::[] -> [diff ((h, st))]
|h::t -> ([diff ((h, st))] @ list2aexplist ((t, st)))
|[] -> raise L2AL_null)}
Edge : 
{(18828, 18828) -> ,
(18828, 18829) -> ,
(18829, 18828) -> ,
(18829, 18829) -> }
Starting : 18828
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{diff -> (18786 : 
Input : ((exp : aexp), (var : string)) 
Output : aexp
Body : 
 (match exp with 
|Sum aexpList -> Sum (diffRec ((aexpList, var)))
|Power (string1, int1) -> if (string1 = var) then if (int1 = 0) then Const (0)
 else if (int1 = 1) then Const (1)
 else Times ([Const (int1); Power ((var, (int1 - 1)))])
 else Const (0)
|Times aexpList -> 
 (match aexpList with 
|[] -> Sum ([])
|hd::tl -> if (tl = []) then diff ((hd, var))
 else Sum ([Times ((diff ((hd, var)) :: tl)); Times ([hd; diff ((Times (tl), var))])]))
|Var string1 -> diff ((Power ((string1, 1)), var))
|Const int1 -> Const (0)),

diffRec -> (18785 : 
Input : ((aexpList : aexp list), (var : string)) 
Output : aexp list
Body : 
 (match aexpList with 
|[] -> []
|hd::tl -> (diff ((hd, var)) :: diffRec ((tl, var))))}
Edge : 
{(18785, 18785) -> ,
(18785, 18786) -> ,
(18786, 18785) -> ,
(18786, 18786) -> }
Starting : 18786
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{diff -> diff,
list2aexplist -> diffRec}
------Remainings in submission ------
{}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44965 : (? ((?, ?)) :: ? ((?, ?))))

Decls : 
,Exp : Modify (44967 : [])

Decls : 
,Exp : Modify (44969 : ?)

Decls : 
,Exp : Modify (44979 : ? ((Power ((?, 1)), ?)))

Decls : 
,Exp : Modify (44980 : ?)

Decls : 
,Exp : Modify (44981 : ?)

Decls : 
,Exp : Modify (44984 : if (? = 0) then Const (0)
 else if (? = 1) then Const (1)
 else Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
,Exp : Modify (45020 : Const (0))

Decls : 
,Exp : Modify (45043 : Sum (? ((?, ?))))

Decls : 
,Exp : Modify (45044 : ?)

Decls : 
,Exp : Modify (45046 : Sum ([]))

Decls : 
,Exp : Modify (45073 : if (? = []) then ? ((?, ?))
 else Sum ([Times ((? ((?, ?)) :: ?)); Times ([?; ? ((Times (?), ?))])]))

Decls : 
,Exp : Delete (h::[] -> [diff ((h, st))] At label 44968

Decls : 
,Exp : Delete (h::[] -> diff ((h, str)) At label 45074

Decls : 
}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44969 : ?)

Decls : 
,Exp : Modify (44980 : ?)

Decls : 
,Exp : Modify (44981 : ?)

Decls : 
,Exp : Modify (44984 : if (? = 0) then Const (0)
 else if (? = 1) then Const (1)
 else Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
,Exp : Modify (45020 : Const (0))

Decls : 
}
-----------------------------
Patch
-----------------------------

exception InvalidArgument

exception L2AL_null
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec list2aexplist (aexplist, st)  = 
 (match aexplist with 
|h::[] -> [diff ((h, st))]
|h::t -> ([diff ((h, st))] @ list2aexplist ((t, st)))
|[] -> raise L2AL_null)
 in 

 (match aexp with 
|Const c -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, n) -> if (s = str) then if (n = 0) then Const (0)
 else if (n = 1) then Const (1)
 else Times ([Const (n); Power ((s, (n - 1)))])
 else Const (0)
|Sum aexplist -> 
 (match aexplist with 
|[] -> raise InvalidArgument
|h::[] -> diff ((h, str))
|h::t -> Sum (([diff ((h, str))] @ list2aexplist ((t, str)))))
|Times aexplist -> 
 (match aexplist with 
|[] -> raise InvalidArgument
|h::[] -> diff ((h, str))
|h::t -> Sum ([Times (([diff ((h, str))] @ t)); Times (([h] @ [diff ((Times (t), str))]))])))

Time : 0.587867021561
../engine/main.native -dd -submission ../benchmarks_incorrect/diff/13/sub17.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml
-----------------------------
Submission
-----------------------------

exception InvalidArgument

exception L2AL_null
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec list2aexplist (aexplist, st)  = 
 (match aexplist with 
|h::[] -> [diff ((h, st))]
|h::t -> ([diff ((h, st))] @ list2aexplist ((t, st)))
|[] -> raise L2AL_null)
 in 

 (match aexp with 
|Const c -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, n) -> if (n = 0) then Const (1)
 else if ((n = 1) && (s = str)) then Const (1)
 else if ((n = 1) && (s != str)) then Const (0)
 else if (s = str) then Times ([Const (n); Power ((s, (n - 1)))])
 else Const (0)
|Sum aexplist -> 
 (match aexplist with 
|[] -> raise InvalidArgument
|h::[] -> diff ((h, str))
|h::t -> Sum (([diff ((h, str))] @ list2aexplist ((t, str)))))
|Times aexplist -> 
 (match aexplist with 
|[] -> raise InvalidArgument
|h::[] -> diff ((h, str))
|h::t -> Sum ([Times (([diff ((h, str))] @ t)); Times (([h] @ [diff ((Times (t), str))]))])))

-----------------------------
Submission
-----------------------------

exception InvalidArgument

exception L2AL_null
type aexp =
|Sum of aexp list
|Times of aexp list
|Power of (string * int)
|Var of string
|Const of int

let rec diff (aexp, str)  = (45076, 
let rec list2aexplist (aexplist, st)  = (44968, 
 (match (44947, aexplist with 
|h::[] -> (44953, [(44952, (44948, diff ((44951, ((44949, h, (44950, st))]
|h::t -> (44965, ((44959, [(44958, (44954, diff ((44957, ((44955, h, (44956, st))] @ (44964, (44960, list2aexplist ((44963, ((44961, t, (44962, st)))
|[] -> (44967, raise (44966, L2AL_null)
 in 
(45075, 
 (match (44969, aexp with 
|Const c -> (44971, Const ((44970, 0)
|Var s -> (44979, if (44974, ((44972, s = (44973, str) then (44976, Const ((44975, 1)
 else (44978, Const ((44977, 0)
|Power (s, n) -> (45021, if (44982, ((44980, n = (44981, 0) then (44984, Const ((44983, 1)
 else (45020, if (44991, ((44987, ((44985, n = (44986, 1) && (44990, ((44988, s = (44989, str)) then (44993, Const ((44992, 1)
 else (45019, if (45000, ((44996, ((44994, n = (44995, 1) && (44999, ((44997, s != (44998, str)) then (45002, Const ((45001, 0)
 else (45018, if (45005, ((45003, s = (45004, str) then (45015, Times ((45014, [(45007, Const ((45006, n); (45013, Power ((45012, ((45008, s, (45011, ((45009, n - (45010, 1)))])
 else (45017, Const ((45016, 0)
|Sum aexplist -> (45043, 
 (match (45022, aexplist with 
|[] -> (45024, raise (45023, InvalidArgument
|h::[] -> (45029, (45025, diff ((45028, ((45026, h, (45027, str))
|h::t -> (45042, Sum ((45041, ((45035, [(45034, (45030, diff ((45033, ((45031, h, (45032, str))] @ (45040, (45036, list2aexplist ((45039, ((45037, t, (45038, str)))))
|Times aexplist -> (45074, 
 (match (45044, aexplist with 
|[] -> (45046, raise (45045, InvalidArgument
|h::[] -> (45051, (45047, diff ((45050, ((45048, h, (45049, str))
|h::t -> (45073, Sum ((45072, [(45060, Times ((45059, ((45057, [(45056, (45052, diff ((45055, ((45053, h, (45054, str))] @ (45058, t)); (45071, Times ((45070, ((45062, [(45061, h] @ (45069, [(45068, (45063, diff ((45067, ((45065, Times ((45064, t), (45066, str))]))])))

-----------------------------
Most Similar Sol ../benchmarks_correct/diff/16/sub6.ml Score : 2
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diffRec  : ((aexp list * string) -> aexp list) = 
fun (aexpList, var) -> 
 (match aexpList with 
|[] -> []
|hd::tl -> (diff ((hd, var)) :: diffRec ((tl, var))))
and diff  : ((aexp * string) -> aexp) = 
fun (exp, var) -> 
 (match exp with 
|Sum aexpList -> Sum (diffRec ((aexpList, var)))
|Power (string1, int1) -> if (string1 = var) then if (int1 = 0) then Const (0)
 else if (int1 = 1) then Const (1)
 else Times ([Const (int1); Power ((var, (int1 - 1)))])
 else Const (0)
|Times aexpList -> 
 (match aexpList with 
|[] -> Sum ([])
|hd::tl -> if (tl = []) then diff ((hd, var))
 else Sum ([Times ((diff ((hd, var)) :: tl)); Times ([hd; diff ((Times (tl), var))])]))
|Var string1 -> diff ((Power ((string1, 1)), var))
|Const int1 -> Const (0))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{diff -> (18828 : 
Input : ((aexp : aexp), (str : string)) 
Output : aexp
Body : 
 (match aexp with 
|Const c -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, n) -> if (n = 0) then Const (1)
 else if ((n = 1) && (s = str)) then Const (1)
 else if ((n = 1) && (s != str)) then Const (0)
 else if (s = str) then Times ([Const (n); Power ((s, (n - 1)))])
 else Const (0)
|Sum aexplist -> 
 (match aexplist with 
|[] -> raise InvalidArgument
|h::[] -> diff ((h, str))
|h::t -> Sum (([diff ((h, str))] @ list2aexplist ((t, str)))))
|Times aexplist -> 
 (match aexplist with 
|[] -> raise InvalidArgument
|h::[] -> diff ((h, str))
|h::t -> Sum ([Times (([diff ((h, str))] @ t)); Times (([h] @ [diff ((Times (t), str))]))]))),

list2aexplist -> (18829 : 
Input : ((aexplist : aexp list), (st : string)) 
Output : aexp list
Body : 
 (match aexplist with 
|h::[] -> [diff ((h, st))]
|h::t -> ([diff ((h, st))] @ list2aexplist ((t, st)))
|[] -> raise L2AL_null)}
Edge : 
{(18828, 18828) -> ,
(18828, 18829) -> ,
(18829, 18828) -> ,
(18829, 18829) -> }
Starting : 18828
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{diff -> (18786 : 
Input : ((exp : aexp), (var : string)) 
Output : aexp
Body : 
 (match exp with 
|Sum aexpList -> Sum (diffRec ((aexpList, var)))
|Power (string1, int1) -> if (string1 = var) then if (int1 = 0) then Const (0)
 else if (int1 = 1) then Const (1)
 else Times ([Const (int1); Power ((var, (int1 - 1)))])
 else Const (0)
|Times aexpList -> 
 (match aexpList with 
|[] -> Sum ([])
|hd::tl -> if (tl = []) then diff ((hd, var))
 else Sum ([Times ((diff ((hd, var)) :: tl)); Times ([hd; diff ((Times (tl), var))])]))
|Var string1 -> diff ((Power ((string1, 1)), var))
|Const int1 -> Const (0)),

diffRec -> (18785 : 
Input : ((aexpList : aexp list), (var : string)) 
Output : aexp list
Body : 
 (match aexpList with 
|[] -> []
|hd::tl -> (diff ((hd, var)) :: diffRec ((tl, var))))}
Edge : 
{(18785, 18785) -> ,
(18785, 18786) -> ,
(18786, 18785) -> ,
(18786, 18786) -> }
Starting : 18786
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{diff -> diff,
list2aexplist -> diffRec}
------Remainings in submission ------
{}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44965 : (? ((?, ?)) :: ? ((?, ?))))

Decls : 
,Exp : Modify (44967 : [])

Decls : 
,Exp : Modify (44969 : ?)

Decls : 
,Exp : Modify (44979 : ? ((Power ((?, 1)), ?)))

Decls : 
,Exp : Modify (44980 : ?)

Decls : 
,Exp : Modify (44981 : ?)

Decls : 
,Exp : Modify (44984 : if (? = 0) then Const (0)
 else if (? = 1) then Const (1)
 else Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
,Exp : Modify (45020 : Const (0))

Decls : 
,Exp : Modify (45043 : Sum (? ((?, ?))))

Decls : 
,Exp : Modify (45044 : ?)

Decls : 
,Exp : Modify (45046 : Sum ([]))

Decls : 
,Exp : Modify (45073 : if (? = []) then ? ((?, ?))
 else Sum ([Times ((? ((?, ?)) :: ?)); Times ([?; ? ((Times (?), ?))])]))

Decls : 
,Exp : Delete (h::[] -> [diff ((h, st))] At label 44968

Decls : 
,Exp : Delete (h::[] -> diff ((h, str)) At label 45074

Decls : 
}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44969 : ?)

Decls : 
,Exp : Modify (44980 : ?)

Decls : 
,Exp : Modify (44981 : ?)

Decls : 
,Exp : Modify (44984 : if (? = 0) then Const (0)
 else if (? = 1) then Const (1)
 else Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
}
-----------------------------
Patch
-----------------------------

exception InvalidArgument

exception L2AL_null
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec list2aexplist (aexplist, st)  = 
 (match aexplist with 
|h::[] -> [diff ((h, st))]
|h::t -> ([diff ((h, st))] @ list2aexplist ((t, st)))
|[] -> raise L2AL_null)
 in 

 (match aexp with 
|Const c -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, n) -> if (n = 0) then if (n = 0) then Const (0)
 else if (n = 1) then Const (1)
 else Times ([Const (n); Power ((s, (n - 1)))])
 else if ((n = 1) && (s = str)) then Const (1)
 else if ((n = 1) && (s != str)) then Const (0)
 else if (s = str) then Times ([Const (n); Power ((s, (n - 1)))])
 else Const (0)
|Sum aexplist -> 
 (match aexplist with 
|[] -> raise InvalidArgument
|h::[] -> diff ((h, str))
|h::t -> Sum (([diff ((h, str))] @ list2aexplist ((t, str)))))
|Times aexplist -> 
 (match aexplist with 
|[] -> raise InvalidArgument
|h::[] -> diff ((h, str))
|h::t -> Sum ([Times (([diff ((h, str))] @ t)); Times (([h] @ [diff ((Times (t), str))]))])))

Time : 0.0100979804993
Error occurs : ../engine/main.native -dd -submission ../benchmarks_incorrect/diff/13/sub20.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml../engine/main.native -dd -submission ../benchmarks_incorrect/diff/13/sub28.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml
-----------------------------
Submission
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

exception InvalidArgument

let rec diff (a, stri)  = 
 (match a with 
|Const na -> Const (0)
|Var strin -> if (stri = strin) then Const (1)
 else Const (0)
|Power (strin, na) -> if not ((strin = stri)) then Const (0)
 else if (na = 0) then Const (0)
 else if (na = 1) then Const (1)
 else if (na = 2) then Times ([Const (2); Var (strin)])
 else Times ([Const (na); Power ((strin, (na - 1)))])
|Times Const na::tl -> if (na = 0) then Const (0)
 else if (na = 1) then diff ((Times (tl), stri))
 else Times ([Const (na); diff ((Times (tl), stri))])
|Times hd::tl -> if (tl = []) then diff ((hd, stri))
 else Sum ([Times ((diff ((hd, stri)) :: tl)); Times ([hd; diff ((Times (tl), stri))])])
|Times [] -> raise InvalidArgument
|Sum Const na::tl -> diff ((Sum (tl), stri))
|Sum hd::tl -> if (tl = []) then diff ((hd, stri))
 else Sum ([diff ((hd, stri)); diff ((Sum (tl), stri))])
|Sum [] -> raise InvalidArgument)

-----------------------------
Submission
-----------------------------
type aexp =
|Sum of aexp list
|Times of aexp list
|Power of (string * int)
|Var of string
|Const of int

exception InvalidArgument

let rec diff (a, stri)  = (45083, 
 (match (44947, a with 
|Const na -> (44949, Const ((44948, 0)
|Var strin -> (44957, if (44952, ((44950, stri = (44951, strin) then (44954, Const ((44953, 1)
 else (44956, Const ((44955, 0)
|Power (strin, na) -> (44996, if (44961, not ((44960, ((44958, strin = (44959, stri)) then (44963, Const ((44962, 0)
 else (44995, if (44966, ((44964, na = (44965, 0) then (44968, Const ((44967, 0)
 else (44994, if (44971, ((44969, na = (44970, 1) then (44973, Const ((44972, 1)
 else (44993, if (44976, ((44974, na = (44975, 2) then (44982, Times ((44981, [(44978, Const ((44977, 2); (44980, Var ((44979, strin)])
 else (44992, Times ((44991, [(44984, Const ((44983, na); (44990, Power ((44989, ((44985, strin, (44988, ((44986, na - (44987, 1)))])
|Times Const na::tl -> (45022, if (44999, ((44997, na = (44998, 0) then (45001, Const ((45000, 0)
 else (45021, if (45004, ((45002, na = (45003, 1) then (45010, (45005, diff ((45009, ((45007, Times ((45006, tl), (45008, stri))
 else (45020, Times ((45019, [(45012, Const ((45011, na); (45018, (45013, diff ((45017, ((45015, Times ((45014, tl), (45016, stri))])
|Times hd::tl -> (45050, if (45025, ((45023, tl = (45024, []) then (45030, (45026, diff ((45029, ((45027, hd, (45028, stri))
 else (45049, Sum ((45048, [(45038, Times ((45037, ((45035, (45031, diff ((45034, ((45032, hd, (45033, stri)) :: (45036, tl)); (45047, Times ((45046, [(45039, hd; (45045, (45040, diff ((45044, ((45042, Times ((45041, tl), (45043, stri))])])
|Times [] -> (45052, raise (45051, InvalidArgument
|Sum Const na::tl -> (45058, (45053, diff ((45057, ((45055, Sum ((45054, tl), (45056, stri))
|Sum hd::tl -> (45080, if (45061, ((45059, tl = (45060, []) then (45066, (45062, diff ((45065, ((45063, hd, (45064, stri))
 else (45079, Sum ((45078, [(45071, (45067, diff ((45070, ((45068, hd, (45069, stri)); (45077, (45072, diff ((45076, ((45074, Sum ((45073, tl), (45075, stri))])
|Sum [] -> (45082, raise (45081, InvalidArgument)

-----------------------------
Most Similar Sol ../benchmarks_correct/diff/18/sub9.ml Score : 1
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff  : ((aexp * string) -> aexp) = 
fun (exp, x) -> 
 (match exp with 
|Const n -> Const (0)
|Var s -> if (s != x) then Const (0)
 else Const (1)
|Power (s, n) -> if (s != x) then Const (0)
 else Times ([Const (n); Power ((s, (n - 1)))])
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([diff ((hd, x)); diff ((Sum (tl), x))])))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{diff -> (18390 : 
Input : ((a : aexp), (stri : string)) 
Output : aexp
Body : 
 (match a with 
|Const na -> Const (0)
|Var strin -> if (stri = strin) then Const (1)
 else Const (0)
|Power (strin, na) -> if not ((strin = stri)) then Const (0)
 else if (na = 0) then Const (0)
 else if (na = 1) then Const (1)
 else if (na = 2) then Times ([Const (2); Var (strin)])
 else Times ([Const (na); Power ((strin, (na - 1)))])
|Times Const na::tl -> if (na = 0) then Const (0)
 else if (na = 1) then diff ((Times (tl), stri))
 else Times ([Const (na); diff ((Times (tl), stri))])
|Times hd::tl -> if (tl = []) then diff ((hd, stri))
 else Sum ([Times ((diff ((hd, stri)) :: tl)); Times ([hd; diff ((Times (tl), stri))])])
|Times [] -> raise InvalidArgument
|Sum Const na::tl -> diff ((Sum (tl), stri))
|Sum hd::tl -> if (tl = []) then diff ((hd, stri))
 else Sum ([diff ((hd, stri)); diff ((Sum (tl), stri))])
|Sum [] -> raise InvalidArgument)}
Edge : 
{(18390, 18390) -> }
Starting : 18390
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{diff -> (18349 : 
Input : ((exp : aexp), (x : string)) 
Output : aexp
Body : 
 (match exp with 
|Const n -> Const (0)
|Var s -> if (s != x) then Const (0)
 else Const (1)
|Power (s, n) -> if (s != x) then Const (0)
 else Times ([Const (n); Power ((s, (n - 1)))])
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([diff ((hd, x)); diff ((Sum (tl), x))])))}
Edge : 
{(18349, 18349) -> }
Starting : 18349
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{diff -> diff}
------Remainings in submission ------
{}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Modify (44952 : (? != ?))

Decls : 
,Exp : Modify (44953 : 0)

Decls : 
,Exp : Modify (44955 : 1)

Decls : 
,Exp : Modify (44961 : (? != ?))

Decls : 
,Exp : Modify (44995 : Times ([Const (?); Power ((?, (? - 1)))]))

Decls : 
,Exp : Insert (Sum l -> 
 (match ? with 
|[] -> Const (0)
|hd::tl -> Sum ([? ((?, ?)); ? ((Sum (?), ?))])) At label 45083

Decls : 
,Exp : Insert (Times l -> 
 (match ? with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((? ((?, ?)) :: ?)); Times ([?; ? ((Times (?), ?))])])) At label 45083

Decls : 
,Exp : Delete (Sum [] -> raise InvalidArgument At label 45083

Decls : 
,Exp : Delete (Sum hd::tl -> if (tl = []) then diff ((hd, stri))
 else Sum ([diff ((hd, stri)); diff ((Sum (tl), stri))]) At label 45083

Decls : 
,Exp : Delete (Sum Const na::tl -> diff ((Sum (tl), stri)) At label 45083

Decls : 
,Exp : Delete (Times [] -> raise InvalidArgument At label 45083

Decls : 
,Exp : Delete (Times hd::tl -> if (tl = []) then diff ((hd, stri))
 else Sum ([Times ((diff ((hd, stri)) :: tl)); Times ([hd; diff ((Times (tl), stri))])]) At label 45083

Decls : 
,Exp : Delete (Times Const na::tl -> if (na = 0) then Const (0)
 else if (na = 1) then diff ((Times (tl), stri))
 else Times ([Const (na); diff ((Times (tl), stri))]) At label 45083

Decls : 
}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44947 : ?)

Decls : 
,Exp : Insert (Sum l -> 
 (match ? with 
|[] -> Const (0)
|hd::tl -> Sum ([? ((?, ?)); ? ((Sum (?), ?))])) At label 45083

Decls : 
,Exp : Insert (Times l -> 
 (match ? with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((? ((?, ?)) :: ?)); Times ([?; ? ((Times (?), ?))])])) At label 45083

Decls : 
,Exp : Delete (Sum [] -> raise InvalidArgument At label 45083

Decls : 
,Exp : Delete (Sum hd::tl -> if (tl = []) then diff ((hd, stri))
 else Sum ([diff ((hd, stri)); diff ((Sum (tl), stri))]) At label 45083

Decls : 
,Exp : Delete (Sum Const na::tl -> diff ((Sum (tl), stri)) At label 45083

Decls : 
,Exp : Delete (Times [] -> raise InvalidArgument At label 45083

Decls : 
,Exp : Delete (Times hd::tl -> if (tl = []) then diff ((hd, stri))
 else Sum ([Times ((diff ((hd, stri)) :: tl)); Times ([hd; diff ((Times (tl), stri))])]) At label 45083

Decls : 
,Exp : Delete (Times Const na::tl -> if (na = 0) then Const (0)
 else if (na = 1) then diff ((Times (tl), stri))
 else Times ([Const (na); diff ((Times (tl), stri))]) At label 45083

Decls : 
}
-----------------------------
Patch
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

exception InvalidArgument

let rec diff (a, stri)  = 
 (match a with 
|Const na -> Const (0)
|Var strin -> if (stri = strin) then Const (1)
 else Const (0)
|Power (strin, na) -> if not ((strin = stri)) then Const (0)
 else if (na = 0) then Const (0)
 else if (na = 1) then Const (1)
 else if (na = 2) then Times ([Const (2); Var (strin)])
 else Times ([Const (na); Power ((strin, (na - 1)))])
|Times hd::tl -> if (tl = []) then diff ((hd, stri))
 else Sum ([Times ((diff ((hd, stri)) :: tl)); Times ([hd; diff ((Times (tl), stri))])])
|Times [] -> raise InvalidArgument
|Sum hd::tl -> if (tl = []) then diff ((hd, stri))
 else Sum ([diff ((hd, stri)); diff ((Sum (tl), stri))])
|Sum [] -> raise InvalidArgument)

Time : 0.213706016541
../engine/main.native -dd -submission ../benchmarks_incorrect/diff/13/sub30.ml -solutions ../benchmarks_correct/diff -entry grading -testcases ../testcases/diff_testcases -grading ../benchmarks_incorrect/diff/grading.ml
-----------------------------
Submission
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

exception InvalidArgument

let rec diff (aexp, s)  = 
 (match (aexp, s) with 
|(Sum [], s) -> raise InvalidArgument
|(Times [], s) -> raise InvalidArgument
|(Const i, s) -> Const (0)
|(Var s1, s) -> if (s1 = s) then Const (1)
 else Const (0)
|(Power (s1, a), s) -> if (s1 = s) then Times ([Const (a); Power ((s1, (a - 1)))])
 else Times ([Const (a); diff ((Var (s1), s)); Power ((s1, (a - 1)))])
|(Sum [a; b], s) -> Sum ([diff ((a, s)); diff ((b, s))])
|(Sum a::sl, s) -> Sum ([diff ((a, s)); diff ((Sum (sl), s))])
|(Times [a; b], s) -> Sum ([Times ([diff ((a, s)); b]); Times ([a; diff ((b, s))])])
|(Times a::sl, s) -> Sum ([Times ((diff ((a, s)) :: sl)); Times ([a; diff ((Times (sl), s))])]))

-----------------------------
Submission
-----------------------------
type aexp =
|Sum of aexp list
|Times of aexp list
|Power of (string * int)
|Var of string
|Const of int

exception InvalidArgument

let rec diff (aexp, s)  = (45056, 
 (match (44949, ((44947, aexp, (44948, s) with 
|(Sum [], s) -> (44951, raise (44950, InvalidArgument
|(Times [], s) -> (44953, raise (44952, InvalidArgument
|(Const i, s) -> (44955, Const ((44954, 0)
|(Var s1, s) -> (44963, if (44958, ((44956, s1 = (44957, s) then (44960, Const ((44959, 1)
 else (44962, Const ((44961, 0)
|(Power (s1, a), s) -> (44993, if (44966, ((44964, s1 = (44965, s) then (44976, Times ((44975, [(44968, Const ((44967, a); (44974, Power ((44973, ((44969, s1, (44972, ((44970, a - (44971, 1)))])
 else (44992, Times ((44991, [(44978, Const ((44977, a); (44984, (44979, diff ((44983, ((44981, Var ((44980, s1), (44982, s)); (44990, Power ((44989, ((44985, s1, (44988, ((44986, a - (44987, 1)))])
|(Sum [a; b], s) -> (45005, Sum ((45004, [(44998, (44994, diff ((44997, ((44995, a, (44996, s)); (45003, (44999, diff ((45002, ((45000, b, (45001, s))])
|(Sum a::sl, s) -> (45018, Sum ((45017, [(45010, (45006, diff ((45009, ((45007, a, (45008, s)); (45016, (45011, diff ((45015, ((45013, Sum ((45012, sl), (45014, s))])
|(Times [a; b], s) -> (45036, Sum ((45035, [(45026, Times ((45025, [(45023, (45019, diff ((45022, ((45020, a, (45021, s)); (45024, b]); (45034, Times ((45033, [(45027, a; (45032, (45028, diff ((45031, ((45029, b, (45030, s))])])
|(Times a::sl, s) -> (45055, Sum ((45054, [(45044, Times ((45043, ((45041, (45037, diff ((45040, ((45038, a, (45039, s)) :: (45042, sl)); (45053, Times ((45052, [(45045, a; (45051, (45046, diff ((45050, ((45048, Times ((45047, sl), (45049, s))])]))

-----------------------------
Most Similar Sol ../benchmarks_correct/diff/18/sub9.ml Score : 1
-----------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff  : ((aexp * string) -> aexp) = 
fun (exp, x) -> 
 (match exp with 
|Const n -> Const (0)
|Var s -> if (s != x) then Const (0)
 else Const (1)
|Power (s, n) -> if (s != x) then Const (0)
 else Times ([Const (n); Power ((s, (n - 1)))])
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([diff ((hd, x)); diff ((Sum (tl), x))])))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{diff -> (18390 : 
Input : ((aexp : aexp), (s : string)) 
Output : aexp
Body : 
 (match (aexp, s) with 
|(Sum [], s) -> raise InvalidArgument
|(Times [], s) -> raise InvalidArgument
|(Const i, s) -> Const (0)
|(Var s1, s) -> if (s1 = s) then Const (1)
 else Const (0)
|(Power (s1, a), s) -> if (s1 = s) then Times ([Const (a); Power ((s1, (a - 1)))])
 else Times ([Const (a); diff ((Var (s1), s)); Power ((s1, (a - 1)))])
|(Sum [a; b], s) -> Sum ([diff ((a, s)); diff ((b, s))])
|(Sum a::sl, s) -> Sum ([diff ((a, s)); diff ((Sum (sl), s))])
|(Times [a; b], s) -> Sum ([Times ([diff ((a, s)); b]); Times ([a; diff ((b, s))])])
|(Times a::sl, s) -> Sum ([Times ((diff ((a, s)) :: sl)); Times ([a; diff ((Times (sl), s))])]))}
Edge : 
{(18390, 18390) -> }
Starting : 18390
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{diff -> (18349 : 
Input : ((exp : aexp), (x : string)) 
Output : aexp
Body : 
 (match exp with 
|Const n -> Const (0)
|Var s -> if (s != x) then Const (0)
 else Const (1)
|Power (s, n) -> if (s != x) then Const (0)
 else Times ([Const (n); Power ((s, (n - 1)))])
|Times l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((diff ((hd, x)) :: tl)); Times ([hd; diff ((Times (tl), x))])]))
|Sum l -> 
 (match l with 
|[] -> Const (0)
|hd::tl -> Sum ([diff ((hd, x)); diff ((Sum (tl), x))])))}
Edge : 
{(18349, 18349) -> }
Starting : 18349
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{diff -> diff}
------Remainings in submission ------
{}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44949 : ?)

Decls : 
,Exp : Insert (Const n -> Const (0) At label 45056

Decls : 
,Exp : Insert (Power (s, n) -> if (? != ?) then Const (0)
 else Times ([Const (?); Power ((?, (? - 1)))]) At label 45056

Decls : 
,Exp : Insert (Sum l -> 
 (match ? with 
|[] -> Const (0)
|hd::tl -> Sum ([? ((?, ?)); ? ((Sum (?), ?))])) At label 45056

Decls : 
,Exp : Insert (Times l -> 
 (match ? with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((? ((?, ?)) :: ?)); Times ([?; ? ((Times (?), ?))])])) At label 45056

Decls : 
,Exp : Insert (Var s -> if (? != ?) then Const (0)
 else Const (1) At label 45056

Decls : 
,Exp : Delete ((Const i, s) -> Const (0) At label 45056

Decls : 
,Exp : Delete ((Power (s1, a), s) -> if (s1 = s) then Times ([Const (a); Power ((s1, (a - 1)))])
 else Times ([Const (a); diff ((Var (s1), s)); Power ((s1, (a - 1)))]) At label 45056

Decls : 
,Exp : Delete ((Sum [], s) -> raise InvalidArgument At label 45056

Decls : 
,Exp : Delete ((Sum [a; b], s) -> Sum ([diff ((a, s)); diff ((b, s))]) At label 45056

Decls : 
,Exp : Delete ((Sum a::sl, s) -> Sum ([diff ((a, s)); diff ((Sum (sl), s))]) At label 45056

Decls : 
,Exp : Delete ((Times [], s) -> raise InvalidArgument At label 45056

Decls : 
,Exp : Delete ((Times [a; b], s) -> Sum ([Times ([diff ((a, s)); b]); Times ([a; diff ((b, s))])]) At label 45056

Decls : 
,Exp : Delete ((Times a::sl, s) -> Sum ([Times ((diff ((a, s)) :: sl)); Times ([a; diff ((Times (sl), s))])]) At label 45056

Decls : 
,Exp : Delete ((Var s1, s) -> if (s1 = s) then Const (1)
 else Const (0) At label 45056

Decls : 
}
-----------------------------
Templates
-----------------------------
{Exp : Modify (44949 : ?)

Decls : 
,Exp : Insert (Const n -> Const (0) At label 45056

Decls : 
,Exp : Insert (Power (s, n) -> if (? != ?) then Const (0)
 else Times ([Const (?); Power ((?, (? - 1)))]) At label 45056

Decls : 
,Exp : Insert (Sum l -> 
 (match ? with 
|[] -> Const (0)
|hd::tl -> Sum ([? ((?, ?)); ? ((Sum (?), ?))])) At label 45056

Decls : 
,Exp : Insert (Times l -> 
 (match ? with 
|[] -> Const (0)
|hd::tl -> Sum ([Times ((? ((?, ?)) :: ?)); Times ([?; ? ((Times (?), ?))])])) At label 45056

Decls : 
,Exp : Insert (Var s -> if (? != ?) then Const (0)
 else Const (1) At label 45056

Decls : 
,Exp : Delete ((Const i, s) -> Const (0) At label 45056

Decls : 
,Exp : Delete ((Power (s1, a), s) -> if (s1 = s) then Times ([Const (a); Power ((s1, (a - 1)))])
 else Times ([Const (a); diff ((Var (s1), s)); Power ((s1, (a - 1)))]) At label 45056

Decls : 
,Exp : Delete ((Sum [], s) -> raise InvalidArgument At label 45056

Decls : 
,Exp : Delete ((Sum [a; b], s) -> Sum ([diff ((a, s)); diff ((b, s))]) At label 45056

Decls : 
,Exp : Delete ((Sum a::sl, s) -> Sum ([diff ((a, s)); diff ((Sum (sl), s))]) At label 45056

Decls : 
,Exp : Delete ((Times [], s) -> raise InvalidArgument At label 45056

Decls : 
,Exp : Delete ((Times [a; b], s) -> Sum ([Times ([diff ((a, s)); b]); Times ([a; diff ((b, s))])]) At label 45056

Decls : 
,Exp : Delete ((Times a::sl, s) -> Sum ([Times ((diff ((a, s)) :: sl)); Times ([a; diff ((Times (sl), s))])]) At label 45056

Decls : 
,Exp : Delete ((Var s1, s) -> if (s1 = s) then Const (1)
 else Const (0) At label 45056

Decls : 
}
Fail to Repair
