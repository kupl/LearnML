../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub1.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19612, 
fun f -> (19611, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not a -> (19585, not ((19584, (19582, eval ((19583, a))
|AndAlso (a, b) -> (19592, ((19588, (19586, eval ((19587, a) && (19591, (19589, eval ((19590, b))
|OrElse (a, b) -> (19599, ((19595, (19593, eval ((19594, a) || (19598, (19596, eval ((19597, b))
|Imply (a, b) -> (19607, if (19602, (19600, eval ((19601, a) then (19605, (19603, eval ((19604, b)
 else (19606, true
|Equal (a, b) -> (19610, ((19608, a = (19609, b))

let rec expr  = (19630, 
fun e -> (19629, 
 (match (19613, e with 
|Num n -> (19614, n
|Plus (e1, e2) -> (19621, ((19617, (19615, expr ((19616, e1) + (19620, (19618, expr ((19619, e2))
|Minus (e1, e2) -> (19628, ((19624, (19622, expr ((19623, e1) - (19627, (19625, expr ((19626, e2)))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9343 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not a -> not (eval (a))
|AndAlso (a, b) -> (eval (a) && eval (b))
|OrElse (a, b) -> (eval (a) || eval (b))
|Imply (a, b) -> if eval (a) then eval (b)
 else true
|Equal (a, b) -> (a = b))}
Edge : 
{(9343, 9343) -> }
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19584 : ? (?))

Decls : 
,Exp : Modify (19588 : ? (?))

Decls : 
,Exp : Modify (19591 : ? (?))

Decls : 
,Exp : Modify (19595 : ? (?))

Decls : 
,Exp : Modify (19598 : ? (?))

Decls : 
,Exp : Modify (19602 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19605 : true)

Decls : 
,Exp : Modify (19606 : false)

Decls : 
,Exp : Modify (19608 : ? (?))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
,Exp : Modify (19609 : ? (?))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not a -> not (eval (a))
|AndAlso (a, b) -> (eval (a) && eval (b))
|OrElse (a, b) -> (eval (a) || eval (b))
|Imply (a, b) -> if eval (a) then eval (b)
 else true
|Equal (a, b) -> (evalExp (a) = evalExp (b)))

let rec expr  = 
fun e -> 
 (match e with 
|Num n -> n
|Plus (e1, e2) -> (expr (e1) + expr (e2))
|Minus (e1, e2) -> (expr (e1) - expr (e2)))

Time : 0.082270860672
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub106.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19580, 
fun f -> (19579, true

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : f 
Output : bool
Body : true}
Edge : 
empty
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : 
 (match ? with 
|True -> true
|False -> false
|Not f -> not (? (?))
|AndAlso (f1, f2) -> (? (?) && ? (?))
|OrElse (f1, f2) -> (? (?) || ? (?))
|Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false
|Equal (exp1, exp2) -> (? (?) = ? (?))))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f1))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2)))

Time : 0.788750886917
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub108.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval f  = (19659, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not a -> (19587, if (19584, (19582, eval ((19583, a) then (19585, false
 else (19586, true
|AndAlso (left, right) -> (19597, if (19594, ((19590, (19588, eval ((19589, left) && (19593, (19591, eval ((19592, right)) then (19595, true
 else (19596, false
|OrElse (left, right) -> (19607, if (19604, ((19600, (19598, eval ((19599, left) || (19603, (19601, eval ((19602, right)) then (19605, true
 else (19606, false
|Imply (left, right) -> (19630, if (19614, ((19610, (19608, eval ((19609, left) && (19613, (19611, eval ((19612, right)) then (19615, true
 else (19629, if (19626, ((19620, ((19618, (19616, eval ((19617, left) = (19619, true) && (19625, ((19623, (19621, eval ((19622, right) = (19624, false)) then (19627, true
 else (19628, false
|Equal (left, right) -> (19658, 
let rec env v  = (19647, 
 (match (19631, v with 
|Num a -> (19632, a
|Plus (a, b) -> (19639, ((19635, (19633, env ((19634, a) + (19638, (19636, env ((19637, b))
|Minus (a, b) -> (19646, ((19642, (19640, env ((19641, a) - (19645, (19643, env ((19644, b)))
 in 
(19657, if (19654, ((19650, (19648, env ((19649, left) = (19653, (19651, env ((19652, right)) then (19655, true
 else (19656, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{env -> (9344 : 
Input : (v : exp) 
Output : int
Body : 
 (match v with 
|Num a -> a
|Plus (a, b) -> (env (a) + env (b))
|Minus (a, b) -> (env (a) - env (b))),

eval -> (9343 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not a -> if eval (a) then false
 else true
|AndAlso (left, right) -> if (eval (left) && eval (right)) then true
 else false
|OrElse (left, right) -> if (eval (left) || eval (right)) then true
 else false
|Imply (left, right) -> if (eval (left) && eval (right)) then true
 else if ((eval (left) = true) && (eval (right) = false)) then true
 else false
|Equal (left, right) -> if (env (left) = env (right)) then true
 else false)}
Edge : 
{(9343, 9343) -> ,
(9343, 9344) -> ,
(9344, 9344) -> }
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{env -> evalExp,
eval -> eval}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19587 : not (? (?)))

Decls : 
,Exp : Modify (19597 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19607 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19614 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19629 : false)

Decls : 
,Exp : Modify (19631 : ?)

Decls : 
,Exp : Modify (19632 : ?)

Decls : 
,Exp : Modify (19635 : ? (?))

Decls : 
,Exp : Modify (19638 : ? (?))

Decls : 
,Exp : Modify (19642 : ? (?))

Decls : 
,Exp : Modify (19645 : ? (?))

Decls : 
,Exp : Modify (19657 : (? (?) = ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval f  = 
 (match f with 
|True -> true
|False -> false
|Not a -> if eval (a) then false
 else true
|AndAlso (left, right) -> if (eval (left) && eval (right)) then true
 else false
|OrElse (left, right) -> if (eval (left) || eval (right)) then true
 else false
|Imply (left, right) -> if ((eval (left) = false) || (eval (right) = true)) then true
 else false
|Equal (left, right) -> 
let rec env v  = 
 (match v with 
|Num a -> a
|Plus (a, b) -> (env (a) + env (b))
|Minus (a, b) -> (env (a) - env (b)))
 in 
if (env (left) = env (right)) then true
 else false)

Time : 0.247058868408
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub110.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19580, 
fun f -> (19579, true

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : f 
Output : bool
Body : true}
Edge : 
empty
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : 
 (match ? with 
|True -> true
|False -> false
|Not f -> not (? (?))
|AndAlso (f1, f2) -> (? (?) && ? (?))
|OrElse (f1, f2) -> (? (?) || ? (?))
|Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false
|Equal (exp1, exp2) -> (? (?) = ? (?))))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f1))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2)))

Time : 0.785686016083
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub112.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval_exp  : (exp -> int) = (19596, 
fun e -> (19595, 
 (match (19579, e with 
|Num num -> (19580, num
|Plus (n1, n2) -> (19587, ((19583, (19581, eval_exp ((19582, n1) + (19586, (19584, eval_exp ((19585, n2))
|Minus (n1, n2) -> (19594, ((19590, (19588, eval_exp ((19589, n1) - (19593, (19591, eval_exp ((19592, n2)))

let rec eval  : (formula -> bool) = (19637, 
fun f -> (19636, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not v -> (19603, not ((19602, (19600, eval ((19601, v))
|AndAlso (v1, v2) -> (19610, ((19606, (19604, eval ((19605, v1) && (19609, (19607, eval ((19608, v2))
|OrElse (v1, v2) -> (19617, ((19613, (19611, eval ((19612, v1) || (19616, (19614, eval ((19615, v2))
|Imply (v1, v2) -> (19625, if (19620, ((19618, v1 = (19619, False) then (19621, true
 else (19624, (19622, eval ((19623, v2)
|Equal (e1, e2) -> (19635, if (19632, ((19628, (19626, eval_exp ((19627, e1) = (19631, (19629, eval_exp ((19630, e2)) then (19633, true
 else (19634, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not v -> not (eval (v))
|AndAlso (v1, v2) -> (eval (v1) && eval (v2))
|OrElse (v1, v2) -> (eval (v1) || eval (v2))
|Imply (v1, v2) -> if (v1 = False) then true
 else eval (v2)
|Equal (e1, e2) -> if (eval_exp (e1) = eval_exp (e2)) then true
 else false),

eval_exp -> (9343 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num num -> num
|Plus (n1, n2) -> (eval_exp (n1) + eval_exp (n2))
|Minus (n1, n2) -> (eval_exp (n1) - eval_exp (n2)))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> ,
(9344, 9344) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
eval_exp -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19602 : ? (?))

Decls : 
,Exp : Modify (19606 : ? (?))

Decls : 
,Exp : Modify (19609 : ? (?))

Decls : 
,Exp : Modify (19613 : ? (?))

Decls : 
,Exp : Modify (19616 : ? (?))

Decls : 
,Exp : Modify (19620 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19624 : false)

Decls : 
,Exp : Modify (19635 : (? (?) = ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval_exp  : (exp -> int) = 
fun e -> 
 (match e with 
|Num num -> num
|Plus (n1, n2) -> (eval_exp (n1) + eval_exp (n2))
|Minus (n1, n2) -> (eval_exp (n1) - eval_exp (n2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not v -> not (eval (v))
|AndAlso (v1, v2) -> (eval (v1) && eval (v2))
|OrElse (v1, v2) -> (eval (v1) || eval (v2))
|Imply (v1, v2) -> if ((eval (v1) = false) || (eval (v2) = true)) then true
 else eval (v2)
|Equal (e1, e2) -> if (eval_exp (e1) = eval_exp (e2)) then true
 else false)

Time : 0.0159859657288
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub113.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec cal  : (exp -> int) = (19596, 
fun e -> (19595, 
 (match (19579, e with 
|Num n -> (19580, n
|Plus (e1, e2) -> (19587, ((19583, (19581, cal ((19582, e1) + (19586, (19584, cal ((19585, e2))
|Minus (e1, e2) -> (19594, ((19590, (19588, cal ((19589, e1) - (19593, (19591, cal ((19592, e2)))

let rec eval  : (formula -> bool) = (19653, 
fun f -> (19652, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not f1 -> (19603, not ((19602, (19600, eval ((19601, f1))
|AndAlso (f1, f2) -> (19610, ((19606, (19604, eval ((19605, f1) && (19609, (19607, eval ((19608, f2))
|OrElse (f1, f2) -> (19617, ((19613, (19611, eval ((19612, f1) || (19616, (19614, eval ((19615, f2))
|Imply (f1, f2) -> (19625, ((19621, (19618, eval ((19620, Not ((19619, f1)) && (19624, (19622, eval ((19623, f2))
|Equal (e1, e2) -> (19651, 
let rec cal  : (exp -> int) = (19643, 
fun e -> (19642, 
 (match (19626, e with 
|Num n -> (19627, n
|Plus (x, y) -> (19634, ((19630, (19628, cal ((19629, x) + (19633, (19631, cal ((19632, y))
|Minus (x, y) -> (19641, ((19637, (19635, cal ((19636, x) - (19640, (19638, cal ((19639, y)))
 in 
(19650, ((19646, (19644, cal ((19645, e1) = (19649, (19647, cal ((19648, e2)))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{cal -> (9609 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num n -> n
|Plus (x, y) -> (cal (x) + cal (y))
|Minus (x, y) -> (cal (x) - cal (y))),

eval -> (9608 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f1 -> not (eval (f1))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> (eval (Not (f1)) && eval (f2))
|Equal (e1, e2) -> (cal (e1) = cal (e2)))}
Edge : 
{(9608, 9608) -> ,
(9608, 9609) -> ,
(9609, 9609) -> }
Starting : 9608
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9573 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9572 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9572, 9572) -> ,
(9573, 9572) -> ,
(9573, 9573) -> }
Starting : 9573
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{cal -> evalExp,
eval -> eval}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19602 : ? (?))

Decls : 
,Exp : Modify (19606 : ? (?))

Decls : 
,Exp : Modify (19609 : ? (?))

Decls : 
,Exp : Modify (19613 : ? (?))

Decls : 
,Exp : Modify (19616 : ? (?))

Decls : 
,Exp : Modify (19625 : if ((? (?) = false) || (? (?) = true)) then true
 else false)

Decls : 
,Exp : Modify (19626 : ?)

Decls : 
,Exp : Modify (19627 : ?)

Decls : 
,Exp : Modify (19630 : ? (?))

Decls : 
,Exp : Modify (19633 : ? (?))

Decls : 
,Exp : Modify (19637 : ? (?))

Decls : 
,Exp : Modify (19640 : ? (?))

Decls : 
,Exp : Modify (19646 : ? (?))

Decls : 
,Exp : Modify (19649 : ? (?))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec cal  : (exp -> int) = 
fun e -> 
 (match e with 
|Num n -> n
|Plus (e1, e2) -> (cal (e1) + cal (e2))
|Minus (e1, e2) -> (cal (e1) - cal (e2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f1 -> not (eval (f1))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (e1, e2) -> 
let rec cal  : (exp -> int) = 
fun e -> 
 (match e with 
|Num n -> n
|Plus (x, y) -> (cal (x) + cal (y))
|Minus (x, y) -> (cal (x) - cal (y)))
 in 
(cal (e1) = cal (e2)))

Time : 0.0169098377228
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub115.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19612, 
fun f -> (19611, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not p -> (19585, not ((19584, (19582, eval ((19583, p))
|AndAlso (p, q) -> (19592, ((19588, (19586, eval ((19587, p) && (19591, (19589, eval ((19590, q))
|OrElse (p, q) -> (19599, ((19595, (19593, eval ((19594, p) || (19598, (19596, eval ((19597, q))
|Imply (p, q) -> (19607, ((19603, not ((19602, (19600, eval ((19601, p)) || (19606, (19604, eval ((19605, q))
|Equal (p, q) -> (19610, ((19608, p = (19609, q))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not p -> not (eval (p))
|AndAlso (p, q) -> (eval (p) && eval (q))
|OrElse (p, q) -> (eval (p) || eval (q))
|Imply (p, q) -> (not (eval (p)) || eval (q))
|Equal (p, q) -> (p = q))}
Edge : 
{(9079, 9079) -> }
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19584 : ? (?))

Decls : 
,Exp : Modify (19588 : ? (?))

Decls : 
,Exp : Modify (19591 : ? (?))

Decls : 
,Exp : Modify (19595 : ? (?))

Decls : 
,Exp : Modify (19598 : ? (?))

Decls : 
,Exp : Modify (19607 : if ((? (?) = false) || (? (?) = true)) then true
 else false)

Decls : 
,Exp : Modify (19608 : ? (?))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
,Exp : Modify (19609 : ? (?))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not p -> not (eval (p))
|AndAlso (p, q) -> (eval (p) && eval (q))
|OrElse (p, q) -> (eval (p) || eval (q))
|Imply (p, q) -> (not (eval (p)) || eval (q))
|Equal (p, q) -> (evalExp (p) = evalExp (q)))

Time : 0.0446109771729
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub118.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19580, 
fun f -> (19579, true

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : f 
Output : bool
Body : true}
Edge : 
empty
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : 
 (match ? with 
|True -> true
|False -> false
|Not f -> not (? (?))
|AndAlso (f1, f2) -> (? (?) && ? (?))
|OrElse (f1, f2) -> (? (?) || ? (?))
|Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false
|Equal (exp1, exp2) -> (? (?) = ? (?))))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f1))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2)))

Time : 0.824058055878
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub119.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec trans  : (exp -> exp) = (19635, 
fun e1 -> (19634, 
 (match (19579, e1 with 
|Plus (Num a, Num b) -> (19583, Num ((19582, ((19580, a + (19581, b))
|Plus (Num a, e3) -> (19590, Plus ((19589, ((19585, Num ((19584, a), (19588, (19586, trans ((19587, e3)))
|Plus (e2, Num b) -> (19597, Plus ((19596, ((19593, (19591, trans ((19592, e2), (19595, Num ((19594, b)))
|Plus (e2, e3) -> (19605, Plus ((19604, ((19600, (19598, trans ((19599, e2), (19603, (19601, trans ((19602, e3)))
|Minus (Num a, Num b) -> (19609, Num ((19608, ((19606, a - (19607, b))
|Minus (Num a, e3) -> (19616, Minus ((19615, ((19611, Num ((19610, a), (19614, (19612, trans ((19613, e3)))
|Minus (e2, Num b) -> (19623, Minus ((19622, ((19619, (19617, trans ((19618, e2), (19621, Num ((19620, b)))
|Minus (e2, e3) -> (19631, Minus ((19630, ((19626, (19624, trans ((19625, e2), (19629, (19627, trans ((19628, e3)))
|Num a -> (19633, Num ((19632, a))

let rec eval  : (formula -> bool) = (19686, 
fun f -> (19685, 
 (match (19636, f with 
|True -> (19637, true
|False -> (19638, false
|Not f1 -> (19644, if (19641, ((19639, f1 = (19640, True) then (19642, false
 else (19643, true
|AndAlso (f1, f2) -> (19654, if (19651, ((19647, ((19645, f1 = (19646, True) && (19650, ((19648, f2 = (19649, True)) then (19652, true
 else (19653, false
|OrElse (f1, f2) -> (19664, if (19661, ((19657, ((19655, f1 = (19656, False) && (19660, ((19658, f2 = (19659, False)) then (19662, false
 else (19663, true
|Imply (f1, f2) -> (19674, if (19671, ((19667, ((19665, f1 = (19666, True) && (19670, ((19668, f2 = (19669, False)) then (19672, false
 else (19673, true
|Equal (e1, e2) -> (19684, if (19681, ((19677, (19675, trans ((19676, e1) = (19680, (19678, trans ((19679, e2)) then (19682, true
 else (19683, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/16/sub72.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec cal num  = (14536, 
 (match (14501, num with 
|Num i -> (14503, Num ((14502, i)
|Plus (a, b) -> (14519, 
 (match (14506, ((14504, a, (14505, b) with 
|(Num a2, Num b2) -> (14510, Num ((14509, ((14507, a2 + (14508, b2))
|(_, _) -> (14518, Plus ((14517, ((14513, (14511, cal ((14512, a), (14516, (14514, cal ((14515, b))))
|Minus (a, b) -> (14535, 
 (match (14522, ((14520, a, (14521, b) with 
|(Num a2, Num b2) -> (14526, Num ((14525, ((14523, a2 - (14524, b2))
|(_, _) -> (14534, Minus ((14533, ((14529, (14527, cal ((14528, a), (14532, (14530, cal ((14531, b)))))

let rec eval  : (formula -> bool) = (14597, 
fun f -> (14596, 
 (match (14537, f with 
|True -> (14538, true
|False -> (14539, false
|Not x -> (14547, if (14544, ((14542, (14540, eval ((14541, x) = (14543, true) then (14545, false
 else (14546, true
|AndAlso (x, y) -> (14554, ((14550, (14548, eval ((14549, x) && (14553, (14551, eval ((14552, y))
|OrElse (x, y) -> (14561, ((14557, (14555, eval ((14556, x) || (14560, (14558, eval ((14559, y))
|Imply (x, y) -> (14575, if (14572, ((14566, ((14564, (14562, eval ((14563, x) = (14565, true) && (14571, ((14569, (14567, eval ((14568, y) = (14570, false)) then (14573, false
 else (14574, true
|Equal (x, y) -> (14595, 
 (match (14578, ((14576, x, (14577, y) with 
|(Num x2, Num y2) -> (14584, if (14581, ((14579, x2 = (14580, y2) then (14582, true
 else (14583, false
|(_, _) -> (14594, (14585, eval ((14593, Equal ((14592, ((14588, (14586, cal ((14587, x), (14591, (14589, cal ((14590, y))))))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f1 -> if (f1 = True) then false
 else true
|AndAlso (f1, f2) -> if ((f1 = True) && (f2 = True)) then true
 else false
|OrElse (f1, f2) -> if ((f1 = False) && (f2 = False)) then false
 else true
|Imply (f1, f2) -> if ((f1 = True) && (f2 = False)) then false
 else true
|Equal (e1, e2) -> if (trans (e1) = trans (e2)) then true
 else false),

trans -> (9343 : 
Input : (e1 : exp) 
Output : exp
Body : 
 (match e1 with 
|Plus (Num a, Num b) -> Num ((a + b))
|Plus (Num a, e3) -> Plus ((Num (a), trans (e3)))
|Plus (e2, Num b) -> Plus ((trans (e2), Num (b)))
|Plus (e2, e3) -> Plus ((trans (e2), trans (e3)))
|Minus (Num a, Num b) -> Num ((a - b))
|Minus (Num a, e3) -> Minus ((Num (a), trans (e3)))
|Minus (e2, Num b) -> Minus ((trans (e2), Num (b)))
|Minus (e2, e3) -> Minus ((trans (e2), trans (e3)))
|Num a -> Num (a))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{cal -> (9308 : 
Input : (num : exp) 
Output : exp
Body : 
 (match num with 
|Num i -> Num (i)
|Plus (a, b) -> 
 (match (a, b) with 
|(Num a2, Num b2) -> Num ((a2 + b2))
|(_, _) -> Plus ((cal (a), cal (b))))
|Minus (a, b) -> 
 (match (a, b) with 
|(Num a2, Num b2) -> Num ((a2 - b2))
|(_, _) -> Minus ((cal (a), cal (b))))),

eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not x -> if (eval (x) = true) then false
 else true
|AndAlso (x, y) -> (eval (x) && eval (y))
|OrElse (x, y) -> (eval (x) || eval (y))
|Imply (x, y) -> if ((eval (x) = true) && (eval (y) = false)) then false
 else true
|Equal (x, y) -> 
 (match (x, y) with 
|(Num x2, Num y2) -> if (x2 = y2) then true
 else false
|(_, _) -> eval (Equal ((cal (x), cal (y))))))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
trans -> cal}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19605 : 
 (match (?, ?) with 
|(Num a2, Num b2) -> Num ((? + ?))
|(_, _) -> Plus ((? (?), ? (?)))))

Decls : 
,Exp : Modify (19631 : 
 (match (?, ?) with 
|(Num a2, Num b2) -> Num ((? - ?))
|(_, _) -> Minus ((? (?), ? (?)))))

Decls : 
,Exp : Modify (19632 : ?)

Decls : 
,Exp : Modify (19636 : ?)

Decls : 
,Exp : Modify (19639 : ? (?))

Decls : 
,Exp : Modify (19640 : true)

Decls : 
,Exp : Modify (19654 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19664 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19665 : ? (?))

Decls : 
,Exp : Modify (19666 : true)

Decls : 
,Exp : Modify (19668 : ? (?))

Decls : 
,Exp : Modify (19669 : false)

Decls : 
,Exp : Modify (19684 : 
 (match (?, ?) with 
|(Num x2, Num y2) -> if (? = ?) then true
 else false
|(_, _) -> ? (Equal ((? (?), ? (?))))))

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub12.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19580, 
fun f -> (19579, true

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : f 
Output : bool
Body : true}
Edge : 
empty
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : 
 (match ? with 
|True -> true
|False -> false
|Not f -> not (? (?))
|AndAlso (f1, f2) -> (? (?) && ? (?))
|OrElse (f1, f2) -> (? (?) || ? (?))
|Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false
|Equal (exp1, exp2) -> (? (?) = ? (?))))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f1))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2)))

Time : 0.797595024109
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub120.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19662, 
fun f -> (19661, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not a -> (19589, if (19586, ((19584, (19582, eval ((19583, a) = (19585, true) then (19587, true
 else (19588, false
|AndAlso (a, b) -> (19603, if (19600, ((19594, ((19592, (19590, eval ((19591, a) = (19593, true) && (19599, ((19597, (19595, eval ((19596, b) = (19598, true)) then (19601, true
 else (19602, false
|OrElse (a, b) -> (19617, if (19614, ((19608, ((19606, (19604, eval ((19605, a) = (19607, false) && (19613, ((19611, (19609, eval ((19610, b) = (19612, false)) then (19615, false
 else (19616, true
|Imply (a, b) -> (19631, if (19628, ((19622, ((19620, (19618, eval ((19619, a) = (19621, true) && (19627, ((19625, (19623, eval ((19624, b) = (19626, false)) then (19629, false
 else (19630, true
|Equal (a, b) -> (19660, 
let rec eq  : (exp -> int) = (19649, 
fun e -> (19648, 
 (match (19632, e with 
|Num a -> (19633, a
|Plus (a, b) -> (19640, ((19636, (19634, eq ((19635, a) + (19639, (19637, eq ((19638, b))
|Minus (a, b) -> (19647, ((19643, (19641, eq ((19642, a) - (19646, (19644, eq ((19645, b)))
 in 
(19659, if (19656, ((19652, (19650, eq ((19651, a) = (19655, (19653, eq ((19654, b)) then (19657, true
 else (19658, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eq -> (9344 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num a -> a
|Plus (a, b) -> (eq (a) + eq (b))
|Minus (a, b) -> (eq (a) - eq (b))),

eval -> (9343 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not a -> if (eval (a) = true) then true
 else false
|AndAlso (a, b) -> if ((eval (a) = true) && (eval (b) = true)) then true
 else false
|OrElse (a, b) -> if ((eval (a) = false) && (eval (b) = false)) then false
 else true
|Imply (a, b) -> if ((eval (a) = true) && (eval (b) = false)) then false
 else true
|Equal (a, b) -> if (eq (a) = eq (b)) then true
 else false)}
Edge : 
{(9343, 9343) -> ,
(9343, 9344) -> ,
(9344, 9344) -> }
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eq -> evalExp,
eval -> eval}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19589 : not (? (?)))

Decls : 
,Exp : Modify (19603 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19617 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19628 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19629 : true)

Decls : 
,Exp : Modify (19630 : false)

Decls : 
,Exp : Modify (19632 : ?)

Decls : 
,Exp : Modify (19633 : ?)

Decls : 
,Exp : Modify (19636 : ? (?))

Decls : 
,Exp : Modify (19639 : ? (?))

Decls : 
,Exp : Modify (19643 : ? (?))

Decls : 
,Exp : Modify (19646 : ? (?))

Decls : 
,Exp : Modify (19659 : (? (?) = ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not a -> not (eval (a))
|AndAlso (a, b) -> if ((eval (a) = true) && (eval (b) = true)) then true
 else false
|OrElse (a, b) -> if ((eval (a) = false) && (eval (b) = false)) then false
 else true
|Imply (a, b) -> if ((eval (a) = true) && (eval (b) = false)) then false
 else true
|Equal (a, b) -> 
let rec eq  : (exp -> int) = 
fun e -> 
 (match e with 
|Num a -> a
|Plus (a, b) -> (eq (a) + eq (b))
|Minus (a, b) -> (eq (a) - eq (b)))
 in 
if (eq (a) = eq (b)) then true
 else false)

Time : 0.0101480484009
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub123.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19650, 
fun f -> (19649, 
let rec evalexp  : (exp -> int) = (19596, 
fun f1 -> (19595, 
 (match (19579, f1 with 
|Num a -> (19580, a
|Plus (a, b) -> (19587, ((19583, (19581, evalexp ((19582, a) + (19586, (19584, evalexp ((19585, b))
|Minus (a, b) -> (19594, ((19590, (19588, evalexp ((19589, a) - (19593, (19591, evalexp ((19592, b)))
 in 
(19648, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not f1 -> (19605, if (19602, ((19600, f1 = (19601, True) then (19603, false
 else (19604, true
|AndAlso (f1, f2) -> (19616, if (19608, ((19606, f1 = (19607, False) then (19609, false
 else (19615, if (19612, ((19610, f2 = (19611, True) then (19613, true
 else (19614, false
|OrElse (f1, f2) -> (19627, if (19619, ((19617, f1 = (19618, True) then (19620, true
 else (19626, if (19623, ((19621, f2 = (19622, True) then (19624, true
 else (19625, false
|Imply (f1, f2) -> (19637, if (19634, ((19630, ((19628, f1 = (19629, True) && (19633, ((19631, f2 = (19632, False)) then (19635, false
 else (19636, true
|Equal (a, b) -> (19647, if (19644, ((19640, (19638, evalexp ((19639, a) = (19643, (19641, evalexp ((19642, b)) then (19645, true
 else (19646, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9343 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f1 -> if (f1 = True) then false
 else true
|AndAlso (f1, f2) -> if (f1 = False) then false
 else if (f2 = True) then true
 else false
|OrElse (f1, f2) -> if (f1 = True) then true
 else if (f2 = True) then true
 else false
|Imply (f1, f2) -> if ((f1 = True) && (f2 = False)) then false
 else true
|Equal (a, b) -> if (evalexp (a) = evalexp (b)) then true
 else false),

evalexp -> (9344 : 
Input : (f1 : exp) 
Output : int
Body : 
 (match f1 with 
|Num a -> a
|Plus (a, b) -> (evalexp (a) + evalexp (b))
|Minus (a, b) -> (evalexp (a) - evalexp (b)))}
Edge : 
{(9343, 9344) -> ,
(9344, 9344) -> }
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
evalexp -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19605 : not (? (?)))

Decls : 
,Exp : Modify (19616 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19627 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19634 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19635 : true)

Decls : 
,Exp : Modify (19636 : false)

Decls : 
,Exp : Modify (19647 : (? (?) = ? (?)))

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub125.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec exptoint  : (exp -> int) = (19596, 
fun e -> (19595, 
 (match (19579, e with 
|Num a -> (19580, a
|Plus (a, b) -> (19587, ((19583, (19581, exptoint ((19582, a) + (19586, (19584, exptoint ((19585, b))
|Minus (a, b) -> (19594, ((19590, (19588, exptoint ((19589, a) - (19593, (19591, exptoint ((19592, b)))

let rec eval  : (formula -> bool) = (19650, 
fun f -> (19649, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not f1 -> (19605, if (19602, ((19600, f1 = (19601, True) then (19603, false
 else (19604, true
|AndAlso (f1, f2) -> (19615, if (19612, ((19608, ((19606, f1 = (19607, True) && (19611, ((19609, f2 = (19610, True)) then (19613, true
 else (19614, false
|OrElse (f1, f2) -> (19624, if (19621, ((19619, AndAlso ((19618, ((19616, f1, (19617, f2)) = (19620, False) then (19622, false
 else (19623, true
|Imply (f1, f2) -> (19638, if (19635, ((19628, ((19626, Not ((19625, f1) = (19627, True) || (19634, ((19632, AndAlso ((19631, ((19629, f1, (19630, f2)) = (19633, True)) then (19636, true
 else (19637, false
|Equal (e1, e2) -> (19648, if (19645, ((19641, (19639, exptoint ((19640, e1) = (19644, (19642, exptoint ((19643, e2)) then (19646, true
 else (19647, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f1 -> if (f1 = True) then false
 else true
|AndAlso (f1, f2) -> if ((f1 = True) && (f2 = True)) then true
 else false
|OrElse (f1, f2) -> if (AndAlso ((f1, f2)) = False) then false
 else true
|Imply (f1, f2) -> if ((Not (f1) = True) || (AndAlso ((f1, f2)) = True)) then true
 else false
|Equal (e1, e2) -> if (exptoint (e1) = exptoint (e2)) then true
 else false),

exptoint -> (9343 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num a -> a
|Plus (a, b) -> (exptoint (a) + exptoint (b))
|Minus (a, b) -> (exptoint (a) - exptoint (b)))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
exptoint -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19605 : not (? (?)))

Decls : 
,Exp : Modify (19615 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19624 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19626 : ? (?))

Decls : 
,Exp : Modify (19627 : false)

Decls : 
,Exp : Modify (19632 : ? (?))

Decls : 
,Exp : Modify (19633 : true)

Decls : 
,Exp : Modify (19648 : (? (?) = ? (?)))

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub129.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec expfun  : (exp -> int) = (19596, 
fun q -> (19595, 
 (match (19579, q with 
|Num i -> (19580, i
|Plus (i, k) -> (19587, ((19583, (19581, expfun ((19582, i) + (19586, (19584, expfun ((19585, k))
|Minus (i, k) -> (19594, ((19590, (19588, expfun ((19589, i) - (19593, (19591, expfun ((19592, k)))

let rec eval  : (formula -> bool) = (19647, 
fun f -> (19646, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not f1 -> (19605, if (19602, ((19600, f1 = (19601, True) then (19603, false
 else (19604, true
|AndAlso (f1, f2) -> (19615, if (19612, ((19608, ((19606, f1 = (19607, True) && (19611, ((19609, f2 = (19610, True)) then (19613, true
 else (19614, false
|OrElse (f1, f2) -> (19625, if (19622, ((19618, ((19616, f1 = (19617, False) && (19621, ((19619, f2 = (19620, False)) then (19623, false
 else (19624, true
|Imply (f1, f2) -> (19635, if (19632, ((19628, ((19626, f1 = (19627, True) && (19631, ((19629, f2 = (19630, False)) then (19633, false
 else (19634, true
|Equal (q1, q2) -> (19645, if (19642, ((19638, (19636, expfun ((19637, q1) = (19641, (19639, expfun ((19640, q2)) then (19643, true
 else (19644, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f1 -> if (f1 = True) then false
 else true
|AndAlso (f1, f2) -> if ((f1 = True) && (f2 = True)) then true
 else false
|OrElse (f1, f2) -> if ((f1 = False) && (f2 = False)) then false
 else true
|Imply (f1, f2) -> if ((f1 = True) && (f2 = False)) then false
 else true
|Equal (q1, q2) -> if (expfun (q1) = expfun (q2)) then true
 else false),

expfun -> (9343 : 
Input : (q : exp) 
Output : int
Body : 
 (match q with 
|Num i -> i
|Plus (i, k) -> (expfun (i) + expfun (k))
|Minus (i, k) -> (expfun (i) - expfun (k)))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
expfun -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19605 : not (? (?)))

Decls : 
,Exp : Modify (19615 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19625 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19632 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19633 : true)

Decls : 
,Exp : Modify (19634 : false)

Decls : 
,Exp : Modify (19645 : (? (?) = ? (?)))

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub139.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19669, 
fun f -> (19668, 
let rec foldeval b  = (19595, 
 (match (19579, b with 
|Num i -> (19580, i
|Plus (l, m) -> (19587, ((19583, (19581, foldeval ((19582, l) + (19586, (19584, foldeval ((19585, m))
|Minus (l, m) -> (19594, ((19590, (19588, foldeval ((19589, l) - (19593, (19591, foldeval ((19592, m)))
 in 
(19667, 
let rec fold a  = (19658, 
 (match (19596, a with 
|True -> (19597, True
|False -> (19598, False
|Not x1 -> (19606, if (19603, ((19601, (19599, fold ((19600, x1) = (19602, True) then (19604, False
 else (19605, True
|AndAlso (x2, y2) -> (19620, if (19617, ((19611, ((19609, (19607, fold ((19608, x2) = (19610, True) && (19616, ((19614, (19612, fold ((19613, y2) = (19615, True)) then (19618, True
 else (19619, False
|OrElse (x3, y3) -> (19634, if (19631, ((19625, ((19623, (19621, fold ((19622, x3) = (19624, True) || (19630, ((19628, (19626, fold ((19627, y3) = (19629, True)) then (19632, True
 else (19633, False
|Imply (x4, y4) -> (19647, if (19639, ((19637, (19635, fold ((19636, x4) = (19638, False) then (19640, True
 else (19646, if (19643, ((19641, y4 = (19642, True) then (19644, True
 else (19645, False
|Equal (l5, m5) -> (19657, if (19654, ((19650, (19648, foldeval ((19649, l5) = (19653, (19651, foldeval ((19652, m5)) then (19655, True
 else (19656, False)
 in 
(19666, if (19663, ((19661, (19659, fold ((19660, f) = (19662, True) then (19664, true
 else (19665, false

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9607 : 
Input : (f : formula) 
Output : bool
Body : if (fold (f) = True) then true
 else false,

fold -> (9609 : 
Input : (a : formula) 
Output : formula
Body : 
 (match a with 
|True -> True
|False -> False
|Not x1 -> if (fold (x1) = True) then False
 else True
|AndAlso (x2, y2) -> if ((fold (x2) = True) && (fold (y2) = True)) then True
 else False
|OrElse (x3, y3) -> if ((fold (x3) = True) || (fold (y3) = True)) then True
 else False
|Imply (x4, y4) -> if (fold (x4) = False) then True
 else if (y4 = True) then True
 else False
|Equal (l5, m5) -> if (foldeval (l5) = foldeval (m5)) then True
 else False),

foldeval -> (9608 : 
Input : (b : exp) 
Output : int
Body : 
 (match b with 
|Num i -> i
|Plus (l, m) -> (foldeval (l) + foldeval (m))
|Minus (l, m) -> (foldeval (l) - foldeval (m)))}
Edge : 
{(9607, 9609) -> ,
(9608, 9608) -> ,
(9609, 9608) -> ,
(9609, 9609) -> }
Starting : 9607
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9573 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9572 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9572, 9572) -> ,
(9573, 9572) -> ,
(9573, 9573) -> }
Starting : 9573
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
foldeval -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19666 : 
 (match ? with 
|True -> true
|False -> false
|Not f -> not (? (?))
|AndAlso (f1, f2) -> (? (?) && ? (?))
|OrElse (f1, f2) -> (? (?) || ? (?))
|Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false
|Equal (exp1, exp2) -> (? (?) = ? (?))))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = 
fun f -> 
let rec foldeval b  = 
 (match b with 
|Num i -> i
|Plus (l, m) -> (foldeval (l) + foldeval (m))
|Minus (l, m) -> (foldeval (l) - foldeval (m)))
 in 

let rec fold a  = 
 (match a with 
|True -> True
|False -> False
|Not x1 -> if (fold (x1) = True) then False
 else True
|AndAlso (x2, y2) -> if ((fold (x2) = True) && (fold (y2) = True)) then True
 else False
|OrElse (x3, y3) -> if ((fold (x3) = True) || (fold (y3) = True)) then True
 else False
|Imply (x4, y4) -> if (fold (x4) = False) then True
 else if (y4 = True) then True
 else False
|Equal (l5, m5) -> if (foldeval (l5) = foldeval (m5)) then True
 else False)
 in 

 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f1))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (foldeval (exp1) = foldeval (exp2)))

Time : 1.19062185287
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub140.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalexp f  = (19595, 
 (match (19579, f with 
|Num x -> (19580, x
|Plus (x, y) -> (19587, ((19583, (19581, evalexp ((19582, x) + (19586, (19584, evalexp ((19585, y))
|Minus (x, y) -> (19594, ((19590, (19588, evalexp ((19589, x) + (19593, (19591, evalexp ((19592, y)))

let rec eval f  = (19653, 
 (match (19596, f with 
|True -> (19597, true
|False -> (19598, false
|Not p -> (19606, if (19603, ((19601, (19599, eval ((19600, p) = (19602, true) then (19604, false
 else (19605, true
|AndAlso (p, q) -> (19620, if (19617, ((19611, ((19609, (19607, eval ((19608, p) = (19610, true) && (19616, ((19614, (19612, eval ((19613, q) = (19615, true)) then (19618, true
 else (19619, false
|OrElse (p, q) -> (19634, if (19631, ((19625, ((19623, (19621, eval ((19622, p) = (19624, true) || (19630, ((19628, (19626, eval ((19627, q) = (19629, true)) then (19632, true
 else (19633, false
|Imply (p, q) -> (19642, if (19639, ((19637, (19635, eval ((19636, q) = (19638, true) then (19640, true
 else (19641, false
|Equal (p, q) -> (19652, if (19649, ((19645, (19643, evalexp ((19644, p) = (19648, (19646, evalexp ((19647, q)) then (19650, true
 else (19651, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not p -> if (eval (p) = true) then false
 else true
|AndAlso (p, q) -> if ((eval (p) = true) && (eval (q) = true)) then true
 else false
|OrElse (p, q) -> if ((eval (p) = true) || (eval (q) = true)) then true
 else false
|Imply (p, q) -> if (eval (q) = true) then true
 else false
|Equal (p, q) -> if (evalexp (p) = evalexp (q)) then true
 else false),

evalexp -> (9343 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num x -> x
|Plus (x, y) -> (evalexp (x) + evalexp (y))
|Minus (x, y) -> (evalexp (x) + evalexp (y)))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> ,
(9344, 9344) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
evalexp -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19594 : (? (?) - ? (?)))

Decls : 
,Exp : Modify (19596 : ?)

Decls : 
,Exp : Modify (19606 : not (? (?)))

Decls : 
,Exp : Modify (19620 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19634 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19639 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19652 : (? (?) = ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalexp f  = 
 (match f with 
|Num x -> x
|Plus (x, y) -> (evalexp (x) + evalexp (y))
|Minus (x, y) -> (evalexp (x) - evalexp (y)))

let rec eval f  = 
 (match f with 
|True -> true
|False -> false
|Not p -> if (eval (p) = true) then false
 else true
|AndAlso (p, q) -> if ((eval (p) = true) && (eval (q) = true)) then true
 else false
|OrElse (p, q) -> if ((eval (p) = true) || (eval (q) = true)) then true
 else false
|Imply (p, q) -> if ((eval (p) = false) || (eval (q) = true)) then true
 else false
|Equal (p, q) -> if (evalexp (p) = evalexp (q)) then true
 else false)

Time : 0.224555015564
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub141.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19580, 
fun f -> (19579, true

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : f 
Output : bool
Body : true}
Edge : 
empty
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : 
 (match ? with 
|True -> true
|False -> false
|Not f -> not (? (?))
|AndAlso (f1, f2) -> (? (?) && ? (?))
|OrElse (f1, f2) -> (? (?) || ? (?))
|Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false
|Equal (exp1, exp2) -> (? (?) = ? (?))))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f1))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2)))

Time : 0.773153781891
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub15.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19654, 
fun f -> (19653, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not b -> (19591, if (19584, ((19582, b = (19583, True) then (19587, (19585, eval ((19586, True)
 else (19590, (19588, eval ((19589, False)
|AndAlso (a, b) -> (19608, if (19594, ((19592, a = (19593, False) then (19597, (19595, eval ((19596, False)
 else (19607, if (19600, ((19598, b = (19599, False) then (19603, (19601, eval ((19602, False)
 else (19606, (19604, eval ((19605, True)
|OrElse (a, b) -> (19625, if (19611, ((19609, a = (19610, True) then (19614, (19612, eval ((19613, True)
 else (19624, if (19617, ((19615, b = (19616, True) then (19620, (19618, eval ((19619, True)
 else (19623, (19621, eval ((19622, False)
|Imply (a, b) -> (19642, if (19628, ((19626, a = (19627, False) then (19631, (19629, eval ((19630, True)
 else (19641, if (19634, ((19632, b = (19633, True) then (19637, (19635, eval ((19636, True)
 else (19640, (19638, eval ((19639, False)
|Equal (a, b) -> (19652, if (19645, ((19643, a = (19644, b) then (19648, (19646, eval ((19647, True)
 else (19651, (19649, eval ((19650, False))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not b -> if (b = True) then eval (True)
 else eval (False)
|AndAlso (a, b) -> if (a = False) then eval (False)
 else if (b = False) then eval (False)
 else eval (True)
|OrElse (a, b) -> if (a = True) then eval (True)
 else if (b = True) then eval (True)
 else eval (False)
|Imply (a, b) -> if (a = False) then eval (True)
 else if (b = True) then eval (True)
 else eval (False)
|Equal (a, b) -> if (a = b) then eval (True)
 else eval (False))}
Edge : 
{(9079, 9079) -> }
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19591 : not (? (?)))

Decls : 
,Exp : Modify (19608 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19625 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19628 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19631 : true)

Decls : 
,Exp : Modify (19641 : false)

Decls : 
,Exp : Modify (19652 : (? (?) = ? (?)))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not b -> not (eval (b))
|AndAlso (a, b) -> if (a = False) then eval (False)
 else if (b = False) then eval (False)
 else eval (True)
|OrElse (a, b) -> if (a = True) then eval (True)
 else if (b = True) then eval (True)
 else eval (False)
|Imply (a, b) -> if ((eval (a) = false) || (eval (b) = true)) then eval (True)
 else if (b = True) then eval (True)
 else eval (False)
|Equal (a, b) -> (evalExp (a) = evalExp (b)))

Time : 1.08125495911
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub20.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19597, 
fun f -> (19596, 
 (match (19579, f with 
|Not True -> (19580, false
|Not False -> (19581, true
|AndAlso (a, b) -> (19588, ((19584, (19582, eval ((19583, a) && (19587, (19585, eval ((19586, b))
|OrElse (a, b) -> (19595, ((19591, (19589, eval ((19590, a) || (19594, (19592, eval ((19593, b)))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|Not True -> false
|Not False -> true
|AndAlso (a, b) -> (eval (a) && eval (b))
|OrElse (a, b) -> (eval (a) || eval (b)))}
Edge : 
{(9079, 9079) -> }
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19584 : ? (?))

Decls : 
,Exp : Modify (19587 : ? (?))

Decls : 
,Exp : Modify (19591 : ? (?))

Decls : 
,Exp : Modify (19594 : ? (?))

Decls : 
,Exp : Insert (Equal (exp1, exp2) -> (? (?) = ? (?)) At label 19596

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
,Exp : Insert (False -> false At label 19596

Decls : 
,Exp : Insert (Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false At label 19596

Decls : 
,Exp : Insert (Not f -> not (? (?)) At label 19596

Decls : 
,Exp : Insert (True -> true At label 19596

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub23.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19637, 
fun f -> (19636, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not a -> (19585, not ((19584, (19582, eval ((19583, a))
|AndAlso (a, b) -> (19592, ((19588, (19586, eval ((19587, a) && (19591, (19589, eval ((19590, b))
|OrElse (a, b) -> (19599, ((19595, (19593, eval ((19594, a) || (19598, (19596, eval ((19597, b))
|Imply (a, b) -> (19607, if (19602, (19600, eval ((19601, a) then (19605, (19603, eval ((19604, b)
 else (19606, true
|Equal (a, b) -> (19635, 
let rec _eval x  = (19624, 
 (match (19608, x with 
|Num n -> (19609, n
|Plus (n1, n2) -> (19616, ((19612, (19610, _eval ((19611, n1) + (19615, (19613, _eval ((19614, n2))
|Minus (n1, n2) -> (19623, ((19619, (19617, _eval ((19618, n1) - (19622, (19620, _eval ((19621, n2)))
 in 
(19634, if (19631, ((19627, (19625, _eval ((19626, a) < (19630, (19628, _eval ((19629, b)) then (19632, true
 else (19633, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{_eval -> (9344 : 
Input : (x : exp) 
Output : int
Body : 
 (match x with 
|Num n -> n
|Plus (n1, n2) -> (_eval (n1) + _eval (n2))
|Minus (n1, n2) -> (_eval (n1) - _eval (n2))),

eval -> (9343 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not a -> not (eval (a))
|AndAlso (a, b) -> (eval (a) && eval (b))
|OrElse (a, b) -> (eval (a) || eval (b))
|Imply (a, b) -> if eval (a) then eval (b)
 else true
|Equal (a, b) -> if (_eval (a) < _eval (b)) then true
 else false)}
Edge : 
{(9343, 9343) -> ,
(9343, 9344) -> ,
(9344, 9344) -> }
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{_eval -> evalExp,
eval -> eval}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19584 : ? (?))

Decls : 
,Exp : Modify (19588 : ? (?))

Decls : 
,Exp : Modify (19591 : ? (?))

Decls : 
,Exp : Modify (19595 : ? (?))

Decls : 
,Exp : Modify (19598 : ? (?))

Decls : 
,Exp : Modify (19602 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19605 : true)

Decls : 
,Exp : Modify (19606 : false)

Decls : 
,Exp : Modify (19608 : ?)

Decls : 
,Exp : Modify (19609 : ?)

Decls : 
,Exp : Modify (19612 : ? (?))

Decls : 
,Exp : Modify (19615 : ? (?))

Decls : 
,Exp : Modify (19619 : ? (?))

Decls : 
,Exp : Modify (19622 : ? (?))

Decls : 
,Exp : Modify (19634 : (? (?) = ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not a -> not (eval (a))
|AndAlso (a, b) -> (eval (a) && eval (b))
|OrElse (a, b) -> (eval (a) || eval (b))
|Imply (a, b) -> if eval (a) then eval (b)
 else true
|Equal (a, b) -> 
let rec _eval x  = 
 (match x with 
|Num n -> n
|Plus (n1, n2) -> (_eval (n1) + _eval (n2))
|Minus (n1, n2) -> (_eval (n1) - _eval (n2)))
 in 
(_eval (a) = _eval (b)))

Time : 1.01742196083
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub24.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval_op op  = (19595, 
 (match (19579, op with 
|Num a -> (19580, a
|Minus (exp1, exp2) -> (19587, ((19583, (19581, eval_op ((19582, exp1) - (19586, (19584, eval_op ((19585, exp2))
|Plus (exp1, exp2) -> (19594, ((19590, (19588, eval_op ((19589, exp1) + (19593, (19591, eval_op ((19592, exp2)))
and eval f  = (19635, 
 (match (19596, f with 
|True -> (19597, true
|False -> (19598, false
|Not f -> (19602, not ((19601, (19599, eval ((19600, f))
|AndAlso (f1, f2) -> (19609, ((19605, (19603, eval ((19604, f1) && (19608, (19606, eval ((19607, f2))
|OrElse (f1, f2) -> (19616, ((19612, (19610, eval ((19611, f1) || (19615, (19613, eval ((19614, f2))
|Imply (f1, f2) -> (19624, ((19620, not ((19619, (19617, eval ((19618, f1)) && (19623, (19621, eval ((19622, f2))
|Equal (exp1, exp2) -> (19634, if (19631, ((19627, (19625, eval_op ((19626, exp1) = (19630, (19628, eval_op ((19629, exp2)) then (19632, true
 else (19633, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> (not (eval (f1)) && eval (f2))
|Equal (exp1, exp2) -> if (eval_op (exp1) = eval_op (exp2)) then true
 else false),

eval_op -> (9343 : 
Input : (op : exp) 
Output : int
Body : 
 (match op with 
|Num a -> a
|Minus (exp1, exp2) -> (eval_op (exp1) - eval_op (exp2))
|Plus (exp1, exp2) -> (eval_op (exp1) + eval_op (exp2)))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> ,
(9344, 9344) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
eval_op -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19596 : ?)

Decls : 
,Exp : Modify (19601 : ? (?))

Decls : 
,Exp : Modify (19605 : ? (?))

Decls : 
,Exp : Modify (19608 : ? (?))

Decls : 
,Exp : Modify (19612 : ? (?))

Decls : 
,Exp : Modify (19615 : ? (?))

Decls : 
,Exp : Modify (19624 : if ((? (?) = false) || (? (?) = true)) then true
 else false)

Decls : 
,Exp : Modify (19634 : (? (?) = ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval_op op  = 
 (match op with 
|Num a -> a
|Minus (exp1, exp2) -> (eval_op (exp1) - eval_op (exp2))
|Plus (exp1, exp2) -> (eval_op (exp1) + eval_op (exp2)))
and eval f  = 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> if (eval_op (exp1) = eval_op (exp2)) then true
 else false)

Time : 0.0143921375275
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub27.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19648, 
fun f -> (19647, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not a -> (19587, if (19584, ((19582, a = (19583, True) then (19585, false
 else (19586, true
|AndAlso (a, b) -> (19597, if (19594, ((19590, ((19588, a = (19589, True) && (19593, ((19591, b = (19592, True)) then (19595, true
 else (19596, false
|OrElse (a, b) -> (19607, if (19604, ((19600, ((19598, a = (19599, True) || (19603, ((19601, b = (19602, True)) then (19605, true
 else (19606, false
|Imply (a, b) -> (19618, if (19615, ((19611, ((19609, Not ((19608, a) = (19610, True) || (19614, ((19612, b = (19613, True)) then (19616, true
 else (19617, false
|Equal (a, b) -> (19646, 
let rec evalexp e  = (19635, 
 (match (19619, e with 
|Num a -> (19620, a
|Plus (a, b) -> (19627, ((19623, (19621, evalexp ((19622, a) + (19626, (19624, evalexp ((19625, b))
|Minus (a, b) -> (19634, ((19630, (19628, evalexp ((19629, a) - (19633, (19631, evalexp ((19632, b)))
 in 
(19645, if (19642, ((19638, (19636, evalexp ((19637, a) = (19641, (19639, evalexp ((19640, b)) then (19643, true
 else (19644, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9343 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not a -> if (a = True) then false
 else true
|AndAlso (a, b) -> if ((a = True) && (b = True)) then true
 else false
|OrElse (a, b) -> if ((a = True) || (b = True)) then true
 else false
|Imply (a, b) -> if ((Not (a) = True) || (b = True)) then true
 else false
|Equal (a, b) -> if (evalexp (a) = evalexp (b)) then true
 else false),

evalexp -> (9344 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num a -> a
|Plus (a, b) -> (evalexp (a) + evalexp (b))
|Minus (a, b) -> (evalexp (a) - evalexp (b)))}
Edge : 
{(9343, 9344) -> ,
(9344, 9344) -> }
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
evalexp -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19587 : not (? (?)))

Decls : 
,Exp : Modify (19597 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19607 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19609 : ? (?))

Decls : 
,Exp : Modify (19610 : false)

Decls : 
,Exp : Modify (19612 : ? (?))

Decls : 
,Exp : Modify (19613 : true)

Decls : 
,Exp : Modify (19619 : ?)

Decls : 
,Exp : Modify (19620 : ?)

Decls : 
,Exp : Modify (19623 : ? (?))

Decls : 
,Exp : Modify (19626 : ? (?))

Decls : 
,Exp : Modify (19630 : ? (?))

Decls : 
,Exp : Modify (19633 : ? (?))

Decls : 
,Exp : Modify (19645 : (? (?) = ? (?)))

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub32.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19647, 
fun f -> (19646, 
let rec calculate f2  = (19595, 
 (match (19579, f2 with 
|Num i -> (19580, i
|Plus (e1, e2) -> (19587, ((19583, (19581, calculate ((19582, e1) + (19586, (19584, calculate ((19585, e2))
|Minus (e1, e2) -> (19594, ((19590, (19588, calculate ((19589, e1) - (19593, (19591, calculate ((19592, e2)))
 in 
(19645, 
 (match (19596, f with 
|True -> (19597, true
|False -> (19598, false
|Not f -> (19604, if (19601, ((19599, f = (19600, True) then (19602, false
 else (19603, true
|AndAlso (f1, f2) -> (19614, if (19611, ((19607, ((19605, f1 = (19606, True) && (19610, ((19608, f2 = (19609, True)) then (19612, true
 else (19613, false
|OrElse (f1, f2) -> (19624, if (19621, ((19617, ((19615, f1 = (19616, True) || (19620, ((19618, f2 = (19619, True)) then (19622, true
 else (19623, false
|Imply (f1, f2) -> (19634, if (19631, ((19627, ((19625, f1 = (19626, True) && (19630, ((19628, f2 = (19629, False)) then (19632, false
 else (19633, true
|Equal (e1, e2) -> (19644, if (19641, ((19637, (19635, calculate ((19636, e1) = (19640, (19638, calculate ((19639, e2)) then (19642, true
 else (19643, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{calculate -> (9344 : 
Input : (f2 : exp) 
Output : int
Body : 
 (match f2 with 
|Num i -> i
|Plus (e1, e2) -> (calculate (e1) + calculate (e2))
|Minus (e1, e2) -> (calculate (e1) - calculate (e2))),

eval -> (9343 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> if (f = True) then false
 else true
|AndAlso (f1, f2) -> if ((f1 = True) && (f2 = True)) then true
 else false
|OrElse (f1, f2) -> if ((f1 = True) || (f2 = True)) then true
 else false
|Imply (f1, f2) -> if ((f1 = True) && (f2 = False)) then false
 else true
|Equal (e1, e2) -> if (calculate (e1) = calculate (e2)) then true
 else false)}
Edge : 
{(9343, 9344) -> ,
(9344, 9344) -> }
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{calculate -> evalExp,
eval -> eval}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19596 : ?)

Decls : 
,Exp : Modify (19604 : not (? (?)))

Decls : 
,Exp : Modify (19614 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19624 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19631 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19632 : true)

Decls : 
,Exp : Modify (19633 : false)

Decls : 
,Exp : Modify (19644 : (? (?) = ? (?)))

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub33.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec expfun e  = (19595, 
 (match (19579, e with 
|Num n -> (19580, n
|Plus (e1, e2) -> (19587, ((19583, (19581, expfun ((19582, e1) + (19586, (19584, expfun ((19585, e2))
|Minus (e1, e2) -> (19594, ((19590, (19588, expfun ((19589, e1) - (19593, (19591, expfun ((19592, e2)))

let rec eval f  = (19645, 
 (match (19596, f with 
|True -> (19597, true
|False -> (19598, false
|Not f1 -> (19604, if (19601, ((19599, f1 = (19600, True) then (19602, false
 else (19603, true
|AndAlso (f1, f2) -> (19614, if (19611, ((19607, ((19605, f1 = (19606, True) && (19610, ((19608, f2 = (19609, True)) then (19612, true
 else (19613, false
|OrElse (f1, f2) -> (19624, if (19621, ((19617, ((19615, f1 = (19616, True) || (19620, ((19618, f2 = (19619, True)) then (19622, true
 else (19623, false
|Imply (f1, f2) -> (19634, if (19631, ((19627, ((19625, f1 = (19626, True) && (19630, ((19628, f2 = (19629, False)) then (19632, false
 else (19633, true
|Equal (e1, e2) -> (19644, if (19641, ((19637, (19635, expfun ((19636, e1) = (19640, (19638, expfun ((19639, e2)) then (19642, true
 else (19643, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f1 -> if (f1 = True) then false
 else true
|AndAlso (f1, f2) -> if ((f1 = True) && (f2 = True)) then true
 else false
|OrElse (f1, f2) -> if ((f1 = True) || (f2 = True)) then true
 else false
|Imply (f1, f2) -> if ((f1 = True) && (f2 = False)) then false
 else true
|Equal (e1, e2) -> if (expfun (e1) = expfun (e2)) then true
 else false),

expfun -> (9343 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num n -> n
|Plus (e1, e2) -> (expfun (e1) + expfun (e2))
|Minus (e1, e2) -> (expfun (e1) - expfun (e2)))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
expfun -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19596 : ?)

Decls : 
,Exp : Modify (19604 : not (? (?)))

Decls : 
,Exp : Modify (19614 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19624 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19631 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19632 : true)

Decls : 
,Exp : Modify (19633 : false)

Decls : 
,Exp : Modify (19644 : (? (?) = ? (?)))

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub36.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19612, 
fun f -> (19611, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not x -> (19585, not ((19584, (19582, eval ((19583, x))
|AndAlso (x, y) -> (19592, ((19588, (19586, eval ((19587, x) && (19591, (19589, eval ((19590, y))
|OrElse (x, y) -> (19599, ((19595, (19593, eval ((19594, x) || (19598, (19596, eval ((19597, y))
|Imply (x, y) -> (19607, ((19603, not ((19602, (19600, eval ((19601, x)) || (19606, (19604, eval ((19605, y))
|Equal (x, y) -> (19610, ((19608, x = (19609, y))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not x -> not (eval (x))
|AndAlso (x, y) -> (eval (x) && eval (y))
|OrElse (x, y) -> (eval (x) || eval (y))
|Imply (x, y) -> (not (eval (x)) || eval (y))
|Equal (x, y) -> (x = y))}
Edge : 
{(9079, 9079) -> }
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19584 : ? (?))

Decls : 
,Exp : Modify (19588 : ? (?))

Decls : 
,Exp : Modify (19591 : ? (?))

Decls : 
,Exp : Modify (19595 : ? (?))

Decls : 
,Exp : Modify (19598 : ? (?))

Decls : 
,Exp : Modify (19607 : if ((? (?) = false) || (? (?) = true)) then true
 else false)

Decls : 
,Exp : Modify (19608 : ? (?))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
,Exp : Modify (19609 : ? (?))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not x -> not (eval (x))
|AndAlso (x, y) -> (eval (x) && eval (y))
|OrElse (x, y) -> (eval (x) || eval (y))
|Imply (x, y) -> (not (eval (x)) || eval (y))
|Equal (x, y) -> (evalExp (x) = evalExp (y)))

Time : 0.0437109470367
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub38.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec getInt  : (exp -> int) = (19596, 
fun number -> (19595, 
 (match (19579, number with 
|Num x -> (19580, x
|Plus (a, b) -> (19587, ((19583, (19581, getInt ((19582, a) + (19586, (19584, getInt ((19585, b))
|Minus (a, b) -> (19594, ((19590, (19588, getInt ((19589, a) - (19593, (19591, getInt ((19592, b)))

let rec getExpression  : (exp -> exp) = (19615, 
fun f -> (19614, 
 (match (19597, f with 
|Num x -> (19599, Num ((19598, x)
|Plus (a, b) -> (19606, Num ((19605, (19600, getInt ((19604, Plus ((19603, ((19601, a, (19602, b))))
|Minus (a, b) -> (19613, Num ((19612, (19607, getInt ((19611, Minus ((19610, ((19608, a, (19609, b)))))

let rec getValue  : (formula -> formula) = (19753, 
fun f -> (19752, 
 (match (19616, f with 
|True -> (19617, True
|False -> (19618, False
|Not x -> (19634, if (19621, ((19619, x = (19620, True) then (19622, False
 else (19633, if (19625, ((19623, x = (19624, False) then (19626, True
 else (19632, (19627, getValue ((19631, Not ((19630, (19628, getValue ((19629, x)))
|AndAlso (x, y) -> (19662, if (19641, ((19637, ((19635, x = (19636, True) && (19640, ((19638, y = (19639, True)) then (19642, True
 else (19661, if (19649, ((19645, ((19643, x = (19644, False) || (19648, ((19646, y = (19647, False)) then (19650, False
 else (19660, (19651, getValue ((19659, AndAlso ((19658, ((19654, (19652, getValue ((19653, x), (19657, (19655, getValue ((19656, y))))
|OrElse (x, y) -> (19708, if (19669, ((19665, ((19663, x = (19664, True) && (19668, ((19666, y = (19667, False)) then (19670, True
 else (19707, if (19677, ((19673, ((19671, x = (19672, False) && (19676, ((19674, y = (19675, True)) then (19678, True
 else (19706, if (19685, ((19681, ((19679, x = (19680, False) && (19684, ((19682, y = (19683, False)) then (19686, False
 else (19705, if (19693, ((19689, ((19687, x = (19688, True) && (19692, ((19690, y = (19691, True)) then (19694, False
 else (19704, (19695, getValue ((19703, OrElse ((19702, ((19698, (19696, getValue ((19697, x), (19701, (19699, getValue ((19700, y))))
|Imply (x, y) -> (19741, if (19711, ((19709, x = (19710, False) then (19712, True
 else (19740, if (19719, ((19715, ((19713, x = (19714, True) && (19718, ((19716, y = (19717, True)) then (19720, True
 else (19739, if (19727, ((19723, ((19721, x = (19722, True) && (19726, ((19724, y = (19725, False)) then (19728, False
 else (19738, (19729, getValue ((19737, Imply ((19736, ((19732, (19730, getValue ((19731, x), (19735, (19733, getValue ((19734, y))))
|Equal (ex1, ex2) -> (19751, if (19748, ((19744, (19742, getExpression ((19743, ex1) = (19747, (19745, getExpression ((19746, ex2)) then (19749, True
 else (19750, False)

let rec eval  : (formula -> bool) = (19769, 
fun f -> (19768, if (19756, ((19754, f = (19755, True) then (19757, true
 else (19767, if (19760, ((19758, f = (19759, False) then (19761, false
 else (19766, (19762, eval ((19765, (19763, getValue ((19764, f))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9874 : 
Input : (f : formula) 
Output : bool
Body : if (f = True) then true
 else if (f = False) then false
 else eval (getValue (f)),

getExpression -> (9872 : 
Input : (f : exp) 
Output : exp
Body : 
 (match f with 
|Num x -> Num (x)
|Plus (a, b) -> Num (getInt (Plus ((a, b))))
|Minus (a, b) -> Num (getInt (Minus ((a, b))))),

getInt -> (9871 : 
Input : (number : exp) 
Output : int
Body : 
 (match number with 
|Num x -> x
|Plus (a, b) -> (getInt (a) + getInt (b))
|Minus (a, b) -> (getInt (a) - getInt (b))),

getValue -> (9873 : 
Input : (f : formula) 
Output : formula
Body : 
 (match f with 
|True -> True
|False -> False
|Not x -> if (x = True) then False
 else if (x = False) then True
 else getValue (Not (getValue (x)))
|AndAlso (x, y) -> if ((x = True) && (y = True)) then True
 else if ((x = False) || (y = False)) then False
 else getValue (AndAlso ((getValue (x), getValue (y))))
|OrElse (x, y) -> if ((x = True) && (y = False)) then True
 else if ((x = False) && (y = True)) then True
 else if ((x = False) && (y = False)) then False
 else if ((x = True) && (y = True)) then False
 else getValue (OrElse ((getValue (x), getValue (y))))
|Imply (x, y) -> if (x = False) then True
 else if ((x = True) && (y = True)) then True
 else if ((x = True) && (y = False)) then False
 else getValue (Imply ((getValue (x), getValue (y))))
|Equal (ex1, ex2) -> if (getExpression (ex1) = getExpression (ex2)) then True
 else False)}
Edge : 
{(9871, 9871) -> ,
(9872, 9871) -> ,
(9873, 9872) -> ,
(9873, 9873) -> ,
(9874, 9873) -> ,
(9874, 9874) -> }
Starting : 9874
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9837 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9836 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9836, 9836) -> ,
(9837, 9836) -> ,
(9837, 9837) -> }
Starting : 9837
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
getInt -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19768 : 
 (match ? with 
|True -> true
|False -> false
|Not f -> not (? (?))
|AndAlso (f1, f2) -> (? (?) && ? (?))
|OrElse (f1, f2) -> (? (?) || ? (?))
|Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false
|Equal (exp1, exp2) -> (? (?) = ? (?))))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec getInt  : (exp -> int) = 
fun number -> 
 (match number with 
|Num x -> x
|Plus (a, b) -> (getInt (a) + getInt (b))
|Minus (a, b) -> (getInt (a) - getInt (b)))

let rec getExpression  : (exp -> exp) = 
fun f -> 
 (match f with 
|Num x -> Num (x)
|Plus (a, b) -> Num (getInt (Plus ((a, b))))
|Minus (a, b) -> Num (getInt (Minus ((a, b)))))

let rec getValue  : (formula -> formula) = 
fun f -> 
 (match f with 
|True -> True
|False -> False
|Not x -> if (x = True) then False
 else if (x = False) then True
 else getValue (Not (getValue (x)))
|AndAlso (x, y) -> if ((x = True) && (y = True)) then True
 else if ((x = False) || (y = False)) then False
 else getValue (AndAlso ((getValue (x), getValue (y))))
|OrElse (x, y) -> if ((x = True) && (y = False)) then True
 else if ((x = False) && (y = True)) then True
 else if ((x = False) && (y = False)) then False
 else if ((x = True) && (y = True)) then False
 else getValue (OrElse ((getValue (x), getValue (y))))
|Imply (x, y) -> if (x = False) then True
 else if ((x = True) && (y = True)) then True
 else if ((x = True) && (y = False)) then False
 else getValue (Imply ((getValue (x), getValue (y))))
|Equal (ex1, ex2) -> if (getExpression (ex1) = getExpression (ex2)) then True
 else False)

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f1))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (getExpression (exp1) = getExpression (exp2)))

Time : 1.95086503029
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub41.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let andAlso  : ((bool * bool) -> bool) = (19583, 
fun f -> (19582, 
 (match (19579, f with 
|(true, true) -> (19580, true
|_ -> (19581, false)

let orElse  : ((bool * bool) -> bool) = (19588, 
fun f -> (19587, 
 (match (19584, f with 
|(false, false) -> (19585, false
|_ -> (19586, true)

let imply  : ((bool * bool) -> bool) = (19593, 
fun f -> (19592, 
 (match (19589, f with 
|(frue, false) -> (19590, false
|_ -> (19591, true)

let rec ca  : (exp -> int) = (19611, 
fun f -> (19610, 
 (match (19594, f with 
|Num a -> (19595, a
|Plus (a, b) -> (19602, ((19598, (19596, ca ((19597, a) + (19601, (19599, ca ((19600, b))
|Minus (a, b) -> (19609, ((19605, (19603, ca ((19604, a) - (19608, (19606, ca ((19607, b)))

let equal  : ((exp * exp) -> bool) = (19624, 
fun f -> (19623, 
 (match (19612, f with 
|(a, b) -> (19622, if (19619, ((19615, (19613, ca ((19614, a) = (19618, (19616, ca ((19617, b)) then (19620, true
 else (19621, false)

let rec eval  : (formula -> bool) = (19664, 
fun f -> (19663, 
 (match (19625, f with 
|True -> (19626, true
|False -> (19627, false
|AndAlso (a, b) -> (19636, (19628, andAlso ((19635, ((19631, (19629, eval ((19630, a), (19634, (19632, eval ((19633, b)))
|OrElse (a, b) -> (19645, (19637, orElse ((19644, ((19640, (19638, eval ((19639, a), (19643, (19641, eval ((19642, b)))
|Imply (a, b) -> (19654, (19646, imply ((19653, ((19649, (19647, eval ((19648, a), (19652, (19650, eval ((19651, b)))
|Equal (a, b) -> (19659, (19655, equal ((19658, ((19656, a, (19657, b))
|_ -> (19662, raise (19661, Failure ((19660, "eval requires formula")))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub72.ml Score : 4
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let imply x  = (19422, 
 (match (19419, x with 
|(true, false) -> (19420, false
|_ -> (19421, true)

let not2 x  = (19426, 
 (match (19423, x with 
|true -> (19424, false
|false -> (19425, true)

let and_Also x  = (19430, 
 (match (19427, x with 
|(true, true) -> (19428, true
|_ -> (19429, false)

let or_Else x  = (19434, 
 (match (19431, x with 
|(false, false) -> (19432, false
|_ -> (19433, true)

let rec exp  : (exp -> int) = (19452, 
fun f -> (19451, 
 (match (19435, f with 
|Num n -> (19436, n
|Plus (exp1, exp2) -> (19443, ((19439, (19437, exp ((19438, exp1) + (19442, (19440, exp ((19441, exp2))
|Minus (exp1, exp2) -> (19450, ((19446, (19444, exp ((19445, exp1) - (19449, (19447, exp ((19448, exp2)))

let equal  : ((int * int) -> bool) = (19456, 
fun (x, y) -> (19455, ((19453, x = (19454, y)

let rec eval  : (formula -> bool) = (19501, 
fun f -> (19500, 
 (match (19457, f with 
|True -> (19458, true
|False -> (19459, false
|Not formula -> (19463, not ((19462, (19460, eval ((19461, formula))
|Imply (formula1, formula2) -> (19472, (19464, imply ((19471, ((19467, (19465, eval ((19466, formula1), (19470, (19468, eval ((19469, formula2)))
|AndAlso (formula1, formula2) -> (19481, (19473, and_Also ((19480, ((19476, (19474, eval ((19475, formula1), (19479, (19477, eval ((19478, formula2)))
|OrElse (formula1, formula2) -> (19490, (19482, or_Else ((19489, ((19485, (19483, eval ((19484, formula1), (19488, (19486, eval ((19487, formula2)))
|Equal (exp1, exp2) -> (19499, (19491, equal ((19498, ((19494, (19492, exp ((19493, exp1), (19497, (19495, exp ((19496, exp2))))

let _  = (19516, (19502, eval ((19515, OrElse ((19514, ((19504, Not ((19503, True), (19513, Imply ((19512, ((19505, True, (19511, Equal ((19510, ((19507, Num ((19506, 3), (19509, Num ((19508, 8))))))))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{andAlso -> (10409 : 
Input : (f : (bool * bool)) 
Output : bool
Body : 
 (match f with 
|(true, true) -> true
|_ -> false),

ca -> (10412 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num a -> a
|Plus (a, b) -> (ca (a) + ca (b))
|Minus (a, b) -> (ca (a) - ca (b))),

equal -> (10413 : 
Input : (f : (exp * exp)) 
Output : bool
Body : 
 (match f with 
|(a, b) -> if (ca (a) = ca (b)) then true
 else false),

eval -> (10414 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|AndAlso (a, b) -> andAlso ((eval (a), eval (b)))
|OrElse (a, b) -> orElse ((eval (a), eval (b)))
|Imply (a, b) -> imply ((eval (a), eval (b)))
|Equal (a, b) -> equal ((a, b))
|_ -> raise Failure ("eval requires formula")),

imply -> (10411 : 
Input : (f : (#207680 * bool)) 
Output : bool
Body : 
 (match f with 
|(frue, false) -> false
|_ -> true),

orElse -> (10410 : 
Input : (f : (bool * bool)) 
Output : bool
Body : 
 (match f with 
|(false, false) -> false
|_ -> true)}
Edge : 
{(10412, 10412) -> ,
(10413, 10412) -> ,
(10414, 10409) -> ,
(10414, 10410) -> ,
(10414, 10411) -> ,
(10414, 10413) -> ,
(10414, 10414) -> }
Starting : 10414
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{and_Also -> (10366 : 
Input : (x : (bool * bool)) 
Output : bool
Body : 
 (match x with 
|(true, true) -> true
|_ -> false),

equal -> (10369 : 
Input : (x, (y : int)) 
Output : bool
Body : (x = y),

eval -> (10370 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not formula -> not (eval (formula))
|Imply (formula1, formula2) -> imply ((eval (formula1), eval (formula2)))
|AndAlso (formula1, formula2) -> and_Also ((eval (formula1), eval (formula2)))
|OrElse (formula1, formula2) -> or_Else ((eval (formula1), eval (formula2)))
|Equal (exp1, exp2) -> equal ((exp (exp1), exp (exp2)))),

exp -> (10368 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (exp (exp1) + exp (exp2))
|Minus (exp1, exp2) -> (exp (exp1) - exp (exp2))),

imply -> (10364 : 
Input : (x : (bool * bool)) 
Output : bool
Body : 
 (match x with 
|(true, false) -> false
|_ -> true),

or_Else -> (10367 : 
Input : (x : (bool * bool)) 
Output : bool
Body : 
 (match x with 
|(false, false) -> false
|_ -> true)}
Edge : 
{(10368, 10368) -> ,
(10370, 10364) -> ,
(10370, 10366) -> ,
(10370, 10367) -> ,
(10370, 10368) -> ,
(10370, 10369) -> ,
(10370, 10370) -> }
Starting : 10370
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{andAlso -> and_Also,
ca -> exp,
eval -> eval,
imply -> imply,
orElse -> or_Else}
------Remainings in solution ------
{equal}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19584 : ?)

Decls : 
,Exp : Modify (19589 : ?)

Decls : 
,Exp : Modify (19594 : ?)

Decls : 
,Exp : Modify (19595 : ?)

Decls : 
,Exp : Modify (19598 : ? (?))

Decls : 
,Exp : Modify (19601 : ? (?))

Decls : 
,Exp : Modify (19605 : ? (?))

Decls : 
,Exp : Modify (19608 : ? (?))

Decls : 
,Exp : Modify (19625 : ?)

Decls : 
,Exp : Modify (19636 : ? ((? (?), ? (?))))

Decls : 
,Exp : Modify (19645 : ? ((? (?), ? (?))))

Decls : 
,Exp : Modify (19654 : ? ((? (?), ? (?))))

Decls : 
,Exp : Modify (19659 : ? ((? (?), ? (?))))

Decls : 

let equal (x, (y : int))  : bool = (x = y)

Callers : {eval}
,Exp : Insert ((true, false) -> false At label 19592

Decls : 
,Exp : Insert (Not formula -> not (? (?)) At label 19663

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub44.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19580, 
fun f -> (19579, true

let rec eval f  = (19648, 
let rec expin f  = (19597, 
 (match (19581, f with 
|Num n -> (19582, n
|Plus (e1, e2) -> (19589, ((19585, (19583, expin ((19584, e1) + (19588, (19586, expin ((19587, e2))
|Minus (e1, e2) -> (19596, ((19592, (19590, expin ((19591, e1) - (19595, (19593, expin ((19594, e2)))
 in 
(19647, 
 (match (19598, f with 
|True -> (19599, true
|False -> (19600, false
|Not f1 -> (19606, if (19603, ((19601, f1 = (19602, True) then (19604, false
 else (19605, true
|AndAlso (f1, f2) -> (19616, if (19613, ((19609, ((19607, f1 = (19608, True) && (19612, ((19610, f2 = (19611, True)) then (19614, true
 else (19615, false
|OrElse (f1, f2) -> (19626, if (19623, ((19619, ((19617, f1 = (19618, True) || (19622, ((19620, f2 = (19621, True)) then (19624, true
 else (19625, false
|Imply (f1, f2) -> (19636, if (19633, ((19629, ((19627, f1 = (19628, True) && (19632, ((19630, f2 = (19631, False)) then (19634, false
 else (19635, true
|Equal (e1, e2) -> (19646, if (19643, ((19639, (19637, expin ((19638, e1) = (19642, (19640, expin ((19641, e2)) then (19644, true
 else (19645, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9608 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f1 -> if (f1 = True) then false
 else true
|AndAlso (f1, f2) -> if ((f1 = True) && (f2 = True)) then true
 else false
|OrElse (f1, f2) -> if ((f1 = True) || (f2 = True)) then true
 else false
|Imply (f1, f2) -> if ((f1 = True) && (f2 = False)) then false
 else true
|Equal (e1, e2) -> if (expin (e1) = expin (e2)) then true
 else false),

expin -> (9609 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (e1, e2) -> (expin (e1) + expin (e2))
|Minus (e1, e2) -> (expin (e1) - expin (e2)))}
Edge : 
{(9608, 9609) -> ,
(9609, 9609) -> }
Starting : 9608
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9573 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9572 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9572, 9572) -> ,
(9573, 9572) -> ,
(9573, 9573) -> }
Starting : 9573
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
expin -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19581 : ?)

Decls : 
,Exp : Modify (19582 : ?)

Decls : 
,Exp : Modify (19585 : ? (?))

Decls : 
,Exp : Modify (19588 : ? (?))

Decls : 
,Exp : Modify (19592 : ? (?))

Decls : 
,Exp : Modify (19595 : ? (?))

Decls : 
,Exp : Modify (19598 : ?)

Decls : 
,Exp : Modify (19606 : not (? (?)))

Decls : 
,Exp : Modify (19616 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19626 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19633 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19634 : true)

Decls : 
,Exp : Modify (19635 : false)

Decls : 
,Exp : Modify (19646 : (? (?) = ? (?)))

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub45.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------
type exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int
type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True

let rec eval_exp a  = (19595, 
 (match (19579, a with 
|Num n -> (19580, n
|Plus (n1, n2) -> (19587, ((19583, (19581, eval_exp ((19582, n1) + (19586, (19584, eval_exp ((19585, n2))
|Minus (n1, n2) -> (19594, ((19590, (19588, eval_exp ((19589, n1) + (19593, (19591, eval_exp ((19592, n2)))

let rec eval thing  = (19643, 
 (match (19596, thing with 
|True -> (19597, true
|False -> (19598, false
|Not a -> (19604, if (19601, (19599, eval ((19600, a) then (19602, false
 else (19603, true
|AndAlso (a, b) -> (19611, ((19607, (19605, eval ((19606, a) && (19610, (19608, eval ((19609, b))
|OrElse (a, b) -> (19618, ((19614, (19612, eval ((19613, a) || (19617, (19615, eval ((19616, b))
|Imply (a, b) -> (19632, if (19629, ((19623, ((19621, (19619, eval ((19620, a) = (19622, true) && (19628, ((19626, (19624, eval ((19625, b) = (19627, false)) then (19630, false
 else (19631, true
|Equal (a, b) -> (19642, if (19639, ((19635, (19633, eval_exp ((19634, a) = (19638, (19636, eval_exp ((19637, b)) then (19640, true
 else (19641, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (thing : formula) 
Output : bool
Body : 
 (match thing with 
|True -> true
|False -> false
|Not a -> if eval (a) then false
 else true
|AndAlso (a, b) -> (eval (a) && eval (b))
|OrElse (a, b) -> (eval (a) || eval (b))
|Imply (a, b) -> if ((eval (a) = true) && (eval (b) = false)) then false
 else true
|Equal (a, b) -> if (eval_exp (a) = eval_exp (b)) then true
 else false),

eval_exp -> (9343 : 
Input : (a : exp) 
Output : int
Body : 
 (match a with 
|Num n -> n
|Plus (n1, n2) -> (eval_exp (n1) + eval_exp (n2))
|Minus (n1, n2) -> (eval_exp (n1) + eval_exp (n2)))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> ,
(9344, 9344) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
eval_exp -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19594 : (? (?) - ? (?)))

Decls : 
,Exp : Modify (19596 : ?)

Decls : 
,Exp : Modify (19604 : not (? (?)))

Decls : 
,Exp : Modify (19607 : ? (?))

Decls : 
,Exp : Modify (19610 : ? (?))

Decls : 
,Exp : Modify (19614 : ? (?))

Decls : 
,Exp : Modify (19617 : ? (?))

Decls : 
,Exp : Modify (19629 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19630 : true)

Decls : 
,Exp : Modify (19631 : false)

Decls : 
,Exp : Modify (19642 : (? (?) = ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------
type exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int
type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True

let rec eval_exp a  = 
 (match a with 
|Num n -> n
|Plus (n1, n2) -> (eval_exp (n1) + eval_exp (n2))
|Minus (n1, n2) -> (eval_exp (n1) - eval_exp (n2)))

let rec eval thing  = 
 (match thing with 
|True -> true
|False -> false
|Not a -> if eval (a) then false
 else true
|AndAlso (a, b) -> (eval (a) && eval (b))
|OrElse (a, b) -> (eval (a) || eval (b))
|Imply (a, b) -> if ((eval (a) = true) && (eval (b) = false)) then false
 else true
|Equal (a, b) -> if (eval_exp (a) = eval_exp (b)) then true
 else false)

Time : 0.0124909877777
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub46.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19647, 
fun f -> (19646, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not ev -> (19587, if (19584, ((19582, ev = (19583, True) then (19585, false
 else (19586, true
|AndAlso (ev1, ev2) -> (19597, if (19594, ((19590, ((19588, ev1 = (19589, True) && (19593, ((19591, ev2 = (19592, True)) then (19595, true
 else (19596, false
|OrElse (ev1, ev2) -> (19607, if (19604, ((19600, ((19598, ev1 = (19599, False) && (19603, ((19601, ev2 = (19602, False)) then (19605, false
 else (19606, true
|Imply (ev1, ev2) -> (19617, if (19614, ((19610, ((19608, ev1 = (19609, True) && (19613, ((19611, ev2 = (19612, False)) then (19615, false
 else (19616, true
|Equal (in1, in2) -> (19645, 
let rec pl_mi x  = (19634, 
 (match (19618, x with 
|Num n -> (19619, n
|Plus (n1, n2) -> (19626, ((19622, (19620, pl_mi ((19621, n1) + (19625, (19623, pl_mi ((19624, n2))
|Minus (n1, n2) -> (19633, ((19629, (19627, pl_mi ((19628, n1) - (19632, (19630, pl_mi ((19631, n2)))
 in 
(19644, if (19641, ((19637, (19635, pl_mi ((19636, in1) = (19640, (19638, pl_mi ((19639, in2)) then (19642, true
 else (19643, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9343 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not ev -> if (ev = True) then false
 else true
|AndAlso (ev1, ev2) -> if ((ev1 = True) && (ev2 = True)) then true
 else false
|OrElse (ev1, ev2) -> if ((ev1 = False) && (ev2 = False)) then false
 else true
|Imply (ev1, ev2) -> if ((ev1 = True) && (ev2 = False)) then false
 else true
|Equal (in1, in2) -> if (pl_mi (in1) = pl_mi (in2)) then true
 else false),

pl_mi -> (9344 : 
Input : (x : exp) 
Output : int
Body : 
 (match x with 
|Num n -> n
|Plus (n1, n2) -> (pl_mi (n1) + pl_mi (n2))
|Minus (n1, n2) -> (pl_mi (n1) - pl_mi (n2)))}
Edge : 
{(9343, 9344) -> ,
(9344, 9344) -> }
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
pl_mi -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19587 : not (? (?)))

Decls : 
,Exp : Modify (19597 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19607 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19614 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19615 : true)

Decls : 
,Exp : Modify (19616 : false)

Decls : 
,Exp : Modify (19618 : ?)

Decls : 
,Exp : Modify (19619 : ?)

Decls : 
,Exp : Modify (19622 : ? (?))

Decls : 
,Exp : Modify (19625 : ? (?))

Decls : 
,Exp : Modify (19629 : ? (?))

Decls : 
,Exp : Modify (19632 : ? (?))

Decls : 
,Exp : Modify (19644 : (? (?) = ? (?)))

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub47.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19580, 
fun f -> (19579, true

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : f 
Output : bool
Body : true}
Edge : 
empty
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : 
 (match ? with 
|True -> true
|False -> false
|Not f -> not (? (?))
|AndAlso (f1, f2) -> (? (?) && ? (?))
|OrElse (f1, f2) -> (? (?) || ? (?))
|Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false
|Equal (exp1, exp2) -> (? (?) = ? (?))))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f1))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2)))

Time : 0.77672791481
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub48.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalexp exp  = (19603, 
 (match (19579, exp with 
|Num n -> (19580, n
|Plus (n1, n2) -> (19591, 
 (match (19583, ((19581, n1, (19582, n2) with 
|(_, _) -> (19590, ((19586, (19584, evalexp ((19585, n1) + (19589, (19587, evalexp ((19588, n2)))
|Minus (n1, n2) -> (19602, 
 (match (19594, ((19592, n1, (19593, n2) with 
|(_, _) -> (19601, ((19597, (19595, evalexp ((19596, n1) - (19600, (19598, evalexp ((19599, n2))))

let rec eval  : (formula -> bool) = (19674, 
fun f -> (19673, 
 (match (19604, f with 
|True -> (19605, true
|False -> (19606, false
|Not f' -> (19613, 
 (match (19607, f' with 
|True -> (19608, false
|False -> (19609, true
|_ -> (19612, (19610, eval ((19611, f'))
|AndAlso (f1', f2') -> (19627, 
 (match (19616, ((19614, f1', (19615, f2') with 
|(True, True) -> (19617, true
|(False, _) -> (19618, false
|(_, False) -> (19619, false
|(_, _) -> (19626, ((19622, (19620, eval ((19621, f1') && (19625, (19623, eval ((19624, f2')))
|OrElse (f1', f2') -> (19642, 
 (match (19630, ((19628, f1', (19629, f2') with 
|(True, True) -> (19631, true
|(True, False) -> (19632, true
|(False, True) -> (19633, true
|(False, False) -> (19634, false
|(_, _) -> (19641, ((19637, (19635, eval ((19636, f1') || (19640, (19638, eval ((19639, f2')))
|Imply (f1', f2') -> (19658, 
 (match (19645, ((19643, f1', (19644, f2') with 
|(True, True) -> (19646, true
|(True, False) -> (19647, false
|(False, True) -> (19648, true
|(False, False) -> (19649, true
|(_, _) -> (19657, ((19653, (19650, eval ((19652, Not ((19651, f1')) || (19656, (19654, eval ((19655, f2')))
|Equal (exp1, exp2) -> (19672, 
 (match (19665, ((19661, (19659, evalexp ((19660, exp1), (19664, (19662, evalexp ((19663, exp2)) with 
|(a, b) -> (19671, if (19668, ((19666, a = (19667, b) then (19669, true
 else (19670, false))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f' -> 
 (match f' with 
|True -> false
|False -> true
|_ -> eval (f'))
|AndAlso (f1', f2') -> 
 (match (f1', f2') with 
|(True, True) -> true
|(False, _) -> false
|(_, False) -> false
|(_, _) -> (eval (f1') && eval (f2')))
|OrElse (f1', f2') -> 
 (match (f1', f2') with 
|(True, True) -> true
|(True, False) -> true
|(False, True) -> true
|(False, False) -> false
|(_, _) -> (eval (f1') || eval (f2')))
|Imply (f1', f2') -> 
 (match (f1', f2') with 
|(True, True) -> true
|(True, False) -> false
|(False, True) -> true
|(False, False) -> true
|(_, _) -> (eval (Not (f1')) || eval (f2')))
|Equal (exp1, exp2) -> 
 (match (evalexp (exp1), evalexp (exp2)) with 
|(a, b) -> if (a = b) then true
 else false)),

evalexp -> (9343 : 
Input : (exp : exp) 
Output : int
Body : 
 (match exp with 
|Num n -> n
|Plus (n1, n2) -> 
 (match (n1, n2) with 
|(_, _) -> (evalexp (n1) + evalexp (n2)))
|Minus (n1, n2) -> 
 (match (n1, n2) with 
|(_, _) -> (evalexp (n1) - evalexp (n2))))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> ,
(9344, 9344) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
evalexp -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19591 : (? (?) + ? (?)))

Decls : 
,Exp : Modify (19602 : (? (?) - ? (?)))

Decls : 
,Exp : Modify (19604 : ?)

Decls : 
,Exp : Modify (19613 : not (? (?)))

Decls : 
,Exp : Modify (19627 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19642 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19658 : if ((? (?) = false) || (? (?) = true)) then true
 else false)

Decls : 
,Exp : Modify (19672 : (? (?) = ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalexp exp  = 
 (match exp with 
|Num n -> n
|Plus (n1, n2) -> 
 (match (n1, n2) with 
|(_, _) -> (evalexp (n1) + evalexp (n2)))
|Minus (n1, n2) -> 
 (match (n1, n2) with 
|(_, _) -> (evalexp (n1) - evalexp (n2))))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f' -> not (eval (f'))
|AndAlso (f1', f2') -> 
 (match (f1', f2') with 
|(True, True) -> true
|(False, _) -> false
|(_, False) -> false
|(_, _) -> (eval (f1') && eval (f2')))
|OrElse (f1', f2') -> 
 (match (f1', f2') with 
|(True, True) -> true
|(True, False) -> true
|(False, True) -> true
|(False, False) -> false
|(_, _) -> (eval (f1') || eval (f2')))
|Imply (f1', f2') -> 
 (match (f1', f2') with 
|(True, True) -> true
|(True, False) -> false
|(False, True) -> true
|(False, False) -> true
|(_, _) -> (eval (Not (f1')) || eval (f2')))
|Equal (exp1, exp2) -> 
 (match (evalexp (exp1), evalexp (exp2)) with 
|(a, b) -> if (a = b) then true
 else false))

Time : 0.00496983528137
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub51.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let imply v  = (19582, 
 (match (19579, v with 
|(true, x) -> (19580, x
|(false, x) -> (19581, true)

let rec calc e  = (19599, 
 (match (19583, e with 
|Num n -> (19584, n
|Plus (e1, e2) -> (19591, ((19587, (19585, calc ((19586, e1) + (19590, (19588, calc ((19589, e2))
|Minus (e1, e2) -> (19598, ((19594, (19592, calc ((19593, e1) - (19597, (19595, calc ((19596, e2)))

let rec eval  : (formula -> bool) = (19638, 
fun f -> (19637, 
 (match (19600, f with 
|True -> (19601, true
|False -> (19602, false
|Not fm -> (19606, not ((19605, (19603, eval ((19604, fm))
|AndAlso (fm1, fm2) -> (19613, ((19609, (19607, eval ((19608, fm1) && (19612, (19610, eval ((19611, fm2))
|OrElse (fm1, fm2) -> (19620, ((19616, (19614, eval ((19615, fm2) || (19619, (19617, eval ((19618, fm2))
|Imply (fm1, fm2) -> (19629, (19621, imply ((19628, ((19624, (19622, eval ((19623, fm1), (19627, (19625, eval ((19626, fm2)))
|Equal (e1, e2) -> (19636, ((19632, (19630, calc ((19631, e1) = (19635, (19633, calc ((19634, e2)))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub47.ml Score : 3
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let proc_imply  = (17859, 
fun imp -> (17858, 
 (match (17853, imp with 
|(true, true) -> (17854, true
|(true, false) -> (17855, false
|(false, true) -> (17856, true
|(false, false) -> (17857, true)

let rec proc_exp  = (17877, 
fun x -> (17876, 
 (match (17860, x with 
|Plus (k1, k2) -> (17867, ((17863, (17861, proc_exp ((17862, k1) + (17866, (17864, proc_exp ((17865, k2))
|Minus (k1, k2) -> (17874, ((17870, (17868, proc_exp ((17869, k1) - (17873, (17871, proc_exp ((17872, k2))
|Num k -> (17875, k)

let rec eval  : (formula -> bool) = (17916, 
fun f -> (17915, 
 (match (17878, f with 
|True -> (17879, true
|False -> (17880, false
|Not k -> (17884, not ((17883, (17881, eval ((17882, k))
|AndAlso (k1, k2) -> (17891, ((17887, (17885, eval ((17886, k1) && (17890, (17888, eval ((17889, k2))
|OrElse (k1, k2) -> (17898, ((17894, (17892, eval ((17893, k1) || (17897, (17895, eval ((17896, k2))
|Imply (k1, k2) -> (17907, (17899, proc_imply ((17906, ((17902, (17900, eval ((17901, k1), (17905, (17903, eval ((17904, k2)))
|Equal (k1, k2) -> (17914, ((17910, (17908, proc_exp ((17909, k1) = (17913, (17911, proc_exp ((17912, k2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{calc -> (9610 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num n -> n
|Plus (e1, e2) -> (calc (e1) + calc (e2))
|Minus (e1, e2) -> (calc (e1) - calc (e2))),

eval -> (9611 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not fm -> not (eval (fm))
|AndAlso (fm1, fm2) -> (eval (fm1) && eval (fm2))
|OrElse (fm1, fm2) -> (eval (fm2) || eval (fm2))
|Imply (fm1, fm2) -> imply ((eval (fm1), eval (fm2)))
|Equal (e1, e2) -> (calc (e1) = calc (e2))),

imply -> (9609 : 
Input : (v : (bool * bool)) 
Output : bool
Body : 
 (match v with 
|(true, x) -> x
|(false, x) -> true)}
Edge : 
{(9610, 9610) -> ,
(9611, 9609) -> ,
(9611, 9610) -> ,
(9611, 9611) -> }
Starting : 9611
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9574 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not k -> not (eval (k))
|AndAlso (k1, k2) -> (eval (k1) && eval (k2))
|OrElse (k1, k2) -> (eval (k1) || eval (k2))
|Imply (k1, k2) -> proc_imply ((eval (k1), eval (k2)))
|Equal (k1, k2) -> (proc_exp (k1) = proc_exp (k2))),

proc_exp -> (9573 : 
Input : (x : exp) 
Output : int
Body : 
 (match x with 
|Plus (k1, k2) -> (proc_exp (k1) + proc_exp (k2))
|Minus (k1, k2) -> (proc_exp (k1) - proc_exp (k2))
|Num k -> k),

proc_imply -> (9572 : 
Input : (imp : (bool * bool)) 
Output : bool
Body : 
 (match imp with 
|(true, true) -> true
|(true, false) -> false
|(false, true) -> true
|(false, false) -> true)}
Edge : 
{(9573, 9573) -> ,
(9574, 9572) -> ,
(9574, 9573) -> ,
(9574, 9574) -> }
Starting : 9574
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{calc -> proc_exp,
eval -> eval,
imply -> proc_imply}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19583 : ?)

Decls : 
,Exp : Modify (19584 : ?)

Decls : 
,Exp : Modify (19587 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19594 : ? (?))

Decls : 
,Exp : Modify (19597 : ? (?))

Decls : 
,Exp : Modify (19600 : ?)

Decls : 
,Exp : Modify (19605 : ? (?))

Decls : 
,Exp : Modify (19609 : ? (?))

Decls : 
,Exp : Modify (19612 : ? (?))

Decls : 
,Exp : Modify (19616 : ? (?))

Decls : 
,Exp : Modify (19619 : ? (?))

Decls : 
,Exp : Modify (19629 : ? ((? (?), ? (?))))

Decls : 
,Exp : Modify (19632 : ? (?))

Decls : 
,Exp : Modify (19635 : ? (?))

Decls : 
,Exp : Insert ((false, false) -> true At label 19582

Decls : 
,Exp : Insert ((false, true) -> true At label 19582

Decls : 
,Exp : Insert ((true, false) -> false At label 19582

Decls : 
,Exp : Insert ((true, true) -> true At label 19582

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let imply v  = 
 (match v with 
|(true, x) -> x
|(false, x) -> true)

let rec calc e  = 
 (match e with 
|Num n -> n
|Plus (e1, e2) -> (calc (e1) + calc (e2))
|Minus (e1, e2) -> (calc (e1) - calc (e2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not fm -> not (eval (fm))
|AndAlso (fm1, fm2) -> (eval (fm1) && eval (fm2))
|OrElse (fm1, fm2) -> (eval (fm2) || eval (fm1))
|Imply (fm1, fm2) -> imply ((eval (fm1), eval (fm2)))
|Equal (e1, e2) -> (calc (e1) = calc (e2)))

Time : 0.0139780044556
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub52.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec arithmetic  = (19596, 
fun f -> (19595, 
 (match (19579, f with 
|Num num -> (19580, num
|Plus (num1, num2) -> (19587, ((19583, (19581, arithmetic ((19582, num1) + (19586, (19584, arithmetic ((19585, num2))
|Minus (num1, num2) -> (19594, ((19590, (19588, arithmetic ((19589, num1) - (19593, (19591, arithmetic ((19592, num2)))

let rec eval  : (formula -> bool) = (19639, 
fun f -> (19638, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not fm -> (19605, if (19602, (19600, eval ((19601, fm) then (19603, false
 else (19604, true
|AndAlso (fm1, fm2) -> (19612, ((19608, (19606, eval ((19607, fm1) && (19611, (19609, eval ((19610, fm2))
|OrElse (fm1, fm2) -> (19619, ((19615, (19613, eval ((19614, fm1) || (19618, (19616, eval ((19617, fm2))
|Imply (fm1, fm2) -> (19630, if (19622, (19620, eval ((19621, fm1) then (19628, if (19625, (19623, eval ((19624, fm2) then (19626, true
 else (19627, false
 else (19629, false
|Equal (exp1, exp2) -> (19637, ((19633, (19631, arithmetic ((19632, exp1) = (19636, (19634, arithmetic ((19635, exp2)))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{arithmetic -> (9343 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num num -> num
|Plus (num1, num2) -> (arithmetic (num1) + arithmetic (num2))
|Minus (num1, num2) -> (arithmetic (num1) - arithmetic (num2))),

eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not fm -> if eval (fm) then false
 else true
|AndAlso (fm1, fm2) -> (eval (fm1) && eval (fm2))
|OrElse (fm1, fm2) -> (eval (fm1) || eval (fm2))
|Imply (fm1, fm2) -> if eval (fm1) then if eval (fm2) then true
 else false
 else false
|Equal (exp1, exp2) -> (arithmetic (exp1) = arithmetic (exp2)))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> ,
(9344, 9344) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{arithmetic -> evalExp,
eval -> eval}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19605 : not (? (?)))

Decls : 
,Exp : Modify (19608 : ? (?))

Decls : 
,Exp : Modify (19611 : ? (?))

Decls : 
,Exp : Modify (19615 : ? (?))

Decls : 
,Exp : Modify (19618 : ? (?))

Decls : 
,Exp : Modify (19622 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19628 : true)

Decls : 
,Exp : Modify (19633 : ? (?))

Decls : 
,Exp : Modify (19636 : ? (?))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec arithmetic  = 
fun f -> 
 (match f with 
|Num num -> num
|Plus (num1, num2) -> (arithmetic (num1) + arithmetic (num2))
|Minus (num1, num2) -> (arithmetic (num1) - arithmetic (num2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not fm -> if eval (fm) then false
 else true
|AndAlso (fm1, fm2) -> (eval (fm1) && eval (fm2))
|OrElse (fm1, fm2) -> (eval (fm1) || eval (fm2))
|Imply (fm1, fm2) -> if ((eval (fm1) = false) || (eval (fm2) = true)) then true
 else false
|Equal (exp1, exp2) -> (arithmetic (exp1) = arithmetic (exp2)))

Time : 0.24794793129
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub61.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalHelper1  : (exp -> int) = (19596, 
fun f -> (19595, 
 (match (19579, f with 
|Num a -> (19580, a
|Minus (a, b) -> (19587, ((19583, (19581, evalHelper1 ((19582, a) - (19586, (19584, evalHelper1 ((19585, b))
|Plus (a, b) -> (19594, ((19590, (19588, evalHelper1 ((19589, a) + (19593, (19591, evalHelper1 ((19592, b)))

let rec evalHelper  : (formula -> formula) = (19659, 
fun f -> (19658, 
 (match (19597, f with 
|True -> (19598, True
|False -> (19599, False
|Not a -> (19605, if (19602, ((19600, a = (19601, True) then (19603, False
 else (19604, True
|AndAlso (a, b) -> (19619, if (19616, ((19610, ((19608, (19606, evalHelper ((19607, a) = (19609, True) && (19615, ((19613, (19611, evalHelper ((19612, b) = (19614, True)) then (19617, True
 else (19618, False
|OrElse (a, b) -> (19633, if (19630, ((19624, ((19622, (19620, evalHelper ((19621, a) = (19623, False) && (19629, ((19627, (19625, evalHelper ((19626, b) = (19628, False)) then (19631, False
 else (19632, True
|Imply (a, b) -> (19647, if (19644, ((19638, ((19636, (19634, evalHelper ((19635, a) = (19637, True) && (19643, ((19641, (19639, evalHelper ((19640, b) = (19642, False)) then (19645, False
 else (19646, True
|Equal (a, b) -> (19657, if (19654, ((19650, (19648, evalHelper1 ((19649, a) = (19653, (19651, evalHelper1 ((19652, b)) then (19655, True
 else (19656, False)

let rec eval  : (formula -> bool) = (19669, 
fun f -> (19668, 
 (match (19660, f with 
|True -> (19661, true
|False -> (19662, false
|f -> (19667, (19663, eval ((19666, (19664, evalHelper ((19665, f)))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9609 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|f -> eval (evalHelper (f))),

evalHelper -> (9608 : 
Input : (f : formula) 
Output : formula
Body : 
 (match f with 
|True -> True
|False -> False
|Not a -> if (a = True) then False
 else True
|AndAlso (a, b) -> if ((evalHelper (a) = True) && (evalHelper (b) = True)) then True
 else False
|OrElse (a, b) -> if ((evalHelper (a) = False) && (evalHelper (b) = False)) then False
 else True
|Imply (a, b) -> if ((evalHelper (a) = True) && (evalHelper (b) = False)) then False
 else True
|Equal (a, b) -> if (evalHelper1 (a) = evalHelper1 (b)) then True
 else False),

evalHelper1 -> (9607 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num a -> a
|Minus (a, b) -> (evalHelper1 (a) - evalHelper1 (b))
|Plus (a, b) -> (evalHelper1 (a) + evalHelper1 (b)))}
Edge : 
{(9607, 9607) -> ,
(9608, 9607) -> ,
(9608, 9608) -> ,
(9609, 9608) -> ,
(9609, 9609) -> }
Starting : 9609
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9573 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9572 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9572, 9572) -> ,
(9573, 9572) -> ,
(9573, 9573) -> }
Starting : 9573
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
evalHelper1 -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19660 : ?)

Decls : 
,Exp : Insert (AndAlso (f1, f2) -> (? (?) && ? (?)) At label 19668

Decls : 
,Exp : Insert (Equal (exp1, exp2) -> (? (?) = ? (?)) At label 19668

Decls : 
,Exp : Insert (Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false At label 19668

Decls : 
,Exp : Insert (Not f -> not (? (?)) At label 19668

Decls : 
,Exp : Insert (OrElse (f1, f2) -> (? (?) || ? (?)) At label 19668

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub64.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19580, 
fun f -> (19579, true

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : f 
Output : bool
Body : true}
Edge : 
empty
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : 
 (match ? with 
|True -> true
|False -> false
|Not f -> not (? (?))
|AndAlso (f1, f2) -> (? (?) && ? (?))
|OrElse (f1, f2) -> (? (?) || ? (?))
|Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false
|Equal (exp1, exp2) -> (? (?) = ? (?))))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f1))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2)))

Time : 0.848604917526
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub65.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec exp_to_int  : (exp -> int) = (19596, 
fun e -> (19595, 
 (match (19579, e with 
|Num n -> (19580, n
|Plus (n1, n2) -> (19587, ((19583, (19581, exp_to_int ((19582, n1) + (19586, (19584, exp_to_int ((19585, n2))
|Minus (n1, n2) -> (19594, ((19590, (19588, exp_to_int ((19589, n1) - (19593, (19591, exp_to_int ((19592, n2)))

let rec eval  : (formula -> bool) = (19632, 
fun f -> (19631, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not f1 -> (19603, not ((19602, (19600, eval ((19601, f1))
|AndAlso (f1, f2) -> (19610, ((19606, (19604, eval ((19605, f1) && (19609, (19607, eval ((19608, f2))
|OrElse (f1, f2) -> (19617, ((19613, (19611, eval ((19612, f1) || (19616, (19614, eval ((19615, f2))
|Imply (f1, f2) -> (19623, 
 (match (19620, ((19618, f1, (19619, f2) with 
|(True, False) -> (19621, false
|_ -> (19622, true)
|Equal (e1, e2) -> (19630, ((19626, (19624, exp_to_int ((19625, e1) = (19629, (19627, exp_to_int ((19628, e2)))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f1 -> not (eval (f1))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> 
 (match (f1, f2) with 
|(True, False) -> false
|_ -> true)
|Equal (e1, e2) -> (exp_to_int (e1) = exp_to_int (e2))),

exp_to_int -> (9343 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num n -> n
|Plus (n1, n2) -> (exp_to_int (n1) + exp_to_int (n2))
|Minus (n1, n2) -> (exp_to_int (n1) - exp_to_int (n2)))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> ,
(9344, 9344) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
exp_to_int -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19602 : ? (?))

Decls : 
,Exp : Modify (19606 : ? (?))

Decls : 
,Exp : Modify (19609 : ? (?))

Decls : 
,Exp : Modify (19613 : ? (?))

Decls : 
,Exp : Modify (19616 : ? (?))

Decls : 
,Exp : Modify (19623 : if ((? (?) = false) || (? (?) = true)) then true
 else false)

Decls : 
,Exp : Modify (19626 : ? (?))

Decls : 
,Exp : Modify (19629 : ? (?))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec exp_to_int  : (exp -> int) = 
fun e -> 
 (match e with 
|Num n -> n
|Plus (n1, n2) -> (exp_to_int (n1) + exp_to_int (n2))
|Minus (n1, n2) -> (exp_to_int (n1) - exp_to_int (n2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f1 -> not (eval (f1))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (e1, e2) -> (exp_to_int (e1) = exp_to_int (e2)))

Time : 0.0143530368805
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub66.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------
type exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int
type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True

let rec exptoint  = (19615, 
fun f -> (19614, 
 (match (19579, f with 
|Num n -> (19581, Num ((19580, n)
|Plus (n1, n2) -> (19597, 
 (match (19584, ((19582, n1, (19583, n2) with 
|(Num e1, Num e2) -> (19588, Num ((19587, ((19585, e1 + (19586, e2))
|(n1, n2) -> (19596, Plus ((19595, ((19591, (19589, exptoint ((19590, n1), (19594, (19592, exptoint ((19593, n2))))
|Minus (n1, n2) -> (19613, 
 (match (19600, ((19598, n1, (19599, n2) with 
|(Num e1, Num e2) -> (19604, Num ((19603, ((19601, e1 - (19602, e2))
|(n1, n2) -> (19612, Minus ((19611, ((19607, (19605, exptoint ((19606, n1), (19610, (19608, exptoint ((19609, n2)))))

let rec eval  : (formula -> bool) = (19662, 
fun f -> (19661, 
 (match (19616, f with 
|True -> (19617, true
|False -> (19618, false
|Not a -> (19622, not ((19621, (19619, eval ((19620, a))
|AndAlso (b1, b2) -> (19629, ((19625, (19623, eval ((19624, b1) && (19628, (19626, eval ((19627, b2))
|OrElse (b1, b2) -> (19636, ((19632, (19630, eval ((19631, b1) || (19635, (19633, eval ((19634, b2))
|Equal (e1, e2) -> (19646, if (19643, ((19639, (19637, exptoint ((19638, e1) = (19642, (19640, exptoint ((19641, e2)) then (19644, true
 else (19645, false
|Imply (b1, b2) -> (19660, if (19657, ((19651, ((19649, (19647, eval ((19648, b1) = (19650, true) || (19656, ((19654, (19652, eval ((19653, b2) = (19655, false)) then (19658, false
 else (19659, true)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/16/sub72.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec cal num  = (14536, 
 (match (14501, num with 
|Num i -> (14503, Num ((14502, i)
|Plus (a, b) -> (14519, 
 (match (14506, ((14504, a, (14505, b) with 
|(Num a2, Num b2) -> (14510, Num ((14509, ((14507, a2 + (14508, b2))
|(_, _) -> (14518, Plus ((14517, ((14513, (14511, cal ((14512, a), (14516, (14514, cal ((14515, b))))
|Minus (a, b) -> (14535, 
 (match (14522, ((14520, a, (14521, b) with 
|(Num a2, Num b2) -> (14526, Num ((14525, ((14523, a2 - (14524, b2))
|(_, _) -> (14534, Minus ((14533, ((14529, (14527, cal ((14528, a), (14532, (14530, cal ((14531, b)))))

let rec eval  : (formula -> bool) = (14597, 
fun f -> (14596, 
 (match (14537, f with 
|True -> (14538, true
|False -> (14539, false
|Not x -> (14547, if (14544, ((14542, (14540, eval ((14541, x) = (14543, true) then (14545, false
 else (14546, true
|AndAlso (x, y) -> (14554, ((14550, (14548, eval ((14549, x) && (14553, (14551, eval ((14552, y))
|OrElse (x, y) -> (14561, ((14557, (14555, eval ((14556, x) || (14560, (14558, eval ((14559, y))
|Imply (x, y) -> (14575, if (14572, ((14566, ((14564, (14562, eval ((14563, x) = (14565, true) && (14571, ((14569, (14567, eval ((14568, y) = (14570, false)) then (14573, false
 else (14574, true
|Equal (x, y) -> (14595, 
 (match (14578, ((14576, x, (14577, y) with 
|(Num x2, Num y2) -> (14584, if (14581, ((14579, x2 = (14580, y2) then (14582, true
 else (14583, false
|(_, _) -> (14594, (14585, eval ((14593, Equal ((14592, ((14588, (14586, cal ((14587, x), (14591, (14589, cal ((14590, y))))))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not a -> not (eval (a))
|AndAlso (b1, b2) -> (eval (b1) && eval (b2))
|OrElse (b1, b2) -> (eval (b1) || eval (b2))
|Equal (e1, e2) -> if (exptoint (e1) = exptoint (e2)) then true
 else false
|Imply (b1, b2) -> if ((eval (b1) = true) || (eval (b2) = false)) then false
 else true),

exptoint -> (9343 : 
Input : (f : exp) 
Output : exp
Body : 
 (match f with 
|Num n -> Num (n)
|Plus (n1, n2) -> 
 (match (n1, n2) with 
|(Num e1, Num e2) -> Num ((e1 + e2))
|(n1, n2) -> Plus ((exptoint (n1), exptoint (n2))))
|Minus (n1, n2) -> 
 (match (n1, n2) with 
|(Num e1, Num e2) -> Num ((e1 - e2))
|(n1, n2) -> Minus ((exptoint (n1), exptoint (n2)))))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> ,
(9344, 9344) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{cal -> (9308 : 
Input : (num : exp) 
Output : exp
Body : 
 (match num with 
|Num i -> Num (i)
|Plus (a, b) -> 
 (match (a, b) with 
|(Num a2, Num b2) -> Num ((a2 + b2))
|(_, _) -> Plus ((cal (a), cal (b))))
|Minus (a, b) -> 
 (match (a, b) with 
|(Num a2, Num b2) -> Num ((a2 - b2))
|(_, _) -> Minus ((cal (a), cal (b))))),

eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not x -> if (eval (x) = true) then false
 else true
|AndAlso (x, y) -> (eval (x) && eval (y))
|OrElse (x, y) -> (eval (x) || eval (y))
|Imply (x, y) -> if ((eval (x) = true) && (eval (y) = false)) then false
 else true
|Equal (x, y) -> 
 (match (x, y) with 
|(Num x2, Num y2) -> if (x2 = y2) then true
 else false
|(_, _) -> eval (Equal ((cal (x), cal (y))))))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
exptoint -> cal}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19582 : ?)

Decls : 
,Exp : Modify (19583 : ?)

Decls : 
,Exp : Modify (19585 : ?)

Decls : 
,Exp : Modify (19586 : ?)

Decls : 
,Exp : Modify (19598 : ?)

Decls : 
,Exp : Modify (19599 : ?)

Decls : 
,Exp : Modify (19601 : ?)

Decls : 
,Exp : Modify (19602 : ?)

Decls : 
,Exp : Modify (19616 : ?)

Decls : 
,Exp : Modify (19622 : if (? (?) = true) then false
 else true)

Decls : 
,Exp : Modify (19625 : ? (?))

Decls : 
,Exp : Modify (19628 : ? (?))

Decls : 
,Exp : Modify (19632 : ? (?))

Decls : 
,Exp : Modify (19635 : ? (?))

Decls : 
,Exp : Modify (19646 : 
 (match (?, ?) with 
|(Num x2, Num y2) -> if (? = ?) then true
 else false
|(_, _) -> ? (Equal ((? (?), ? (?))))))

Decls : 
,Exp : Modify (19657 : ((? (?) = true) && (? (?) = false)))

Decls : 
,Exp : Insert ((_, _) -> Plus ((? (?), ? (?))) At label 19597

Decls : 
,Exp : Insert ((_, _) -> Minus ((? (?), ? (?))) At label 19613

Decls : 
}
-----------------------------
Patch
-----------------------------
type exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int
type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True

let rec exptoint  = 
fun f -> 
 (match f with 
|Num n -> Num (n)
|Plus (n1, n2) -> 
 (match (n1, n2) with 
|(Num e1, Num e2) -> Num ((e1 + e2))
|(n1, n2) -> Plus ((exptoint (n1), exptoint (n2))))
|Minus (n1, n2) -> 
 (match (n1, n2) with 
|(Num e1, Num e2) -> Num ((e1 - e2))
|(n1, n2) -> Minus ((exptoint (n1), exptoint (n2)))))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not a -> not (eval (a))
|AndAlso (b1, b2) -> (eval (b1) && eval (b2))
|OrElse (b1, b2) -> (eval (b1) || eval (b2))
|Equal (e1, e2) -> if (exptoint (e1) = exptoint (e2)) then true
 else false
|Imply (b1, b2) -> if ((eval (b1) = true) && (eval (b2) = false)) then false
 else true)

Time : 0.0199329853058
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub69.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19580, 
fun f -> (19579, true

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : f 
Output : bool
Body : true}
Edge : 
empty
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : 
 (match ? with 
|True -> true
|False -> false
|Not f -> not (? (?))
|AndAlso (f1, f2) -> (? (?) && ? (?))
|OrElse (f1, f2) -> (? (?) || ? (?))
|Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false
|Equal (exp1, exp2) -> (? (?) = ? (?))))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f1))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2)))

Time : 0.77782702446
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub73.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------
type exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int
type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True

let rec eval  : (formula -> bool) = (19635, 
fun form -> (19634, 
let rec value  : (exp -> int) = (19596, 
fun x -> (19595, 
 (match (19579, x with 
|Num a -> (19580, a
|Plus (a, b) -> (19587, ((19583, (19581, value ((19582, a) + (19586, (19584, value ((19585, b))
|Minus (a, b) -> (19594, ((19590, (19588, value ((19589, a) * (19593, (19591, value ((19592, b)))
 in 
(19633, 
 (match (19597, form with 
|True -> (19598, true
|False -> (19599, false
|Not x -> (19603, not ((19602, (19600, eval ((19601, x))
|AndAlso (x, y) -> (19610, ((19606, (19604, eval ((19605, x) && (19609, (19607, eval ((19608, y))
|OrElse (x, y) -> (19617, ((19613, (19611, eval ((19612, x) || (19616, (19614, eval ((19615, y))
|Imply (x, y) -> (19625, ((19621, not ((19620, (19618, eval ((19619, x)) || (19624, (19622, eval ((19623, y))
|Equal (x, y) -> (19632, ((19628, (19626, value ((19627, x) = (19631, (19629, value ((19630, y)))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9343 : 
Input : (form : formula) 
Output : bool
Body : 
 (match form with 
|True -> true
|False -> false
|Not x -> not (eval (x))
|AndAlso (x, y) -> (eval (x) && eval (y))
|OrElse (x, y) -> (eval (x) || eval (y))
|Imply (x, y) -> (not (eval (x)) || eval (y))
|Equal (x, y) -> (value (x) = value (y))),

value -> (9344 : 
Input : (x : exp) 
Output : int
Body : 
 (match x with 
|Num a -> a
|Plus (a, b) -> (value (a) + value (b))
|Minus (a, b) -> (value (a) * value (b)))}
Edge : 
{(9343, 9343) -> ,
(9343, 9344) -> ,
(9344, 9344) -> }
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
value -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19594 : (? (?) - ? (?)))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19602 : ? (?))

Decls : 
,Exp : Modify (19606 : ? (?))

Decls : 
,Exp : Modify (19609 : ? (?))

Decls : 
,Exp : Modify (19613 : ? (?))

Decls : 
,Exp : Modify (19616 : ? (?))

Decls : 
,Exp : Modify (19625 : if ((? (?) = false) || (? (?) = true)) then true
 else false)

Decls : 
,Exp : Modify (19628 : ? (?))

Decls : 
,Exp : Modify (19631 : ? (?))

Decls : 
}
-----------------------------
Patch
-----------------------------
type exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int
type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True

let rec eval  : (formula -> bool) = 
fun form -> 
let rec value  : (exp -> int) = 
fun x -> 
 (match x with 
|Num a -> a
|Plus (a, b) -> (value (a) + value (b))
|Minus (a, b) -> (value (a) - value (b)))
 in 

 (match form with 
|True -> true
|False -> false
|Not x -> not (eval (x))
|AndAlso (x, y) -> (eval (x) && eval (y))
|OrElse (x, y) -> (eval (x) || eval (y))
|Imply (x, y) -> (not (eval (x)) || eval (y))
|Equal (x, y) -> (value (x) = value (y)))

Time : 0.81907916069
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub75.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19580, 
fun f -> (19579, true

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : f 
Output : bool
Body : true}
Edge : 
empty
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : 
 (match ? with 
|True -> true
|False -> false
|Not f -> not (? (?))
|AndAlso (f1, f2) -> (? (?) && ? (?))
|OrElse (f1, f2) -> (? (?) || ? (?))
|Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false
|Equal (exp1, exp2) -> (? (?) = ? (?))))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f1))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2)))

Time : 0.797492980957
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub79.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19580, 
fun f -> (19579, true

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : f 
Output : bool
Body : true}
Edge : 
empty
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : 
 (match ? with 
|True -> true
|False -> false
|Not f -> not (? (?))
|AndAlso (f1, f2) -> (? (?) && ? (?))
|OrElse (f1, f2) -> (? (?) || ? (?))
|Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false
|Equal (exp1, exp2) -> (? (?) = ? (?))))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f1))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2)))

Time : 0.827681064606
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub81.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19580, 
fun f -> (19579, true

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : f 
Output : bool
Body : true}
Edge : 
empty
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : 
 (match ? with 
|True -> true
|False -> false
|Not f -> not (? (?))
|AndAlso (f1, f2) -> (? (?) && ? (?))
|OrElse (f1, f2) -> (? (?) || ? (?))
|Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false
|Equal (exp1, exp2) -> (? (?) = ? (?))))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f1))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2)))

Time : 0.788365840912
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub82.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec getInt  : (exp -> int) = (19596, 
fun number -> (19595, 
 (match (19579, number with 
|Num x -> (19580, x
|Plus (a, b) -> (19587, ((19583, (19581, getInt ((19582, a) + (19586, (19584, getInt ((19585, b))
|Minus (a, b) -> (19594, ((19590, (19588, getInt ((19589, a) - (19593, (19591, getInt ((19592, b)))

let rec getExpression  : (exp -> exp) = (19615, 
fun f -> (19614, 
 (match (19597, f with 
|Num x -> (19599, Num ((19598, x)
|Plus (a, b) -> (19606, Num ((19605, (19600, getInt ((19604, Plus ((19603, ((19601, a, (19602, b))))
|Minus (a, b) -> (19613, Num ((19612, (19607, getInt ((19611, Minus ((19610, ((19608, a, (19609, b)))))

let rec getValue  : (formula -> formula) = (19753, 
fun f -> (19752, 
 (match (19616, f with 
|True -> (19617, True
|False -> (19618, False
|Not x -> (19634, if (19621, ((19619, x = (19620, True) then (19622, False
 else (19633, if (19625, ((19623, x = (19624, False) then (19626, True
 else (19632, (19627, getValue ((19631, Not ((19630, (19628, getValue ((19629, x)))
|AndAlso (x, y) -> (19662, if (19641, ((19637, ((19635, x = (19636, True) && (19640, ((19638, y = (19639, True)) then (19642, True
 else (19661, if (19649, ((19645, ((19643, x = (19644, False) || (19648, ((19646, y = (19647, False)) then (19650, False
 else (19660, (19651, getValue ((19659, AndAlso ((19658, ((19654, (19652, getValue ((19653, x), (19657, (19655, getValue ((19656, y))))
|OrElse (x, y) -> (19708, if (19669, ((19665, ((19663, x = (19664, True) && (19668, ((19666, y = (19667, False)) then (19670, True
 else (19707, if (19677, ((19673, ((19671, x = (19672, False) && (19676, ((19674, y = (19675, True)) then (19678, True
 else (19706, if (19685, ((19681, ((19679, x = (19680, False) && (19684, ((19682, y = (19683, False)) then (19686, False
 else (19705, if (19693, ((19689, ((19687, x = (19688, True) && (19692, ((19690, y = (19691, True)) then (19694, False
 else (19704, (19695, getValue ((19703, OrElse ((19702, ((19698, (19696, getValue ((19697, x), (19701, (19699, getValue ((19700, y))))
|Imply (x, y) -> (19741, if (19711, ((19709, x = (19710, False) then (19712, True
 else (19740, if (19719, ((19715, ((19713, x = (19714, True) && (19718, ((19716, y = (19717, True)) then (19720, True
 else (19739, if (19727, ((19723, ((19721, x = (19722, True) && (19726, ((19724, y = (19725, False)) then (19728, False
 else (19738, (19729, getValue ((19737, Imply ((19736, ((19732, (19730, getValue ((19731, x), (19735, (19733, getValue ((19734, y))))
|Equal (ex1, ex2) -> (19751, if (19748, ((19744, (19742, getExpression ((19743, ex1) = (19747, (19745, getExpression ((19746, ex2)) then (19749, True
 else (19750, False)

let rec eval  : (formula -> bool) = (19769, 
fun f -> (19768, if (19756, ((19754, f = (19755, True) then (19757, true
 else (19767, if (19760, ((19758, f = (19759, False) then (19761, false
 else (19766, (19762, eval ((19765, (19763, getValue ((19764, f))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9874 : 
Input : (f : formula) 
Output : bool
Body : if (f = True) then true
 else if (f = False) then false
 else eval (getValue (f)),

getExpression -> (9872 : 
Input : (f : exp) 
Output : exp
Body : 
 (match f with 
|Num x -> Num (x)
|Plus (a, b) -> Num (getInt (Plus ((a, b))))
|Minus (a, b) -> Num (getInt (Minus ((a, b))))),

getInt -> (9871 : 
Input : (number : exp) 
Output : int
Body : 
 (match number with 
|Num x -> x
|Plus (a, b) -> (getInt (a) + getInt (b))
|Minus (a, b) -> (getInt (a) - getInt (b))),

getValue -> (9873 : 
Input : (f : formula) 
Output : formula
Body : 
 (match f with 
|True -> True
|False -> False
|Not x -> if (x = True) then False
 else if (x = False) then True
 else getValue (Not (getValue (x)))
|AndAlso (x, y) -> if ((x = True) && (y = True)) then True
 else if ((x = False) || (y = False)) then False
 else getValue (AndAlso ((getValue (x), getValue (y))))
|OrElse (x, y) -> if ((x = True) && (y = False)) then True
 else if ((x = False) && (y = True)) then True
 else if ((x = False) && (y = False)) then False
 else if ((x = True) && (y = True)) then False
 else getValue (OrElse ((getValue (x), getValue (y))))
|Imply (x, y) -> if (x = False) then True
 else if ((x = True) && (y = True)) then True
 else if ((x = True) && (y = False)) then False
 else getValue (Imply ((getValue (x), getValue (y))))
|Equal (ex1, ex2) -> if (getExpression (ex1) = getExpression (ex2)) then True
 else False)}
Edge : 
{(9871, 9871) -> ,
(9872, 9871) -> ,
(9873, 9872) -> ,
(9873, 9873) -> ,
(9874, 9873) -> ,
(9874, 9874) -> }
Starting : 9874
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9837 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9836 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9836, 9836) -> ,
(9837, 9836) -> ,
(9837, 9837) -> }
Starting : 9837
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
getInt -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19768 : 
 (match ? with 
|True -> true
|False -> false
|Not f -> not (? (?))
|AndAlso (f1, f2) -> (? (?) && ? (?))
|OrElse (f1, f2) -> (? (?) || ? (?))
|Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false
|Equal (exp1, exp2) -> (? (?) = ? (?))))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec getInt  : (exp -> int) = 
fun number -> 
 (match number with 
|Num x -> x
|Plus (a, b) -> (getInt (a) + getInt (b))
|Minus (a, b) -> (getInt (a) - getInt (b)))

let rec getExpression  : (exp -> exp) = 
fun f -> 
 (match f with 
|Num x -> Num (x)
|Plus (a, b) -> Num (getInt (Plus ((a, b))))
|Minus (a, b) -> Num (getInt (Minus ((a, b)))))

let rec getValue  : (formula -> formula) = 
fun f -> 
 (match f with 
|True -> True
|False -> False
|Not x -> if (x = True) then False
 else if (x = False) then True
 else getValue (Not (getValue (x)))
|AndAlso (x, y) -> if ((x = True) && (y = True)) then True
 else if ((x = False) || (y = False)) then False
 else getValue (AndAlso ((getValue (x), getValue (y))))
|OrElse (x, y) -> if ((x = True) && (y = False)) then True
 else if ((x = False) && (y = True)) then True
 else if ((x = False) && (y = False)) then False
 else if ((x = True) && (y = True)) then False
 else getValue (OrElse ((getValue (x), getValue (y))))
|Imply (x, y) -> if (x = False) then True
 else if ((x = True) && (y = True)) then True
 else if ((x = True) && (y = False)) then False
 else getValue (Imply ((getValue (x), getValue (y))))
|Equal (ex1, ex2) -> if (getExpression (ex1) = getExpression (ex2)) then True
 else False)

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f1))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (getExpression (exp1) = getExpression (exp2)))

Time : 2.01096200943
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub83.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19580, 
fun f -> (19579, true

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : f 
Output : bool
Body : true}
Edge : 
empty
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : 
 (match ? with 
|True -> true
|False -> false
|Not f -> not (? (?))
|AndAlso (f1, f2) -> (? (?) && ? (?))
|OrElse (f1, f2) -> (? (?) || ? (?))
|Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false
|Equal (exp1, exp2) -> (? (?) = ? (?))))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f1))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2)))

Time : 0.787992954254
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub88.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19625, 
fun f -> (19624, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not a -> (19587, if (19584, ((19582, a = (19583, True) then (19585, false
 else (19586, true
|OrElse (a, b) -> (19597, if (19594, ((19590, ((19588, a = (19589, True) || (19593, ((19591, b = (19592, True)) then (19595, true
 else (19596, false
|AndAlso (a, b) -> (19607, if (19604, ((19600, ((19598, a = (19599, True) && (19603, ((19601, b = (19602, True)) then (19605, true
 else (19606, false
|Imply (a, b) -> (19617, if (19614, ((19610, ((19608, a = (19609, True) && (19613, ((19611, b = (19612, False)) then (19615, false
 else (19616, true
|Equal (a, b) -> (19623, if (19620, ((19618, a = (19619, b) then (19621, true
 else (19622, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not a -> if (a = True) then false
 else true
|OrElse (a, b) -> if ((a = True) || (b = True)) then true
 else false
|AndAlso (a, b) -> if ((a = True) && (b = True)) then true
 else false
|Imply (a, b) -> if ((a = True) && (b = False)) then false
 else true
|Equal (a, b) -> if (a = b) then true
 else false)}
Edge : 
empty
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19587 : not (? (?)))

Decls : 
,Exp : Modify (19597 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19607 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19614 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19615 : true)

Decls : 
,Exp : Modify (19616 : false)

Decls : 
,Exp : Modify (19623 : (? (?) = ? (?)))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub9.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19638, 
fun f -> (19637, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not f1 -> (19587, if (19584, (19582, eval ((19583, f1) then (19585, false
 else (19586, true
|AndAlso (f1, f2) -> (19595, if (19590, (19588, eval ((19589, f1) then (19593, (19591, eval ((19592, f2)
 else (19594, false
|OrElse (f1, f2) -> (19603, if (19598, (19596, eval ((19597, f1) then (19599, true
 else (19602, (19600, eval ((19601, f2)
|Imply (f1, f2) -> (19611, if (19606, (19604, eval ((19605, f1) then (19609, (19607, eval ((19608, f2)
 else (19610, true
|Equal (exp1, exp2) -> (19636, 
let rec e2i exp  = (19628, 
 (match (19612, exp with 
|Num i -> (19613, i
|Plus (e1, e2) -> (19620, ((19616, (19614, e2i ((19615, e1) + (19619, (19617, e2i ((19618, e1))
|Minus (e1, e2) -> (19627, ((19623, (19621, e2i ((19622, e1) - (19626, (19624, e2i ((19625, e2)))
 in 
(19635, ((19631, (19629, e2i ((19630, exp1) = (19634, (19632, e2i ((19633, exp2)))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{e2i -> (9344 : 
Input : (exp : exp) 
Output : int
Body : 
 (match exp with 
|Num i -> i
|Plus (e1, e2) -> (e2i (e1) + e2i (e1))
|Minus (e1, e2) -> (e2i (e1) - e2i (e2))),

eval -> (9343 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f1 -> if eval (f1) then false
 else true
|AndAlso (f1, f2) -> if eval (f1) then eval (f2)
 else false
|OrElse (f1, f2) -> if eval (f1) then true
 else eval (f2)
|Imply (f1, f2) -> if eval (f1) then eval (f2)
 else true
|Equal (exp1, exp2) -> (e2i (exp1) = e2i (exp2)))}
Edge : 
{(9343, 9343) -> ,
(9343, 9344) -> ,
(9344, 9344) -> }
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{e2i -> evalExp,
eval -> eval}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19587 : not (? (?)))

Decls : 
,Exp : Modify (19595 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19603 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19606 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19609 : true)

Decls : 
,Exp : Modify (19610 : false)

Decls : 
,Exp : Modify (19612 : ?)

Decls : 
,Exp : Modify (19613 : ?)

Decls : 
,Exp : Modify (19616 : ? (?))

Decls : 
,Exp : Modify (19619 : ? (?))

Decls : 
,Exp : Modify (19623 : ? (?))

Decls : 
,Exp : Modify (19626 : ? (?))

Decls : 
,Exp : Modify (19631 : ? (?))

Decls : 
,Exp : Modify (19634 : ? (?))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f1 -> if eval (f1) then false
 else true
|AndAlso (f1, f2) -> if eval (f1) then eval (f2)
 else false
|OrElse (f1, f2) -> if eval (f1) then true
 else eval (f2)
|Imply (f1, f2) -> if eval (f1) then eval (f2)
 else true
|Equal (exp1, exp2) -> 
let rec e2i exp  = 
 (match exp with 
|Num i -> i
|Plus (e1, e2) -> (e2i (e2) + e2i (e1))
|Minus (e1, e2) -> (e2i (e1) - e2i (e2)))
 in 
(e2i (exp1) = e2i (exp2)))

Time : 0.819649219513
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/16/sub93.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19648, 
fun f -> (19647, 
let rec exptoint  : (exp -> int) = (19596, 
fun f1 -> (19595, 
 (match (19579, f1 with 
|Num fs -> (19580, fs
|Plus (fs, ls) -> (19587, ((19583, (19581, exptoint ((19582, fs) + (19586, (19584, exptoint ((19585, ls))
|Minus (fs, ls) -> (19594, ((19590, (19588, exptoint ((19589, fs) - (19593, (19591, exptoint ((19592, ls)))
 in 
(19646, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|AndAlso (fs, ls) -> (19610, if (19602, ((19600, fs = (19601, False) then (19603, false
 else (19609, if (19606, ((19604, ls = (19605, False) then (19607, false
 else (19608, true
|OrElse (fst, lst) -> (19621, if (19613, ((19611, fst = (19612, True) then (19614, true
 else (19620, if (19617, ((19615, lst = (19616, True) then (19618, true
 else (19619, false
|Imply (fst, lst) -> (19631, if (19628, ((19624, ((19622, fst = (19623, True) && (19627, ((19625, lst = (19626, False)) then (19629, false
 else (19630, true
|Equal (fs, ls) -> (19641, if (19638, ((19634, (19632, exptoint ((19633, fs) = (19637, (19635, exptoint ((19636, ls)) then (19639, true
 else (19640, false
|Not a1 -> (19645, not ((19644, (19642, eval ((19643, a1)))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9343 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|AndAlso (fs, ls) -> if (fs = False) then false
 else if (ls = False) then false
 else true
|OrElse (fst, lst) -> if (fst = True) then true
 else if (lst = True) then true
 else false
|Imply (fst, lst) -> if ((fst = True) && (lst = False)) then false
 else true
|Equal (fs, ls) -> if (exptoint (fs) = exptoint (ls)) then true
 else false
|Not a1 -> not (eval (a1))),

exptoint -> (9344 : 
Input : (f1 : exp) 
Output : int
Body : 
 (match f1 with 
|Num fs -> fs
|Plus (fs, ls) -> (exptoint (fs) + exptoint (ls))
|Minus (fs, ls) -> (exptoint (fs) - exptoint (ls)))}
Edge : 
{(9343, 9343) -> ,
(9343, 9344) -> ,
(9344, 9344) -> }
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
exptoint -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19610 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19621 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19628 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19629 : true)

Decls : 
,Exp : Modify (19630 : false)

Decls : 
,Exp : Modify (19641 : (? (?) = ? (?)))

Decls : 
,Exp : Modify (19644 : ? (?))

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub1.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19586, 
fun f -> (19585, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|_ -> (19584, (19582, eval ((19583, f))

let _  = (19595, (19587, eval ((19594, Imply ((19593, ((19591, Imply ((19590, ((19588, True, (19589, False)), (19592, True)))

let _  = (19607, (19596, eval ((19606, Equal ((19605, ((19598, Num ((19597, 1), (19604, Plus ((19603, ((19600, Num ((19599, 1), (19602, Num ((19601, 2))))))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|_ -> eval (f))}
Edge : 
{(9079, 9079) -> }
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Insert (AndAlso (f1, f2) -> (? (?) && ? (?)) At label 19585

Decls : 
,Exp : Insert (Equal (exp1, exp2) -> (? (?) = ? (?)) At label 19585

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
,Exp : Insert (Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false At label 19585

Decls : 
,Exp : Insert (Not f -> not (? (?)) At label 19585

Decls : 
,Exp : Insert (OrElse (f1, f2) -> (? (?) || ? (?)) At label 19585

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub11.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19651, 
fun f -> (19650, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not p -> (19587, if (19584, ((19582, p = (19583, True) then (19585, false
 else (19586, true
|AndAlso (p, q) -> (19598, if (19590, ((19588, p = (19589, False) then (19591, false
 else (19597, if (19594, ((19592, q = (19593, False) then (19595, false
 else (19596, true
|OrElse (p, q) -> (19609, if (19601, ((19599, p = (19600, True) then (19602, true
 else (19608, if (19605, ((19603, q = (19604, True) then (19606, true
 else (19607, false
|Imply (p, q) -> (19620, if (19612, ((19610, q = (19611, True) then (19613, true
 else (19619, if (19616, ((19614, p = (19615, False) then (19617, true
 else (19618, false
|Equal (n1, n2) -> (19649, 
let rec exp_to_int  : (exp -> int) = (19638, 
fun e -> (19637, 
 (match (19621, e with 
|Num n -> (19622, n
|Plus (n1, n2) -> (19629, ((19625, (19623, exp_to_int ((19624, n1) + (19628, (19626, exp_to_int ((19627, n2))
|Minus (n1, n2) -> (19636, ((19632, (19630, exp_to_int ((19631, n1) - (19635, (19633, exp_to_int ((19634, n2)))
 in 
(19648, if (19645, ((19641, (19639, exp_to_int ((19640, n1) = (19644, (19642, exp_to_int ((19643, n2)) then (19646, true
 else (19647, false)

let _  = (19660, (19652, eval ((19659, Imply ((19658, ((19656, Imply ((19655, ((19653, True, (19654, False)), (19657, True)))

let _  = (19672, (19661, eval ((19671, Equal ((19670, ((19663, Num ((19662, 1), (19669, Plus ((19668, ((19665, Num ((19664, 1), (19667, Num ((19666, 2))))))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9343 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not p -> if (p = True) then false
 else true
|AndAlso (p, q) -> if (p = False) then false
 else if (q = False) then false
 else true
|OrElse (p, q) -> if (p = True) then true
 else if (q = True) then true
 else false
|Imply (p, q) -> if (q = True) then true
 else if (p = False) then true
 else false
|Equal (n1, n2) -> if (exp_to_int (n1) = exp_to_int (n2)) then true
 else false),

exp_to_int -> (9344 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num n -> n
|Plus (n1, n2) -> (exp_to_int (n1) + exp_to_int (n2))
|Minus (n1, n2) -> (exp_to_int (n1) - exp_to_int (n2)))}
Edge : 
{(9343, 9344) -> ,
(9344, 9344) -> }
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
exp_to_int -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19587 : not (? (?)))

Decls : 
,Exp : Modify (19598 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19609 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19612 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19619 : false)

Decls : 
,Exp : Modify (19621 : ?)

Decls : 
,Exp : Modify (19622 : ?)

Decls : 
,Exp : Modify (19625 : ? (?))

Decls : 
,Exp : Modify (19628 : ? (?))

Decls : 
,Exp : Modify (19632 : ? (?))

Decls : 
,Exp : Modify (19635 : ? (?))

Decls : 
,Exp : Modify (19648 : (? (?) = ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not p -> not (eval (p))
|AndAlso (p, q) -> if (p = False) then false
 else if (q = False) then false
 else true
|OrElse (p, q) -> if (p = True) then true
 else if (q = True) then true
 else false
|Imply (p, q) -> if ((eval (p) = false) || (eval (q) = true)) then true
 else if (p = False) then true
 else false
|Equal (n1, n2) -> 
let rec exp_to_int  : (exp -> int) = 
fun e -> 
 (match e with 
|Num n -> n
|Plus (n1, n2) -> (exp_to_int (n1) + exp_to_int (n2))
|Minus (n1, n2) -> (exp_to_int (n1) - exp_to_int (n2)))
 in 
if (exp_to_int (n1) = exp_to_int (n2)) then true
 else false)

let _  = eval (Imply ((Imply ((True, False)), True)))

let _  = eval (Equal ((Num (1), Plus ((Num (1), Num (2))))))

Time : 30.7106950283
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub14.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19654, 
fun f -> (19653, 
let rec exptoint  : (exp -> int) = (19596, 
fun e -> (19595, 
 (match (19579, e with 
|Num a -> (19580, a
|Plus (a, b) -> (19587, ((19583, (19581, exptoint ((19582, a) + (19586, (19584, exptoint ((19585, b))
|Minus (a, b) -> (19594, ((19590, (19588, exptoint ((19589, a) - (19593, (19591, exptoint ((19592, b)))
 in 
(19652, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not x -> (19605, if (19602, ((19600, x = (19601, True) then (19603, false
 else (19604, true
|AndAlso (x, y) -> (19612, ((19608, (19606, eval ((19607, x) && (19611, (19609, eval ((19610, y))
|OrElse (x, y) -> (19619, ((19615, (19613, eval ((19614, x) || (19618, (19616, eval ((19617, y))
|Imply (x, y) -> (19641, 
let imply  : (bool -> (bool -> bool)) = (19631, 
fun a b -> (19629, if (19626, ((19622, ((19620, a = (19621, true) && (19625, ((19623, b = (19624, false)) then (19627, false
 else (19628, true
 in 
(19640, (19639, (19632, imply ((19635, (19633, eval ((19634, x)) ((19638, (19636, eval ((19637, y))
|Equal (x, y) -> (19651, if (19648, ((19644, (19642, exptoint ((19643, x) = (19647, (19645, exptoint ((19646, y)) then (19649, true
 else (19650, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9607 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not x -> if (x = True) then false
 else true
|AndAlso (x, y) -> (eval (x) && eval (y))
|OrElse (x, y) -> (eval (x) || eval (y))
|Imply (x, y) -> imply (eval (x)) (eval (y))
|Equal (x, y) -> if (exptoint (x) = exptoint (y)) then true
 else false),

exptoint -> (9608 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num a -> a
|Plus (a, b) -> (exptoint (a) + exptoint (b))
|Minus (a, b) -> (exptoint (a) - exptoint (b))),

imply -> (9609 : 
Input : (a : bool) (b : bool) 
Output : bool
Body : if ((a = true) && (b = false)) then false
 else true}
Edge : 
{(9607, 9607) -> ,
(9607, 9608) -> ,
(9607, 9609) -> ,
(9608, 9608) -> }
Starting : 9607
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9573 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9572 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9572, 9572) -> ,
(9573, 9572) -> ,
(9573, 9573) -> }
Starting : 9573
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
exptoint -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19605 : not (? (?)))

Decls : 
,Exp : Modify (19608 : ? (?))

Decls : 
,Exp : Modify (19611 : ? (?))

Decls : 
,Exp : Modify (19615 : ? (?))

Decls : 
,Exp : Modify (19618 : ? (?))

Decls : 
,Exp : Modify (19640 : if ((? (?) = false) || (? (?) = true)) then true
 else false)

Decls : 
,Exp : Modify (19651 : (? (?) = ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = 
fun f -> 
let rec exptoint  : (exp -> int) = 
fun e -> 
 (match e with 
|Num a -> a
|Plus (a, b) -> (exptoint (a) + exptoint (b))
|Minus (a, b) -> (exptoint (a) - exptoint (b)))
 in 

 (match f with 
|True -> true
|False -> false
|Not x -> not (eval (x))
|AndAlso (x, y) -> (eval (x) && eval (y))
|OrElse (x, y) -> (eval (x) || eval (y))
|Imply (x, y) -> 
let imply  : (bool -> (bool -> bool)) = 
fun a b -> if ((a = true) && (b = false)) then false
 else true
 in 
imply (eval (x)) (eval (y))
|Equal (x, y) -> if (exptoint (x) = exptoint (y)) then true
 else false)

Time : 0.413172006607
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub15.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec value  : (exp -> int) = (19596, 
fun n -> (19595, 
 (match (19579, n with 
|Num h -> (19580, h
|Plus (x, y) -> (19587, ((19583, (19581, value ((19582, x) + (19586, (19584, value ((19585, y))
|Minus (x, y) -> (19594, ((19590, (19588, value ((19589, x) * (19593, (19591, value ((19592, y)))

let rec eval  : (formula -> bool) = (19639, 
fun f -> (19638, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not h -> (19603, not ((19602, (19600, eval ((19601, h))
|AndAlso (x, y) -> (19610, ((19606, (19604, eval ((19605, x) && (19609, (19607, eval ((19608, y))
|OrElse (x, y) -> (19617, ((19613, (19611, eval ((19612, x) || (19616, (19614, eval ((19615, y))
|Imply (x, y) -> (19627, if (19622, ((19620, (19618, eval ((19619, x) = (19621, true) then (19625, (19623, eval ((19624, y)
 else (19626, true
|Equal (x, y) -> (19637, if (19634, ((19630, (19628, value ((19629, x) = (19633, (19631, value ((19632, y)) then (19635, true
 else (19636, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not h -> not (eval (h))
|AndAlso (x, y) -> (eval (x) && eval (y))
|OrElse (x, y) -> (eval (x) || eval (y))
|Imply (x, y) -> if (eval (x) = true) then eval (y)
 else true
|Equal (x, y) -> if (value (x) = value (y)) then true
 else false),

value -> (9343 : 
Input : (n : exp) 
Output : int
Body : 
 (match n with 
|Num h -> h
|Plus (x, y) -> (value (x) + value (y))
|Minus (x, y) -> (value (x) * value (y)))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> ,
(9344, 9344) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
value -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19594 : (? (?) - ? (?)))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19602 : ? (?))

Decls : 
,Exp : Modify (19606 : ? (?))

Decls : 
,Exp : Modify (19609 : ? (?))

Decls : 
,Exp : Modify (19613 : ? (?))

Decls : 
,Exp : Modify (19616 : ? (?))

Decls : 
,Exp : Modify (19622 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19625 : true)

Decls : 
,Exp : Modify (19626 : false)

Decls : 
,Exp : Modify (19637 : (? (?) = ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec value  : (exp -> int) = 
fun n -> 
 (match n with 
|Num h -> h
|Plus (x, y) -> (value (x) + value (y))
|Minus (x, y) -> (value (x) - value (y)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not h -> not (eval (h))
|AndAlso (x, y) -> (eval (x) && eval (y))
|OrElse (x, y) -> (eval (x) || eval (y))
|Imply (x, y) -> if (eval (x) = true) then eval (y)
 else true
|Equal (x, y) -> if (value (x) = value (y)) then true
 else false)

Time : 0.0136501789093
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub16.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec calc  : (exp -> int) = (19596, 
fun e -> (19595, 
 (match (19579, e with 
|Num n -> (19580, n
|Plus (n1, n2) -> (19587, ((19583, (19581, calc ((19582, n1) + (19586, (19584, calc ((19585, n2))
|Minus (n1, n2) -> (19594, ((19590, (19588, calc ((19589, n1) - (19593, (19591, calc ((19592, n2)))

let rec eval  : (formula -> bool) = (19642, 
fun f -> (19641, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not b1 -> (19605, if (19602, (19600, eval ((19601, b1) then (19603, false
 else (19604, true
|AndAlso (b1, b2) -> (19612, ((19608, (19606, eval ((19607, b1) && (19611, (19609, eval ((19610, b2))
|OrElse (b1, b2) -> (19619, ((19615, (19613, eval ((19614, b1) || (19618, (19616, eval ((19617, b2))
|Imply (b1, b2) -> (19633, if (19630, ((19624, ((19622, (19620, eval ((19621, b1) = (19623, false) && (19629, ((19627, (19625, eval ((19626, b2) = (19628, true)) then (19631, false
 else (19632, true
|Equal (e1, e2) -> (19640, ((19636, (19634, calc ((19635, e1) = (19639, (19637, calc ((19638, e2)))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{calc -> (9343 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num n -> n
|Plus (n1, n2) -> (calc (n1) + calc (n2))
|Minus (n1, n2) -> (calc (n1) - calc (n2))),

eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not b1 -> if eval (b1) then false
 else true
|AndAlso (b1, b2) -> (eval (b1) && eval (b2))
|OrElse (b1, b2) -> (eval (b1) || eval (b2))
|Imply (b1, b2) -> if ((eval (b1) = false) && (eval (b2) = true)) then false
 else true
|Equal (e1, e2) -> (calc (e1) = calc (e2)))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> ,
(9344, 9344) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{calc -> evalExp,
eval -> eval}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19605 : not (? (?)))

Decls : 
,Exp : Modify (19608 : ? (?))

Decls : 
,Exp : Modify (19611 : ? (?))

Decls : 
,Exp : Modify (19615 : ? (?))

Decls : 
,Exp : Modify (19618 : ? (?))

Decls : 
,Exp : Modify (19630 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19631 : true)

Decls : 
,Exp : Modify (19632 : false)

Decls : 
,Exp : Modify (19636 : ? (?))

Decls : 
,Exp : Modify (19639 : ? (?))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec calc  : (exp -> int) = 
fun e -> 
 (match e with 
|Num n -> n
|Plus (n1, n2) -> (calc (n1) + calc (n2))
|Minus (n1, n2) -> (calc (n1) - calc (n2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not b1 -> if eval (b1) then false
 else true
|AndAlso (b1, b2) -> (eval (b1) && eval (b2))
|OrElse (b1, b2) -> (eval (b1) || eval (b2))
|Imply (b1, b2) -> if ((eval (b1) = false) || (eval (b2) = true)) then true
 else false
|Equal (e1, e2) -> (calc (e1) = calc (e2)))

Time : 4.97008013725
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub18.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19787, 
fun f -> (19786, 
let pre a  = (19586, if (19583, ((19581, (19579, eval ((19580, a) = (19582, true) then (19584, True
 else (19585, False
 in 
(19785, 
let rec prem a  = (19618, 
 (match (19587, a with 
|Num b -> (19589, Num ((19588, b)
|Plus (Num b, Num c) -> (19593, Num ((19592, ((19590, b + (19591, c))
|Minus (Num b, Num c) -> (19597, Num ((19596, ((19594, b - (19595, c))
|Plus (b, c) -> (19607, (19598, prem ((19606, Plus ((19605, ((19601, (19599, prem ((19600, b), (19604, (19602, prem ((19603, c))))
|Minus (b, c) -> (19617, (19608, prem ((19616, Minus ((19615, ((19611, (19609, prem ((19610, b), (19614, (19612, prem ((19613, c)))))
 in 
(19784, 
 (match (19619, f with 
|True -> (19620, true
|False -> (19621, false
|Not a -> (19635, if (19624, ((19622, a = (19623, True) then (19625, false
 else (19634, if (19628, ((19626, a = (19627, False) then (19629, true
 else (19633, not ((19632, (19630, eval ((19631, a))
|AndAlso (a, b) -> (19681, if (19642, ((19638, ((19636, a = (19637, True) && (19641, ((19639, b = (19640, True)) then (19643, true
 else (19680, if (19650, ((19646, ((19644, a = (19645, False) && (19649, ((19647, b = (19648, True)) then (19651, false
 else (19679, if (19658, ((19654, ((19652, a = (19653, True) && (19657, ((19655, b = (19656, False)) then (19659, false
 else (19678, if (19666, ((19662, ((19660, a = (19661, False) && (19665, ((19663, b = (19664, False)) then (19667, false
 else (19677, (19668, eval ((19676, AndAlso ((19675, ((19671, (19669, pre ((19670, a), (19674, (19672, pre ((19673, b))))
|OrElse (a, b) -> (19727, if (19688, ((19684, ((19682, a = (19683, True) && (19687, ((19685, b = (19686, True)) then (19689, true
 else (19726, if (19696, ((19692, ((19690, a = (19691, False) && (19695, ((19693, b = (19694, True)) then (19697, true
 else (19725, if (19704, ((19700, ((19698, a = (19699, True) && (19703, ((19701, b = (19702, False)) then (19705, true
 else (19724, if (19712, ((19708, ((19706, a = (19707, False) && (19711, ((19709, b = (19710, False)) then (19713, false
 else (19723, (19714, eval ((19722, AndAlso ((19721, ((19717, (19715, pre ((19716, a), (19720, (19718, pre ((19719, b))))
|Imply (a, b) -> (19773, if (19734, ((19730, ((19728, a = (19729, True) && (19733, ((19731, b = (19732, True)) then (19735, true
 else (19772, if (19742, ((19738, ((19736, a = (19737, False) && (19741, ((19739, b = (19740, True)) then (19743, true
 else (19771, if (19750, ((19746, ((19744, a = (19745, True) && (19749, ((19747, b = (19748, False)) then (19751, false
 else (19770, if (19758, ((19754, ((19752, a = (19753, False) && (19757, ((19755, b = (19756, False)) then (19759, true
 else (19769, (19760, eval ((19768, Imply ((19767, ((19763, (19761, pre ((19762, a), (19766, (19764, pre ((19765, b))))
|Equal (a, b) -> (19783, if (19780, ((19776, (19774, prem ((19775, a) = (19779, (19777, prem ((19778, b)) then (19781, true
 else (19782, false)

let _  = (19793, (19788, eval ((19792, Not ((19791, Not ((19790, Not ((19789, False))))

let _  = (19800, (19794, eval ((19799, AndAlso ((19798, ((19795, True, (19797, Not ((19796, False))))

let _  = (19806, (19801, eval ((19805, AndAlso ((19804, ((19802, False, (19803, False)))

let _  = (19812, (19807, eval ((19811, AndAlso ((19810, ((19808, True, (19809, False)))

let _  = (19819, (19813, eval ((19818, OrElse ((19817, ((19814, True, (19816, Not ((19815, False))))

let _  = (19825, (19820, eval ((19824, OrElse ((19823, ((19821, False, (19822, False)))

let _  = (19831, (19826, eval ((19830, OrElse ((19829, ((19827, True, (19828, False)))

let _  = (19840, (19832, eval ((19839, Imply ((19838, ((19836, Imply ((19835, ((19833, True, (19834, False)), (19837, True)))

let _  = (19852, (19841, eval ((19851, Equal ((19850, ((19843, Num ((19842, 1), (19849, Plus ((19848, ((19845, Num ((19844, 1), (19847, Num ((19846, 1))))))

let _  = (19864, (19853, eval ((19863, Equal ((19862, ((19855, Num ((19854, 2), (19861, Minus ((19860, ((19857, Num ((19856, 3), (19859, Num ((19858, 1))))))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/16/sub72.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec cal num  = (14536, 
 (match (14501, num with 
|Num i -> (14503, Num ((14502, i)
|Plus (a, b) -> (14519, 
 (match (14506, ((14504, a, (14505, b) with 
|(Num a2, Num b2) -> (14510, Num ((14509, ((14507, a2 + (14508, b2))
|(_, _) -> (14518, Plus ((14517, ((14513, (14511, cal ((14512, a), (14516, (14514, cal ((14515, b))))
|Minus (a, b) -> (14535, 
 (match (14522, ((14520, a, (14521, b) with 
|(Num a2, Num b2) -> (14526, Num ((14525, ((14523, a2 - (14524, b2))
|(_, _) -> (14534, Minus ((14533, ((14529, (14527, cal ((14528, a), (14532, (14530, cal ((14531, b)))))

let rec eval  : (formula -> bool) = (14597, 
fun f -> (14596, 
 (match (14537, f with 
|True -> (14538, true
|False -> (14539, false
|Not x -> (14547, if (14544, ((14542, (14540, eval ((14541, x) = (14543, true) then (14545, false
 else (14546, true
|AndAlso (x, y) -> (14554, ((14550, (14548, eval ((14549, x) && (14553, (14551, eval ((14552, y))
|OrElse (x, y) -> (14561, ((14557, (14555, eval ((14556, x) || (14560, (14558, eval ((14559, y))
|Imply (x, y) -> (14575, if (14572, ((14566, ((14564, (14562, eval ((14563, x) = (14565, true) && (14571, ((14569, (14567, eval ((14568, y) = (14570, false)) then (14573, false
 else (14574, true
|Equal (x, y) -> (14595, 
 (match (14578, ((14576, x, (14577, y) with 
|(Num x2, Num y2) -> (14584, if (14581, ((14579, x2 = (14580, y2) then (14582, true
 else (14583, false
|(_, _) -> (14594, (14585, eval ((14593, Equal ((14592, ((14588, (14586, cal ((14587, x), (14591, (14589, cal ((14590, y))))))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9607 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not a -> if (a = True) then false
 else if (a = False) then true
 else not (eval (a))
|AndAlso (a, b) -> if ((a = True) && (b = True)) then true
 else if ((a = False) && (b = True)) then false
 else if ((a = True) && (b = False)) then false
 else if ((a = False) && (b = False)) then false
 else eval (AndAlso ((pre (a), pre (b))))
|OrElse (a, b) -> if ((a = True) && (b = True)) then true
 else if ((a = False) && (b = True)) then true
 else if ((a = True) && (b = False)) then true
 else if ((a = False) && (b = False)) then false
 else eval (AndAlso ((pre (a), pre (b))))
|Imply (a, b) -> if ((a = True) && (b = True)) then true
 else if ((a = False) && (b = True)) then true
 else if ((a = True) && (b = False)) then false
 else if ((a = False) && (b = False)) then true
 else eval (Imply ((pre (a), pre (b))))
|Equal (a, b) -> if (prem (a) = prem (b)) then true
 else false),

pre -> (9608 : 
Input : (a : formula) 
Output : formula
Body : if (eval (a) = true) then True
 else False,

prem -> (9609 : 
Input : (a : exp) 
Output : exp
Body : 
 (match a with 
|Num b -> Num (b)
|Plus (Num b, Num c) -> Num ((b + c))
|Minus (Num b, Num c) -> Num ((b - c))
|Plus (b, c) -> prem (Plus ((prem (b), prem (c))))
|Minus (b, c) -> prem (Minus ((prem (b), prem (c)))))}
Edge : 
{(9607, 9607) -> ,
(9607, 9608) -> ,
(9607, 9609) -> ,
(9608, 9607) -> ,
(9609, 9609) -> }
Starting : 9607
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{cal -> (9572 : 
Input : (num : exp) 
Output : exp
Body : 
 (match num with 
|Num i -> Num (i)
|Plus (a, b) -> 
 (match (a, b) with 
|(Num a2, Num b2) -> Num ((a2 + b2))
|(_, _) -> Plus ((cal (a), cal (b))))
|Minus (a, b) -> 
 (match (a, b) with 
|(Num a2, Num b2) -> Num ((a2 - b2))
|(_, _) -> Minus ((cal (a), cal (b))))),

eval -> (9573 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not x -> if (eval (x) = true) then false
 else true
|AndAlso (x, y) -> (eval (x) && eval (y))
|OrElse (x, y) -> (eval (x) || eval (y))
|Imply (x, y) -> if ((eval (x) = true) && (eval (y) = false)) then false
 else true
|Equal (x, y) -> 
 (match (x, y) with 
|(Num x2, Num y2) -> if (x2 = y2) then true
 else false
|(_, _) -> eval (Equal ((cal (x), cal (y))))))}
Edge : 
{(9572, 9572) -> ,
(9573, 9572) -> ,
(9573, 9573) -> }
Starting : 9573
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
prem -> cal}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19587 : ?)

Decls : 
,Exp : Modify (19588 : ?)

Decls : 
,Exp : Modify (19607 : 
 (match (?, ?) with 
|(Num a2, Num b2) -> Num ((? + ?))
|(_, _) -> Plus ((? (?), ? (?)))))

Decls : 
,Exp : Modify (19617 : 
 (match (?, ?) with 
|(Num a2, Num b2) -> Num ((? - ?))
|(_, _) -> Minus ((? (?), ? (?)))))

Decls : 
,Exp : Modify (19619 : ?)

Decls : 
,Exp : Modify (19622 : ? (?))

Decls : 
,Exp : Modify (19623 : true)

Decls : 
,Exp : Modify (19634 : true)

Decls : 
,Exp : Modify (19681 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19727 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19728 : ? (?))

Decls : 
,Exp : Modify (19729 : true)

Decls : 
,Exp : Modify (19731 : ? (?))

Decls : 
,Exp : Modify (19732 : false)

Decls : 
,Exp : Modify (19735 : false)

Decls : 
,Exp : Modify (19772 : true)

Decls : 
,Exp : Modify (19783 : 
 (match (?, ?) with 
|(Num x2, Num y2) -> if (? = ?) then true
 else false
|(_, _) -> ? (Equal ((? (?), ? (?))))))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = 
fun f -> 
let pre a  = if (eval (a) = true) then True
 else False
 in 

let rec prem a  = 
 (match a with 
|Num b -> Num (b)
|Plus (Num b, Num c) -> Num ((b + c))
|Minus (Num b, Num c) -> Num ((b - c))
|Plus (b, c) -> prem (Plus ((prem (b), prem (c))))
|Minus (b, c) -> prem (Minus ((prem (b), prem (c)))))
 in 

 (match f with 
|True -> true
|False -> false
|Not a -> if (a = True) then false
 else if (a = False) then true
 else not (eval (a))
|AndAlso (a, b) -> if ((a = True) && (b = True)) then true
 else if ((a = False) && (b = True)) then false
 else if ((a = True) && (b = False)) then false
 else if ((a = False) && (b = False)) then false
 else eval (AndAlso ((pre (a), pre (b))))
|OrElse (a, b) -> (eval (b) || eval (a))
|Imply (a, b) -> if ((a = True) && (b = True)) then true
 else if ((a = False) && (b = True)) then true
 else if ((a = True) && (b = False)) then false
 else if ((a = False) && (b = False)) then true
 else eval (Imply ((pre (a), pre (b))))
|Equal (a, b) -> if (prem (a) = prem (b)) then true
 else false)

let _  = eval (Not (Not (Not (False))))

let _  = eval (AndAlso ((True, Not (False))))

let _  = eval (AndAlso ((False, False)))

let _  = eval (AndAlso ((True, False)))

let _  = eval (OrElse ((True, Not (False))))

let _  = eval (OrElse ((False, False)))

let _  = eval (OrElse ((True, False)))

let _  = eval (Imply ((Imply ((True, False)), True)))

let _  = eval (Equal ((Num (1), Plus ((Num (1), Num (1))))))

let _  = eval (Equal ((Num (2), Minus ((Num (3), Num (1))))))

Time : 0.414861917496
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub2.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eq  : (exp -> int) = (19602, 
fun f -> (19601, 
 (match (19579, f with 
|Num a -> (19580, a
|Plus (a, b) -> (19590, (19581, eq ((19589, Num ((19588, ((19584, (19582, eq ((19583, a) + (19587, (19585, eq ((19586, b))))
|Minus (a, b) -> (19600, (19591, eq ((19599, Num ((19598, ((19594, (19592, eq ((19593, a) - (19597, (19595, eq ((19596, b)))))

let rec eval  : (formula -> bool) = (19706, 
fun f -> (19705, 
 (match (19603, f with 
|True -> (19604, true
|False -> (19605, false
|Not True -> (19606, false
|Not False -> (19607, true
|Not a -> (19610, (19608, eval ((19609, a)
|Equal (a, b) -> (19620, if (19617, ((19613, (19611, eq ((19612, a) = (19616, (19614, eq ((19615, b)) then (19618, true
 else (19619, false
|Imply (a, b) -> (19648, 
 (match (19623, ((19621, a, (19622, b) with 
|(True, True) -> (19624, true
|(True, False) -> (19625, false
|(False, True) -> (19626, true
|(False, False) -> (19627, true
|(_, _) -> (19647, (19628, eval ((19646, Imply ((19645, ((19636, if (19633, ((19631, (19629, eval ((19630, a) = (19632, true) then (19634, True
 else (19635, False, (19644, if (19641, ((19639, (19637, eval ((19638, b) = (19640, true) then (19642, True
 else (19643, False))))
|AndAlso (a, b) -> (19676, 
 (match (19651, ((19649, a, (19650, b) with 
|(True, True) -> (19652, true
|(True, False) -> (19653, false
|(False, True) -> (19654, false
|(False, False) -> (19655, false
|(_, _) -> (19675, (19656, eval ((19674, AndAlso ((19673, ((19664, if (19661, ((19659, (19657, eval ((19658, a) = (19660, true) then (19662, True
 else (19663, False, (19672, if (19669, ((19667, (19665, eval ((19666, b) = (19668, true) then (19670, True
 else (19671, False))))
|OrElse (a, b) -> (19704, 
 (match (19679, ((19677, a, (19678, b) with 
|(True, True) -> (19680, true
|(True, False) -> (19681, true
|(False, True) -> (19682, true
|(False, False) -> (19683, false
|(_, _) -> (19703, (19684, eval ((19702, OrElse ((19701, ((19692, if (19689, ((19687, (19685, eval ((19686, a) = (19688, true) then (19690, True
 else (19691, False, (19700, if (19697, ((19695, (19693, eval ((19694, b) = (19696, true) then (19698, True
 else (19699, False)))))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eq -> (9343 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num a -> a
|Plus (a, b) -> eq (Num ((eq (a) + eq (b))))
|Minus (a, b) -> eq (Num ((eq (a) - eq (b))))),

eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not True -> false
|Not False -> true
|Not a -> eval (a)
|Equal (a, b) -> if (eq (a) = eq (b)) then true
 else false
|Imply (a, b) -> 
 (match (a, b) with 
|(True, True) -> true
|(True, False) -> false
|(False, True) -> true
|(False, False) -> true
|(_, _) -> eval (Imply ((if (eval (a) = true) then True
 else False, if (eval (b) = true) then True
 else False))))
|AndAlso (a, b) -> 
 (match (a, b) with 
|(True, True) -> true
|(True, False) -> false
|(False, True) -> false
|(False, False) -> false
|(_, _) -> eval (AndAlso ((if (eval (a) = true) then True
 else False, if (eval (b) = true) then True
 else False))))
|OrElse (a, b) -> 
 (match (a, b) with 
|(True, True) -> true
|(True, False) -> true
|(False, True) -> true
|(False, False) -> false
|(_, _) -> eval (OrElse ((if (eval (a) = true) then True
 else False, if (eval (b) = true) then True
 else False)))))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> ,
(9344, 9344) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eq -> evalExp,
eval -> eval}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19590 : (? (?) + ? (?)))

Decls : 
,Exp : Modify (19600 : (? (?) - ? (?)))

Decls : 
,Exp : Modify (19603 : ?)

Decls : 
,Exp : Modify (19610 : not (? (?)))

Decls : 
,Exp : Modify (19620 : (? (?) = ? (?)))

Decls : 
,Exp : Modify (19648 : if ((? (?) = false) || (? (?) = true)) then true
 else false)

Decls : 
,Exp : Modify (19676 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19704 : (? (?) || ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eq  : (exp -> int) = 
fun f -> 
 (match f with 
|Num a -> a
|Plus (a, b) -> eq (Num ((eq (a) + eq (b))))
|Minus (a, b) -> eq (Num ((eq (a) - eq (b)))))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not True -> false
|Not False -> true
|Not a -> not (eval (a))
|Equal (a, b) -> if (eq (a) = eq (b)) then true
 else false
|Imply (a, b) -> 
 (match (a, b) with 
|(True, True) -> true
|(True, False) -> false
|(False, True) -> true
|(False, False) -> true
|(_, _) -> eval (Imply ((if (eval (a) = true) then True
 else False, if (eval (b) = true) then True
 else False))))
|AndAlso (a, b) -> 
 (match (a, b) with 
|(True, True) -> true
|(True, False) -> false
|(False, True) -> false
|(False, False) -> false
|(_, _) -> eval (AndAlso ((if (eval (a) = true) then True
 else False, if (eval (b) = true) then True
 else False))))
|OrElse (a, b) -> 
 (match (a, b) with 
|(True, True) -> true
|(True, False) -> true
|(False, True) -> true
|(False, False) -> false
|(_, _) -> eval (OrElse ((if (eval (a) = true) then True
 else False, if (eval (b) = true) then True
 else False)))))

Time : 0.00469708442688
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub20.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let eval  : (formula -> bool) = (19625, 
fun f -> (19624, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not x -> (19587, if (19584, ((19582, x = (19583, True) then (19585, false
 else (19586, true
|AndAlso (x, y) -> (19597, if (19594, ((19590, ((19588, x = (19589, True) && (19593, ((19591, y = (19592, True)) then (19595, true
 else (19596, false
|OrElse (x, y) -> (19607, if (19604, ((19600, ((19598, x = (19599, False) && (19603, ((19601, y = (19602, False)) then (19605, false
 else (19606, true
|Imply (x, y) -> (19617, if (19614, ((19610, ((19608, x = (19609, True) && (19613, ((19611, y = (19612, False)) then (19615, false
 else (19616, true
|Equal (x, y) -> (19623, if (19620, ((19618, x = (19619, y) then (19621, true
 else (19622, false)

let _  = (19634, (19626, eval ((19633, Imply ((19632, ((19630, Imply ((19629, ((19627, True, (19628, False)), (19631, True)))

let _  = (19646, (19635, eval ((19645, Equal ((19644, ((19637, Num ((19636, 1), (19643, Plus ((19642, ((19639, Num ((19638, 1), (19641, Num ((19640, 2))))))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not x -> if (x = True) then false
 else true
|AndAlso (x, y) -> if ((x = True) && (y = True)) then true
 else false
|OrElse (x, y) -> if ((x = False) && (y = False)) then false
 else true
|Imply (x, y) -> if ((x = True) && (y = False)) then false
 else true
|Equal (x, y) -> if (x = y) then true
 else false)}
Edge : 
empty
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19587 : not (? (?)))

Decls : 
,Exp : Modify (19597 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19607 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19614 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19615 : true)

Decls : 
,Exp : Modify (19616 : false)

Decls : 
,Exp : Modify (19623 : (? (?) = ? (?)))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub22.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19661, 
fun f -> (19660, 
let rec exp f  = (19595, 
 (match (19579, f with 
|Num x -> (19580, x
|Plus (x, y) -> (19587, ((19583, (19581, exp ((19582, x) + (19586, (19584, exp ((19585, y))
|Minus (x, y) -> (19594, ((19590, (19588, exp ((19589, x) - (19593, (19591, exp ((19592, y)))
 in 
(19659, 
 (match (19596, f with 
|True -> (19597, true
|False -> (19598, false
|Not x -> (19606, if (19603, ((19601, (19599, eval ((19600, x) = (19602, true) then (19604, false
 else (19605, true
|AndAlso (x, y) -> (19620, if (19617, ((19611, ((19609, (19607, eval ((19608, x) = (19610, true) || (19616, ((19614, (19612, eval ((19613, y) = (19615, true)) then (19618, true
 else (19619, false
|OrElse (x, y) -> (19634, if (19631, ((19625, ((19623, (19621, eval ((19622, x) = (19624, false) && (19630, ((19628, (19626, eval ((19627, y) = (19629, false)) then (19632, false
 else (19633, true
|Imply (x, y) -> (19648, if (19645, ((19639, ((19637, (19635, eval ((19636, x) = (19638, true) && (19644, ((19642, (19640, eval ((19641, y) = (19643, false)) then (19646, false
 else (19647, true
|Equal (x, y) -> (19658, if (19655, ((19651, (19649, exp ((19650, x) = (19654, (19652, exp ((19653, y)) then (19656, true
 else (19657, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9343 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not x -> if (eval (x) = true) then false
 else true
|AndAlso (x, y) -> if ((eval (x) = true) || (eval (y) = true)) then true
 else false
|OrElse (x, y) -> if ((eval (x) = false) && (eval (y) = false)) then false
 else true
|Imply (x, y) -> if ((eval (x) = true) && (eval (y) = false)) then false
 else true
|Equal (x, y) -> if (exp (x) = exp (y)) then true
 else false),

exp -> (9344 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num x -> x
|Plus (x, y) -> (exp (x) + exp (y))
|Minus (x, y) -> (exp (x) - exp (y)))}
Edge : 
{(9343, 9343) -> ,
(9343, 9344) -> ,
(9344, 9344) -> }
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
exp -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19596 : ?)

Decls : 
,Exp : Modify (19606 : not (? (?)))

Decls : 
,Exp : Modify (19620 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19634 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19645 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19646 : true)

Decls : 
,Exp : Modify (19647 : false)

Decls : 
,Exp : Modify (19658 : (? (?) = ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = 
fun f -> 
let rec exp f  = 
 (match f with 
|Num x -> x
|Plus (x, y) -> (exp (x) + exp (y))
|Minus (x, y) -> (exp (x) - exp (y)))
 in 

 (match f with 
|True -> true
|False -> false
|Not x -> if (eval (x) = true) then false
 else true
|AndAlso (x, y) -> (eval (x) && eval (y))
|OrElse (x, y) -> if ((eval (x) = false) && (eval (y) = false)) then false
 else true
|Imply (x, y) -> if ((eval (x) = true) && (eval (y) = false)) then false
 else true
|Equal (x, y) -> if (exp (x) = exp (y)) then true
 else false)

Time : 0.0122179985046
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub24.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let eval  : (formula -> bool) = (19609, 
fun f -> (19608, 
let rec eval' e  = (19595, 
 (match (19579, e with 
|Num _ -> (19580, 0
|Plus (e1, e2) -> (19587, ((19583, (19581, eval' ((19582, e1) + (19586, (19584, eval' ((19585, e2))
|Minus (e1, e2) -> (19594, ((19590, (19588, eval' ((19589, e1) - (19593, (19591, eval' ((19592, e2)))
 in 
(19607, 
 (match (19596, f with 
|Equal (e1, e2) -> (19606, if (19603, ((19599, (19597, eval' ((19598, e1) = (19602, (19600, eval' ((19601, e2)) then (19604, true
 else (19605, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9343 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|Equal (e1, e2) -> if (eval' (e1) = eval' (e2)) then true
 else false),

eval' -> (9344 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num _ -> 0
|Plus (e1, e2) -> (eval' (e1) + eval' (e2))
|Minus (e1, e2) -> (eval' (e1) - eval' (e2)))}
Edge : 
{(9343, 9344) -> ,
(9344, 9344) -> }
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
eval' -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19596 : ?)

Decls : 
,Exp : Modify (19606 : (? (?) = ? (?)))

Decls : 
,Exp : Insert (Num n -> ? At label 19595

Decls : 
,Exp : Insert (AndAlso (f1, f2) -> (? (?) && ? (?)) At label 19607

Decls : 
,Exp : Insert (False -> false At label 19607

Decls : 
,Exp : Insert (Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false At label 19607

Decls : 
,Exp : Insert (Not f -> not (? (?)) At label 19607

Decls : 
,Exp : Insert (OrElse (f1, f2) -> (? (?) || ? (?)) At label 19607

Decls : 
,Exp : Insert (True -> true At label 19607

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub26.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec math  : (exp -> int) = (19596, 
fun e -> (19595, 
 (match (19579, e with 
|Num e1 -> (19580, e1
|Plus (e1, e2) -> (19587, ((19583, (19581, math ((19582, e1) + (19586, (19584, math ((19585, e2))
|Minus (e1, e2) -> (19594, ((19590, (19588, math ((19589, e1) - (19593, (19591, math ((19592, e2)))

let eval  : (formula -> bool) = (19648, 
fun f -> (19647, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not f1 -> (19605, if (19602, ((19600, f1 = (19601, True) then (19603, false
 else (19604, true
|AndAlso (f1, f2) -> (19615, if (19612, ((19608, ((19606, f1 = (19607, True) && (19611, ((19609, f2 = (19610, True)) then (19613, true
 else (19614, false
|OrElse (f1, f2) -> (19625, if (19622, ((19618, ((19616, f1 = (19617, False) && (19621, ((19619, f2 = (19620, False)) then (19623, false
 else (19624, true
|Imply (f1, f2) -> (19636, if (19628, ((19626, f1 = (19627, False) then (19629, true
 else (19635, if (19632, ((19630, f2 = (19631, True) then (19633, true
 else (19634, false
|Equal (e1, e2) -> (19646, if (19643, ((19639, (19637, math ((19638, e1) = (19642, (19640, math ((19641, e2)) then (19644, true
 else (19645, false)

let _  = (19657, (19649, eval ((19656, Imply ((19655, ((19653, Imply ((19652, ((19650, True, (19651, False)), (19654, True)))

let _  = (19669, (19658, eval ((19668, Equal ((19667, ((19660, Num ((19659, 1), (19666, Plus ((19665, ((19662, Num ((19661, 1), (19664, Num ((19663, 2))))))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f1 -> if (f1 = True) then false
 else true
|AndAlso (f1, f2) -> if ((f1 = True) && (f2 = True)) then true
 else false
|OrElse (f1, f2) -> if ((f1 = False) && (f2 = False)) then false
 else true
|Imply (f1, f2) -> if (f1 = False) then true
 else if (f2 = True) then true
 else false
|Equal (e1, e2) -> if (math (e1) = math (e2)) then true
 else false),

math -> (9343 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num e1 -> e1
|Plus (e1, e2) -> (math (e1) + math (e2))
|Minus (e1, e2) -> (math (e1) - math (e2)))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
math -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19605 : not (? (?)))

Decls : 
,Exp : Modify (19615 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19625 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19628 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19635 : false)

Decls : 
,Exp : Modify (19646 : (? (?) = ? (?)))

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub29.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19641, 
fun f -> (19640, 
let rec op  : (exp -> int) = (19596, 
fun e -> (19595, 
 (match (19579, e with 
|Num i -> (19580, i
|Plus (e1, e2) -> (19587, ((19583, (19581, op ((19582, e1) + (19586, (19584, op ((19585, e2))
|Minus (e1, e2) -> (19594, ((19590, (19588, op ((19589, e1) - (19593, (19591, op ((19592, e2)))
 in 
(19639, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not f -> (19604, ((19602, (19600, eval ((19601, f) = (19603, false)
|AndAlso (f1, f2) -> (19611, ((19607, (19605, eval ((19606, f1) && (19610, (19608, eval ((19609, f2))
|OrElse (f1, f2) -> (19618, ((19614, (19612, eval ((19613, f1) || (19617, (19615, eval ((19616, f2))
|Imply (f1, f2) -> (19631, ((19625, ((19621, (19619, eval ((19620, f1) && (19624, (19622, eval ((19623, f2)) || (19630, ((19628, (19626, eval ((19627, f2) = (19629, false))
|Equal (e1, e2) -> (19638, ((19634, (19632, op ((19633, e1) = (19637, (19635, op ((19636, e2)))

let _  = (19650, (19642, eval ((19649, Imply ((19648, ((19646, Imply ((19645, ((19643, True, (19644, False)), (19647, True)))

let _  = (19662, (19651, eval ((19661, Equal ((19660, ((19653, Num ((19652, 1), (19659, Plus ((19658, ((19655, Num ((19654, 1), (19657, Num ((19656, 2))))))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9343 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> (eval (f) = false)
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> ((eval (f1) && eval (f2)) || (eval (f2) = false))
|Equal (e1, e2) -> (op (e1) = op (e2))),

op -> (9344 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num i -> i
|Plus (e1, e2) -> (op (e1) + op (e2))
|Minus (e1, e2) -> (op (e1) - op (e2)))}
Edge : 
{(9343, 9343) -> ,
(9343, 9344) -> ,
(9344, 9344) -> }
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
op -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19604 : not (? (?)))

Decls : 
,Exp : Modify (19607 : ? (?))

Decls : 
,Exp : Modify (19610 : ? (?))

Decls : 
,Exp : Modify (19614 : ? (?))

Decls : 
,Exp : Modify (19617 : ? (?))

Decls : 
,Exp : Modify (19631 : if ((? (?) = false) || (? (?) = true)) then true
 else false)

Decls : 
,Exp : Modify (19634 : ? (?))

Decls : 
,Exp : Modify (19637 : ? (?))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = 
fun f -> 
let rec op  : (exp -> int) = 
fun e -> 
 (match e with 
|Num i -> i
|Plus (e1, e2) -> (op (e1) + op (e2))
|Minus (e1, e2) -> (op (e1) - op (e2)))
 in 

 (match f with 
|True -> true
|False -> false
|Not f -> (eval (f) = false)
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (e1, e2) -> (op (e1) = op (e2)))

let _  = eval (Imply ((Imply ((True, False)), True)))

let _  = eval (Equal ((Num (1), Plus ((Num (1), Num (2))))))

Time : 0.418131113052
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub31.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let eval  : (formula -> bool) = (19625, 
fun x -> (19624, 
 (match (19579, x with 
|True -> (19580, true
|False -> (19581, false
|Not x -> (19587, if (19584, ((19582, x = (19583, True) then (19585, false
 else (19586, true
|AndAlso (x, y) -> (19597, if (19594, ((19590, ((19588, x = (19589, True) && (19593, ((19591, y = (19592, True)) then (19595, true
 else (19596, false
|OrElse (x, y) -> (19607, if (19604, ((19600, ((19598, x = (19599, True) || (19603, ((19601, y = (19602, True)) then (19605, true
 else (19606, false
|Imply (x, y) -> (19617, if (19614, ((19610, ((19608, x = (19609, True) && (19613, ((19611, y = (19612, False)) then (19615, false
 else (19616, true
|Equal (x, y) -> (19623, if (19620, ((19618, x = (19619, y) then (19621, true
 else (19622, false)

let rec cal  : (exp -> int) = (19643, 
fun x -> (19642, 
 (match (19626, x with 
|Num x -> (19627, x
|Plus (x, y) -> (19634, ((19630, (19628, cal ((19629, x) + (19633, (19631, cal ((19632, y))
|Minus (x, y) -> (19641, ((19637, (19635, cal ((19636, x) - (19640, (19638, cal ((19639, y)))

let _  = (19646, (19644, eval ((19645, True)

let _  = (19652, (19647, eval ((19651, AndAlso ((19650, ((19648, True, (19649, False)))

let _  = (19661, (19653, eval ((19660, Imply ((19659, ((19657, Imply ((19656, ((19654, True, (19655, False)), (19658, True)))

let _  = (19673, (19662, eval ((19672, Equal ((19671, ((19664, Num ((19663, 1), (19670, Plus ((19669, ((19666, Num ((19665, 1), (19668, Num ((19667, 2))))))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9343 : 
Input : (x : formula) 
Output : bool
Body : 
 (match x with 
|True -> true
|False -> false
|Not x -> if (x = True) then false
 else true
|AndAlso (x, y) -> if ((x = True) && (y = True)) then true
 else false
|OrElse (x, y) -> if ((x = True) || (y = True)) then true
 else false
|Imply (x, y) -> if ((x = True) && (y = False)) then false
 else true
|Equal (x, y) -> if (x = y) then true
 else false)}
Edge : 
empty
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19587 : not (? (?)))

Decls : 
,Exp : Modify (19597 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19607 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19614 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19615 : true)

Decls : 
,Exp : Modify (19616 : false)

Decls : 
,Exp : Modify (19623 : (? (?) = ? (?)))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub37.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval_exp  : (exp -> int) = (19596, 
fun f -> (19595, 
 (match (19579, f with 
|Num a -> (19580, a
|Plus (a, b) -> (19587, ((19583, (19581, eval_exp ((19582, a) + (19586, (19584, eval_exp ((19585, b))
|Minus (a, b) -> (19594, ((19590, (19588, eval_exp ((19589, a) - (19593, (19591, eval_exp ((19592, b)))

let rec eval  : (formula -> bool) = (19643, 
fun f -> (19642, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not a -> (19609, if (19602, ((19600, a = (19601, True) then (19605, (19603, eval ((19604, False)
 else (19608, (19606, eval ((19607, True)
|AndAlso (a, b) -> (19616, ((19612, (19610, eval ((19611, a) && (19615, (19613, eval ((19614, b))
|OrElse (a, b) -> (19623, ((19619, (19617, eval ((19618, a) || (19622, (19620, eval ((19621, b))
|Imply (a, b) -> (19631, ((19627, (19624, eval ((19626, Not ((19625, a)) || (19630, (19628, eval ((19629, b))
|Equal (a, b) -> (19641, if (19638, ((19634, (19632, eval_exp ((19633, a) = (19637, (19635, eval_exp ((19636, b)) then (19639, true
 else (19640, false)

let _  = (19646, (19644, eval ((19645, True)

let _  = (19658, (19647, eval ((19657, Equal ((19656, ((19649, Num ((19648, 4), (19655, Plus ((19654, ((19651, Num ((19650, 1), (19653, Num ((19652, 2))))))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not a -> if (a = True) then eval (False)
 else eval (True)
|AndAlso (a, b) -> (eval (a) && eval (b))
|OrElse (a, b) -> (eval (a) || eval (b))
|Imply (a, b) -> (eval (Not (a)) || eval (b))
|Equal (a, b) -> if (eval_exp (a) = eval_exp (b)) then true
 else false),

eval_exp -> (9343 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num a -> a
|Plus (a, b) -> (eval_exp (a) + eval_exp (b))
|Minus (a, b) -> (eval_exp (a) - eval_exp (b)))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> ,
(9344, 9344) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
eval_exp -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19609 : not (? (?)))

Decls : 
,Exp : Modify (19612 : ? (?))

Decls : 
,Exp : Modify (19615 : ? (?))

Decls : 
,Exp : Modify (19619 : ? (?))

Decls : 
,Exp : Modify (19622 : ? (?))

Decls : 
,Exp : Modify (19631 : if ((? (?) = false) || (? (?) = true)) then true
 else false)

Decls : 
,Exp : Modify (19641 : (? (?) = ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval_exp  : (exp -> int) = 
fun f -> 
 (match f with 
|Num a -> a
|Plus (a, b) -> (eval_exp (a) + eval_exp (b))
|Minus (a, b) -> (eval_exp (a) - eval_exp (b)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not a -> not (eval (a))
|AndAlso (a, b) -> (eval (a) && eval (b))
|OrElse (a, b) -> (eval (a) || eval (b))
|Imply (a, b) -> (eval (Not (a)) || eval (b))
|Equal (a, b) -> if (eval_exp (a) = eval_exp (b)) then true
 else false)

let _  = eval (True)

let _  = eval (Equal ((Num (4), Plus ((Num (1), Num (2))))))

Time : 0.0112600326538
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub39.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19619, 
fun f -> (19618, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not f -> (19617, 
 (match (19582, f with 
|True -> (19583, false
|False -> (19584, true
|AndAlso (a, b) -> (19594, if (19591, ((19587, (19585, eval ((19586, a) = (19590, (19588, eval ((19589, b)) then (19592, true
 else (19593, false
|OrElse (a, b) -> (19604, if (19601, ((19597, (19595, eval ((19596, a) = (19600, (19598, eval ((19599, b)) then (19602, false
 else (19603, true
|Imply (a, b) -> (19610, if (19607, ((19605, b = (19606, True) then (19608, true
 else (19609, false
|Equal (a, b) -> (19616, if (19613, ((19611, a = (19612, b) then (19614, true
 else (19615, false))

let _  = (19623, (19620, eval ((19622, Not ((19621, True))

let _  = (19627, (19624, eval ((19626, Not ((19625, False))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> 
 (match f with 
|True -> false
|False -> true
|AndAlso (a, b) -> if (eval (a) = eval (b)) then true
 else false
|OrElse (a, b) -> if (eval (a) = eval (b)) then false
 else true
|Imply (a, b) -> if (b = True) then true
 else false
|Equal (a, b) -> if (a = b) then true
 else false))}
Edge : 
{(9079, 9079) -> }
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19617 : not (? (?)))

Decls : 
,Exp : Insert (AndAlso (f1, f2) -> (? (?) && ? (?)) At label 19618

Decls : 
,Exp : Insert (Equal (exp1, exp2) -> (? (?) = ? (?)) At label 19618

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
,Exp : Insert (Imply (f1, f2) -> if ((? (?) = false) || (? (?) = true)) then true
 else false At label 19618

Decls : 
,Exp : Insert (OrElse (f1, f2) -> (? (?) || ? (?)) At label 19618

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|OrElse (f1, f2) -> (eval (f1) || eval (f1)))

let _  = eval (Not (True))

let _  = eval (Not (False))

Time : 11.6999809742
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub4.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19631, 
fun f -> (19630, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not f -> (19589, if (19586, ((19584, (19582, eval ((19583, f) = (19585, true) then (19587, false
 else (19588, true
|AndAlso (f1, f2) -> (19599, if (19594, ((19592, (19590, eval ((19591, f1) = (19593, false) then (19595, false
 else (19598, (19596, eval ((19597, f2)
|OrElse (f1, f2) -> (19609, if (19604, ((19602, (19600, eval ((19601, f1) = (19603, true) then (19605, true
 else (19608, (19606, eval ((19607, f2)
|Imply (f1, f2) -> (19623, if (19620, ((19614, ((19612, (19610, eval ((19611, f1) = (19613, true) && (19619, ((19617, (19615, eval ((19616, f2) = (19618, false)) then (19621, false
 else (19622, true
|Equal (e1, e2) -> (19629, if (19626, ((19624, e1 = (19625, e2) then (19627, true
 else (19628, false)

let _  = (19640, (19632, eval ((19639, Imply ((19638, ((19636, Imply ((19635, ((19633, True, (19634, False)), (19637, True)))

let _  = (19652, (19641, eval ((19651, Equal ((19650, ((19643, Num ((19642, 1), (19649, Plus ((19648, ((19645, Num ((19644, 1), (19647, Num ((19646, 2))))))

let _  = (19661, (19653, eval ((19660, Imply ((19659, ((19657, Imply ((19656, ((19654, False, (19655, True)), (19658, False)))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9079 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> if (eval (f) = true) then false
 else true
|AndAlso (f1, f2) -> if (eval (f1) = false) then false
 else eval (f2)
|OrElse (f1, f2) -> if (eval (f1) = true) then true
 else eval (f2)
|Imply (f1, f2) -> if ((eval (f1) = true) && (eval (f2) = false)) then false
 else true
|Equal (e1, e2) -> if (e1 = e2) then true
 else false)}
Edge : 
{(9079, 9079) -> }
Starting : 9079
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9045 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9044 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9044, 9044) -> ,
(9045, 9044) -> ,
(9045, 9045) -> }
Starting : 9045
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19589 : not (? (?)))

Decls : 
,Exp : Modify (19599 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19609 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19620 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19621 : true)

Decls : 
,Exp : Modify (19622 : false)

Decls : 
,Exp : Modify (19629 : (? (?) = ? (?)))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> if (eval (f) = true) then false
 else true
|AndAlso (f1, f2) -> if (eval (f1) = false) then false
 else eval (f2)
|OrElse (f1, f2) -> if (eval (f1) = true) then true
 else eval (f2)
|Imply (f1, f2) -> if ((eval (f1) = true) && (eval (f2) = false)) then false
 else true
|Equal (e1, e2) -> (evalExp (e1) = evalExp (e2)))

let _  = eval (Imply ((Imply ((True, False)), True)))

let _  = eval (Equal ((Num (1), Plus ((Num (1), Num (2))))))

let _  = eval (Imply ((Imply ((False, True)), False)))

Time : 0.00973200798035
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub40.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec js  : (exp -> int) = (19596, 
fun f -> (19595, 
 (match (19579, f with 
|Num n -> (19580, n
|Plus (a1, a2) -> (19587, ((19583, (19581, js ((19582, a1) + (19586, (19584, js ((19585, a2))
|Minus (a1, a2) -> (19594, ((19590, (19588, js ((19589, a1) - (19593, (19591, js ((19592, a2)))

let eval  : (formula -> bool) = (19647, 
fun f -> (19646, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not a -> (19605, if (19602, ((19600, a = (19601, True) then (19603, false
 else (19604, true
|AndAlso (a1, a2) -> (19615, if (19612, ((19608, ((19606, a1 = (19607, True) && (19611, ((19609, a2 = (19610, True)) then (19613, true
 else (19614, false
|OrElse (a1, a2) -> (19625, if (19622, ((19618, ((19616, a1 = (19617, True) || (19621, ((19619, a2 = (19620, True)) then (19623, true
 else (19624, false
|Imply (a1, a2) -> (19635, if (19632, ((19628, ((19626, a1 = (19627, True) && (19631, ((19629, a2 = (19630, False)) then (19633, false
 else (19634, true
|Equal (a1, a2) -> (19645, if (19642, ((19638, (19636, js ((19637, a1) = (19641, (19639, js ((19640, a2)) then (19643, true
 else (19644, false)

let _  = (19656, (19648, eval ((19655, Imply ((19654, ((19652, Imply ((19651, ((19649, True, (19650, False)), (19653, True)))

let _  = (19668, (19657, eval ((19667, Equal ((19666, ((19659, Num ((19658, 1), (19665, Plus ((19664, ((19661, Num ((19660, 1), (19663, Num ((19662, 2))))))

let _  = (19680, (19669, eval ((19679, Equal ((19678, ((19671, Num ((19670, 3), (19677, Plus ((19676, ((19673, Num ((19672, 1), (19675, Num ((19674, 2))))))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not a -> if (a = True) then false
 else true
|AndAlso (a1, a2) -> if ((a1 = True) && (a2 = True)) then true
 else false
|OrElse (a1, a2) -> if ((a1 = True) || (a2 = True)) then true
 else false
|Imply (a1, a2) -> if ((a1 = True) && (a2 = False)) then false
 else true
|Equal (a1, a2) -> if (js (a1) = js (a2)) then true
 else false),

js -> (9343 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (a1, a2) -> (js (a1) + js (a2))
|Minus (a1, a2) -> (js (a1) - js (a2)))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
js -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19605 : not (? (?)))

Decls : 
,Exp : Modify (19615 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19625 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19632 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19633 : true)

Decls : 
,Exp : Modify (19634 : false)

Decls : 
,Exp : Modify (19645 : (? (?) = ? (?)))

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub46.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec calc  : (exp -> int) = (19596, 
fun f -> (19595, 
 (match (19579, f with 
|Num x -> (19580, x
|Plus (x, y) -> (19587, ((19583, (19581, calc ((19582, x) + (19586, (19584, calc ((19585, y))
|Minus (x, y) -> (19594, ((19590, (19588, calc ((19589, x) - (19593, (19591, calc ((19592, y)))

let eval  : (formula -> bool) = (19647, 
fun f -> (19646, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not x -> (19605, if (19602, ((19600, x = (19601, True) then (19603, false
 else (19604, true
|AndAlso (x, y) -> (19615, if (19612, ((19608, ((19606, x = (19607, True) && (19611, ((19609, y = (19610, True)) then (19613, true
 else (19614, false
|OrElse (x, y) -> (19625, if (19622, ((19618, ((19616, x = (19617, True) || (19621, ((19619, y = (19620, False)) then (19623, true
 else (19624, false
|Imply (x, y) -> (19635, if (19632, ((19628, ((19626, x = (19627, True) && (19631, ((19629, y = (19630, False)) then (19633, false
 else (19634, true
|Equal (x, y) -> (19645, if (19642, ((19638, (19636, calc ((19637, x) = (19641, (19639, calc ((19640, y)) then (19643, true
 else (19644, false)

let _  = (19656, (19648, eval ((19655, Imply ((19654, ((19652, Imply ((19651, ((19649, True, (19650, False)), (19653, True)))

let _  = (19668, (19657, eval ((19667, Equal ((19666, ((19659, Num ((19658, 1), (19665, Plus ((19664, ((19661, Num ((19660, 1), (19663, Num ((19662, 2))))))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{calc -> (9343 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num x -> x
|Plus (x, y) -> (calc (x) + calc (y))
|Minus (x, y) -> (calc (x) - calc (y))),

eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not x -> if (x = True) then false
 else true
|AndAlso (x, y) -> if ((x = True) && (y = True)) then true
 else false
|OrElse (x, y) -> if ((x = True) || (y = False)) then true
 else false
|Imply (x, y) -> if ((x = True) && (y = False)) then false
 else true
|Equal (x, y) -> if (calc (x) = calc (y)) then true
 else false)}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{calc -> evalExp,
eval -> eval}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19605 : not (? (?)))

Decls : 
,Exp : Modify (19615 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19625 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19632 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19633 : true)

Decls : 
,Exp : Modify (19634 : false)

Decls : 
,Exp : Modify (19645 : (? (?) = ? (?)))

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub49.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let eval  : (formula -> bool) = (19625, 
fun f -> (19624, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not f0 -> (19587, if (19584, ((19582, f0 = (19583, True) then (19585, false
 else (19586, true
|AndAlso (f1, f2) -> (19597, if (19594, ((19590, ((19588, f1 = (19589, True) && (19593, ((19591, f2 = (19592, True)) then (19595, true
 else (19596, false
|OrElse (f1, f2) -> (19607, if (19604, ((19600, ((19598, f1 = (19599, False) && (19603, ((19601, f2 = (19602, False)) then (19605, false
 else (19606, true
|Imply (f1, f2) -> (19617, if (19614, ((19610, ((19608, f1 = (19609, True) && (19613, ((19611, f2 = (19612, False)) then (19615, false
 else (19616, true
|Equal (e1, e2) -> (19623, if (19620, ((19618, e1 = (19619, e2) then (19621, true
 else (19622, false)

let _  = (19634, (19626, eval ((19633, Imply ((19632, ((19630, Imply ((19629, ((19627, True, (19628, False)), (19631, True)))

let rec num  : (exp -> int) = (19652, 
fun n -> (19651, 
 (match (19635, n with 
|Num i -> (19636, i
|Plus (e1, e2) -> (19643, ((19639, (19637, num ((19638, e1) + (19642, (19640, num ((19641, e2))
|Minus (e1, e2) -> (19650, ((19646, (19644, num ((19645, e1) - (19649, (19647, num ((19648, e2)))

let _  = (19664, (19653, eval ((19663, Equal ((19662, ((19655, Num ((19654, 1), (19661, Plus ((19660, ((19657, Num ((19656, 1), (19659, Num ((19658, 2))))))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9343 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f0 -> if (f0 = True) then false
 else true
|AndAlso (f1, f2) -> if ((f1 = True) && (f2 = True)) then true
 else false
|OrElse (f1, f2) -> if ((f1 = False) && (f2 = False)) then false
 else true
|Imply (f1, f2) -> if ((f1 = True) && (f2 = False)) then false
 else true
|Equal (e1, e2) -> if (e1 = e2) then true
 else false)}
Edge : 
empty
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19587 : not (? (?)))

Decls : 
,Exp : Modify (19597 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19607 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19614 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19615 : true)

Decls : 
,Exp : Modify (19616 : false)

Decls : 
,Exp : Modify (19623 : (? (?) = ? (?)))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub6.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let andAlso (x, y)  = (19588, if (19585, ((19581, ((19579, x = (19580, true) && (19584, ((19582, y = (19583, true)) then (19586, true
 else (19587, false

let orElse (x, y)  = (19598, if (19595, ((19591, ((19589, x = (19590, false) && (19594, ((19592, y = (19593, false)) then (19596, false
 else (19597, true

let imply (x, y)  = (19626, if (19605, ((19601, ((19599, x = (19600, false) && (19604, ((19602, y = (19603, true)) then (19606, true
 else (19625, if (19613, ((19609, ((19607, x = (19608, false) && (19612, ((19610, y = (19611, false)) then (19614, true
 else (19624, if (19621, ((19617, ((19615, x = (19616, true) && (19620, ((19618, y = (19619, false)) then (19622, false
 else (19623, true

let rec equal (x, y)  = (19632, if (19629, ((19627, x = (19628, y) then (19630, true
 else (19631, false

let cal (x : exp)  = (19641, 
 (match (19633, x with 
|Num n -> (19634, n
|Plus (Num a, Num b) -> (19637, ((19635, a + (19636, b)
|Minus (Num a, Num b) -> (19640, ((19638, a - (19639, b))

let rec eval  : (formula -> bool) = (19773, 
fun f -> (19772, 
 (match (19642, f with 
|AndAlso (x, y) -> (19669, if (19649, ((19645, ((19643, x = (19644, True) && (19648, ((19646, y = (19647, True)) then (19650, true
 else (19668, if (19657, ((19653, ((19651, x = (19652, False) || (19656, ((19654, y = (19655, False)) then (19658, false
 else (19667, (19659, andAlso ((19666, ((19662, (19660, eval ((19661, x), (19665, (19663, eval ((19664, y)))
|OrElse (x, y) -> (19696, if (19676, ((19672, ((19670, x = (19671, False) && (19675, ((19673, y = (19674, False)) then (19677, false
 else (19695, if (19684, ((19680, ((19678, x = (19679, True) || (19683, ((19681, y = (19682, True)) then (19685, true
 else (19694, (19686, orElse ((19693, ((19689, (19687, eval ((19688, x), (19692, (19690, eval ((19691, y)))
|Imply (x, y) -> (19741, if (19703, ((19699, ((19697, x = (19698, False) && (19702, ((19700, y = (19701, True)) then (19704, false
 else (19740, if (19711, ((19707, ((19705, x = (19706, False) && (19710, ((19708, y = (19709, False)) then (19712, true
 else (19739, if (19719, ((19715, ((19713, x = (19714, True) && (19718, ((19716, y = (19717, False)) then (19720, false
 else (19738, if (19727, ((19723, ((19721, x = (19722, True) && (19726, ((19724, y = (19725, True)) then (19728, true
 else (19737, (19729, imply ((19736, ((19732, (19730, eval ((19731, x), (19735, (19733, eval ((19734, y)))
|Not x -> (19755, if (19744, ((19742, x = (19743, True) then (19745, false
 else (19754, if (19748, ((19746, x = (19747, False) then (19749, true
 else (19753, not ((19752, (19750, eval ((19751, x))
|True -> (19756, true
|False -> (19757, false
|Equal (x, y) -> (19771, if (19760, ((19758, x = (19759, y) then (19761, true
 else (19770, (19762, equal ((19769, ((19765, (19763, cal ((19764, x), (19768, (19766, cal ((19767, y))))

let _  = (19782, (19774, eval ((19781, Imply ((19780, ((19778, Imply ((19777, ((19775, True, (19776, False)), (19779, True)))

let _  = (19794, (19783, eval ((19793, Equal ((19792, ((19785, Num ((19784, 1), (19791, Plus ((19790, ((19787, Num ((19786, 1), (19789, Num ((19788, 2))))))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{andAlso -> (10399 : 
Input : ((x : bool), (y : bool)) 
Output : bool
Body : if ((x = true) && (y = true)) then true
 else false,

cal -> (10403 : 
Input : (x : exp) 
Output : int
Body : 
 (match x with 
|Num n -> n
|Plus (Num a, Num b) -> (a + b)
|Minus (Num a, Num b) -> (a - b)),

equal -> (10402 : 
Input : (x, (y : int)) 
Output : bool
Body : if (x = y) then true
 else false,

eval -> (10404 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|AndAlso (x, y) -> if ((x = True) && (y = True)) then true
 else if ((x = False) || (y = False)) then false
 else andAlso ((eval (x), eval (y)))
|OrElse (x, y) -> if ((x = False) && (y = False)) then false
 else if ((x = True) || (y = True)) then true
 else orElse ((eval (x), eval (y)))
|Imply (x, y) -> if ((x = False) && (y = True)) then false
 else if ((x = False) && (y = False)) then true
 else if ((x = True) && (y = False)) then false
 else if ((x = True) && (y = True)) then true
 else imply ((eval (x), eval (y)))
|Not x -> if (x = True) then false
 else if (x = False) then true
 else not (eval (x))
|True -> true
|False -> false
|Equal (x, y) -> if (x = y) then true
 else equal ((cal (x), cal (y)))),

imply -> (10401 : 
Input : ((x : bool), (y : bool)) 
Output : bool
Body : if ((x = false) && (y = true)) then true
 else if ((x = false) && (y = false)) then true
 else if ((x = true) && (y = false)) then false
 else true,

orElse -> (10400 : 
Input : ((x : bool), (y : bool)) 
Output : bool
Body : if ((x = false) && (y = false)) then false
 else true}
Edge : 
{(10404, 10399) -> ,
(10404, 10400) -> ,
(10404, 10401) -> ,
(10404, 10402) -> ,
(10404, 10403) -> ,
(10404, 10404) -> }
Starting : 10404
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (10365 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (10364 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(10364, 10364) -> ,
(10365, 10364) -> ,
(10365, 10365) -> }
Starting : 10365
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{cal -> evalExp,
eval -> eval}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19633 : ?)

Decls : 
,Exp : Modify (19634 : ?)

Decls : 
,Exp : Modify (19642 : ?)

Decls : 
,Exp : Modify (19669 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19696 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19703 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19704 : true)

Decls : 
,Exp : Modify (19740 : false)

Decls : 
,Exp : Modify (19755 : not (? (?)))

Decls : 
,Exp : Modify (19771 : (? (?) = ? (?)))

Decls : 
,Exp : Insert (Minus (exp1, exp2) -> (? (?) - ? (?)) At label 19641

Decls : 
,Exp : Insert (Plus (exp1, exp2) -> (? (?) + ? (?)) At label 19641

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub7.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval_exp  : (exp -> int) = (19596, 
fun e -> (19595, 
 (match (19579, e with 
|Num n -> (19580, n
|Plus (e1, e2) -> (19587, ((19583, (19581, eval_exp ((19582, e1) + (19586, (19584, eval_exp ((19585, e2))
|Minus (e1, e2) -> (19594, ((19590, (19588, eval_exp ((19589, e1) - (19593, (19591, eval_exp ((19592, e2)))

let rec eval  : (formula -> bool) = (19638, 
fun f -> (19637, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not b -> (19603, not ((19602, (19600, eval ((19601, b))
|AndAlso (f1, f2) -> (19610, ((19606, (19604, eval ((19605, f1) && (19609, (19607, eval ((19608, f2))
|OrElse (f1, f2) -> (19617, ((19613, (19611, eval ((19612, f1) || (19616, (19614, eval ((19615, f2))
|Imply (f1, f2) -> (19629, if (19626, ((19622, ((19620, (19618, eval ((19619, f1) = (19621, false) && (19625, (19623, eval ((19624, f2)) then (19627, false
 else (19628, true
|Equal (e1, e2) -> (19636, ((19632, (19630, eval_exp ((19631, e1) = (19635, (19633, eval_exp ((19634, e2)))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not b -> not (eval (b))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) && eval (f2)) then false
 else true
|Equal (e1, e2) -> (eval_exp (e1) = eval_exp (e2))),

eval_exp -> (9343 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num n -> n
|Plus (e1, e2) -> (eval_exp (e1) + eval_exp (e2))
|Minus (e1, e2) -> (eval_exp (e1) - eval_exp (e2)))}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> ,
(9344, 9344) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
eval_exp -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19602 : ? (?))

Decls : 
,Exp : Modify (19606 : ? (?))

Decls : 
,Exp : Modify (19609 : ? (?))

Decls : 
,Exp : Modify (19613 : ? (?))

Decls : 
,Exp : Modify (19616 : ? (?))

Decls : 
,Exp : Modify (19626 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19627 : true)

Decls : 
,Exp : Modify (19628 : false)

Decls : 
,Exp : Modify (19632 : ? (?))

Decls : 
,Exp : Modify (19635 : ? (?))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval_exp  : (exp -> int) = 
fun e -> 
 (match e with 
|Num n -> n
|Plus (e1, e2) -> (eval_exp (e1) + eval_exp (e2))
|Minus (e1, e2) -> (eval_exp (e1) - eval_exp (e2)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not b -> not (eval (b))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (e1, e2) -> (eval_exp (e1) = eval_exp (e2)))

Time : 4.89794898033
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub70.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec cal  : (exp -> int) = (19596, 
fun e -> (19595, 
 (match (19579, e with 
|Num a -> (19580, a
|Plus (a, b) -> (19587, ((19583, (19581, cal ((19582, a) + (19586, (19584, cal ((19585, b))
|Minus (a, b) -> (19594, ((19590, (19588, cal ((19589, a) - (19593, (19591, cal ((19592, b)))

let rec eval  : (formula -> bool) = (19642, 
fun f -> (19641, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not temp -> (19602, (19600, eval ((19601, temp)
|AndAlso (a, b) -> (19609, ((19605, (19603, eval ((19604, a) && (19608, (19606, eval ((19607, b))
|OrElse (a, b) -> (19616, ((19612, (19610, eval ((19611, a) || (19615, (19613, eval ((19614, b))
|Imply (a, b) -> (19630, if (19627, ((19621, ((19619, (19617, eval ((19618, a) = (19620, true) && (19626, ((19624, (19622, eval ((19623, b) = (19625, false)) then (19628, false
 else (19629, true
|Equal (a, b) -> (19640, if (19637, ((19633, (19631, cal ((19632, a) = (19636, (19634, cal ((19635, b)) then (19638, true
 else (19639, false)

let _  = (19654, (19643, eval ((19653, Equal ((19652, ((19645, Num ((19644, 1), (19651, Plus ((19650, ((19647, Num ((19646, 1), (19649, Num ((19648, 2))))))

let _  = (19663, (19655, eval ((19662, Imply ((19661, ((19659, Imply ((19658, ((19656, True, (19657, False)), (19660, True)))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{cal -> (9343 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num a -> a
|Plus (a, b) -> (cal (a) + cal (b))
|Minus (a, b) -> (cal (a) - cal (b))),

eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not temp -> eval (temp)
|AndAlso (a, b) -> (eval (a) && eval (b))
|OrElse (a, b) -> (eval (a) || eval (b))
|Imply (a, b) -> if ((eval (a) = true) && (eval (b) = false)) then false
 else true
|Equal (a, b) -> if (cal (a) = cal (b)) then true
 else false)}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> ,
(9344, 9344) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{cal -> evalExp,
eval -> eval}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19602 : not (? (?)))

Decls : 
,Exp : Modify (19605 : ? (?))

Decls : 
,Exp : Modify (19608 : ? (?))

Decls : 
,Exp : Modify (19612 : ? (?))

Decls : 
,Exp : Modify (19615 : ? (?))

Decls : 
,Exp : Modify (19627 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19628 : true)

Decls : 
,Exp : Modify (19629 : false)

Decls : 
,Exp : Modify (19640 : (? (?) = ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec cal  : (exp -> int) = 
fun e -> 
 (match e with 
|Num a -> a
|Plus (a, b) -> (cal (a) + cal (b))
|Minus (a, b) -> (cal (a) - cal (b)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not temp -> not (eval (temp))
|AndAlso (a, b) -> (eval (a) && eval (b))
|OrElse (a, b) -> (eval (a) || eval (b))
|Imply (a, b) -> if ((eval (a) = true) && (eval (b) = false)) then false
 else true
|Equal (a, b) -> if (cal (a) = cal (b)) then true
 else false)

let _  = eval (Equal ((Num (1), Plus ((Num (1), Num (2))))))

let _  = eval (Imply ((Imply ((True, False)), True)))

Time : 0.0131878852844
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub71.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (exp -> int) = (19596, 
fun f -> (19595, 
 (match (19579, f with 
|Num x -> (19580, x
|Plus (x, y) -> (19587, ((19583, (19581, eval ((19582, x) + (19586, (19584, eval ((19585, y))
|Minus (x, y) -> (19594, ((19590, (19588, eval ((19589, x) - (19593, (19591, eval ((19592, y)))

let eval  : (formula -> bool) = (19647, 
fun f -> (19646, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not x -> (19605, if (19602, ((19600, x = (19601, True) then (19603, false
 else (19604, true
|AndAlso (x, y) -> (19615, if (19612, ((19608, ((19606, x = (19607, True) && (19611, ((19609, y = (19610, True)) then (19613, true
 else (19614, false
|OrElse (x, y) -> (19625, if (19622, ((19618, ((19616, x = (19617, True) || (19621, ((19619, y = (19620, False)) then (19623, true
 else (19624, false
|Imply (x, y) -> (19635, if (19632, ((19628, ((19626, x = (19627, True) && (19631, ((19629, y = (19630, False)) then (19633, false
 else (19634, true
|Equal (x, y) -> (19645, if (19642, ((19638, (19636, eval ((19637, x) = (19641, (19639, eval ((19640, y)) then (19643, true
 else (19644, false)

let _  = (19656, (19648, eval ((19655, Imply ((19654, ((19652, Imply ((19651, ((19649, True, (19650, False)), (19653, True)))

let _  = (19668, (19657, eval ((19667, Equal ((19666, ((19659, Num ((19658, 1), (19665, Plus ((19664, ((19661, Num ((19660, 1), (19663, Num ((19662, 2))))))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 0
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not x -> if (x = True) then false
 else true
|AndAlso (x, y) -> if ((x = True) && (y = True)) then true
 else false
|OrElse (x, y) -> if ((x = True) || (y = False)) then true
 else false
|Imply (x, y) -> if ((x = True) && (y = False)) then false
 else true
|Equal (x, y) -> if (eval (x) = eval (y)) then true
 else false)}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval}
------Remainings in solution ------
{evalExp}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19605 : not (? (?)))

Decls : 
,Exp : Modify (19615 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19625 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19632 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19633 : true)

Decls : 
,Exp : Modify (19634 : false)

Decls : 
,Exp : Modify (19645 : (? (?) = ? (?)))

Decls : 

let rec evalExp (f : exp)  : int = 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))

Callers : {eval}
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub73.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec cal  : (exp -> int) = (19596, 
fun f -> (19595, 
 (match (19579, f with 
|Num n -> (19580, n
|Plus (g, h) -> (19587, ((19583, (19581, cal ((19582, g) + (19586, (19584, cal ((19585, h))
|Minus (g, h) -> (19594, ((19590, (19588, cal ((19589, g) - (19593, (19591, cal ((19592, h)))

let eval  : (formula -> bool) = (19647, 
fun f -> (19646, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not h -> (19605, if (19602, ((19600, h = (19601, True) then (19603, false
 else (19604, true
|AndAlso (g, h) -> (19615, if (19612, ((19608, ((19606, g = (19607, True) && (19611, ((19609, h = (19610, True)) then (19613, true
 else (19614, false
|OrElse (g, h) -> (19625, if (19622, ((19618, ((19616, g = (19617, False) && (19621, ((19619, h = (19620, False)) then (19623, false
 else (19624, true
|Imply (g, h) -> (19635, if (19632, ((19628, ((19626, g = (19627, True) && (19631, ((19629, h = (19630, False)) then (19633, false
 else (19634, true
|Equal (g, h) -> (19645, if (19642, ((19638, (19636, cal ((19637, g) = (19641, (19639, cal ((19640, h)) then (19643, true
 else (19644, false)

let _  = (19656, (19648, eval ((19655, Imply ((19654, ((19652, Imply ((19651, ((19649, True, (19650, False)), (19653, True)))

let _  = (19668, (19657, eval ((19667, Equal ((19666, ((19659, Num ((19658, 1), (19665, Plus ((19664, ((19661, Num ((19660, 1), (19663, Num ((19662, 2))))))

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{cal -> (9343 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (g, h) -> (cal (g) + cal (h))
|Minus (g, h) -> (cal (g) - cal (h))),

eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not h -> if (h = True) then false
 else true
|AndAlso (g, h) -> if ((g = True) && (h = True)) then true
 else false
|OrElse (g, h) -> if ((g = False) && (h = False)) then false
 else true
|Imply (g, h) -> if ((g = True) && (h = False)) then false
 else true
|Equal (g, h) -> if (cal (g) = cal (h)) then true
 else false)}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{cal -> evalExp,
eval -> eval}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19605 : not (? (?)))

Decls : 
,Exp : Modify (19615 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19625 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19632 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19633 : true)

Decls : 
,Exp : Modify (19634 : false)

Decls : 
,Exp : Modify (19645 : (? (?) = ? (?)))

Decls : 
}
Fail to Repair
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub8.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec chlwhd  : (exp -> int) = (19596, 
fun e -> (19595, 
 (match (19579, e with 
|Num a -> (19580, a
|Plus (a, b) -> (19587, ((19583, (19581, chlwhd ((19582, a) + (19586, (19584, chlwhd ((19585, b))
|Minus (a, b) -> (19594, ((19590, (19588, chlwhd ((19589, a) - (19593, (19591, chlwhd ((19592, b)))

let rec eval  : (formula -> bool) = (19669, 
fun f -> (19668, 
 (match (19597, f with 
|True -> (19598, true
|False -> (19599, false
|Not f -> (19603, not ((19602, (19600, eval ((19601, f))
|AndAlso (f', f) -> (19610, ((19606, (19604, eval ((19605, f') && (19609, (19607, eval ((19608, f))
|OrElse (f', f) -> (19617, ((19613, (19611, eval ((19612, f') || (19616, (19614, eval ((19615, f))
|Imply (f', f) -> (19657, if (19628, ((19622, ((19620, (19618, eval ((19619, f') = (19621, true) && (19627, ((19625, (19623, eval ((19624, f) = (19626, false)) then (19629, false
 else (19656, if (19640, ((19634, ((19632, (19630, eval ((19631, f') = (19633, true) && (19639, ((19637, (19635, eval ((19636, f) = (19638, true)) then (19641, true
 else (19655, if (19652, ((19646, ((19644, (19642, eval ((19643, f') = (19645, false) && (19651, ((19649, (19647, eval ((19648, f) = (19650, true)) then (19653, true
 else (19654, false
|Equal (a, b) -> (19667, if (19664, ((19660, (19658, chlwhd ((19659, a) = (19663, (19661, chlwhd ((19662, b)) then (19665, true
 else (19666, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{chlwhd -> (9343 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num a -> a
|Plus (a, b) -> (chlwhd (a) + chlwhd (b))
|Minus (a, b) -> (chlwhd (a) - chlwhd (b))),

eval -> (9344 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f', f) -> (eval (f') && eval (f))
|OrElse (f', f) -> (eval (f') || eval (f))
|Imply (f', f) -> if ((eval (f') = true) && (eval (f) = false)) then false
 else if ((eval (f') = true) && (eval (f) = true)) then true
 else if ((eval (f') = false) && (eval (f) = true)) then true
 else false
|Equal (a, b) -> if (chlwhd (a) = chlwhd (b)) then true
 else false)}
Edge : 
{(9343, 9343) -> ,
(9344, 9343) -> ,
(9344, 9344) -> }
Starting : 9344
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{chlwhd -> evalExp,
eval -> eval}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19580 : ?)

Decls : 
,Exp : Modify (19583 : ? (?))

Decls : 
,Exp : Modify (19586 : ? (?))

Decls : 
,Exp : Modify (19590 : ? (?))

Decls : 
,Exp : Modify (19593 : ? (?))

Decls : 
,Exp : Modify (19597 : ?)

Decls : 
,Exp : Modify (19602 : ? (?))

Decls : 
,Exp : Modify (19606 : ? (?))

Decls : 
,Exp : Modify (19609 : ? (?))

Decls : 
,Exp : Modify (19613 : ? (?))

Decls : 
,Exp : Modify (19616 : ? (?))

Decls : 
,Exp : Modify (19628 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19629 : true)

Decls : 
,Exp : Modify (19656 : false)

Decls : 
,Exp : Modify (19667 : (? (?) = ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec chlwhd  : (exp -> int) = 
fun e -> 
 (match e with 
|Num a -> a
|Plus (a, b) -> (chlwhd (a) + chlwhd (b))
|Minus (a, b) -> (chlwhd (a) - chlwhd (b)))

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f', f) -> (eval (f') && eval (f))
|OrElse (f', f) -> (eval (f') || eval (f))
|Imply (f', f) -> if ((eval (f') = false) || (eval (f) = true)) then true
 else if ((eval (f') = true) && (eval (f) = true)) then true
 else if ((eval (f') = false) && (eval (f) = true)) then true
 else false
|Equal (a, b) -> if (chlwhd (a) = chlwhd (b)) then true
 else false)

Time : 0.292645931244
../engine/main.native -dd -submission ../benchmarks_incorrect/KoreaUniv_formula_16/18/sub9.ml -solutions ../benchmarks_correct/KoreaUniv_formula_16 -entry eval -testcases ../testcases/formula_testcases
-----------------------------
Submission
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = (19664, 
fun f -> (19663, 
 (match (19579, f with 
|True -> (19580, true
|False -> (19581, false
|Not b -> (19589, if (19586, ((19584, (19582, eval ((19583, b) = (19585, true) then (19587, true
 else (19588, false
|Imply (a, b) -> (19604, if (19594, ((19592, (19590, eval ((19591, a) = (19593, false) then (19595, true
 else (19603, if (19600, ((19598, (19596, eval ((19597, b) = (19599, true) then (19601, true
 else (19602, false
|AndAlso (a, b) -> (19618, if (19615, ((19609, ((19607, (19605, eval ((19606, a) = (19608, true) && (19614, ((19612, (19610, eval ((19611, b) = (19613, true)) then (19616, true
 else (19617, false
|OrElse (a, b) -> (19633, if (19623, ((19621, (19619, eval ((19620, a) = (19622, true) then (19624, true
 else (19632, if (19629, ((19627, (19625, eval ((19626, b) = (19628, true) then (19630, true
 else (19631, false
|Equal (a, b) -> (19662, 
let rec eval_exp  : (exp -> int) = (19651, 
fun e -> (19650, 
 (match (19634, e with 
|Num n -> (19635, n
|Plus (n1, n2) -> (19642, ((19638, (19636, eval_exp ((19637, n1) + (19641, (19639, eval_exp ((19640, n2))
|Minus (n1, n2) -> (19649, ((19645, (19643, eval_exp ((19644, n1) - (19648, (19646, eval_exp ((19647, n2)))
 in 
(19661, if (19658, ((19654, (19652, eval_exp ((19653, a) = (19657, (19655, eval_exp ((19656, b)) then (19659, true
 else (19660, false)

-----------------------------
Most Similar Sol ../benchmarks_correct/KoreaUniv_formula_16/18/sub74.ml Score : 2
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec evalExp  : (exp -> int) = (19534, 
fun f -> (19533, 
 (match (19517, f with 
|Num n -> (19518, n
|Plus (exp1, exp2) -> (19525, ((19521, (19519, evalExp ((19520, exp1) + (19524, (19522, evalExp ((19523, exp2))
|Minus (exp1, exp2) -> (19532, ((19528, (19526, evalExp ((19527, exp1) - (19531, (19529, evalExp ((19530, exp2)))

let rec eval  : (formula -> bool) = (19578, 
fun f -> (19577, 
 (match (19535, f with 
|True -> (19536, true
|False -> (19537, false
|Not f -> (19541, not ((19540, (19538, eval ((19539, f))
|AndAlso (f1, f2) -> (19548, ((19544, (19542, eval ((19543, f1) && (19547, (19545, eval ((19546, f2))
|OrElse (f1, f2) -> (19555, ((19551, (19549, eval ((19550, f1) || (19554, (19552, eval ((19553, f2))
|Imply (f1, f2) -> (19569, if (19566, ((19560, ((19558, (19556, eval ((19557, f1) = (19559, false) || (19565, ((19563, (19561, eval ((19562, f2) = (19564, true)) then (19567, true
 else (19568, false
|Equal (exp1, exp2) -> (19576, ((19572, (19570, evalExp ((19571, exp1) = (19575, (19573, evalExp ((19574, exp2)))

-----------------------------
Call graph (sub)
-----------------------------
Node : 
{eval -> (9343 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not b -> if (eval (b) = true) then true
 else false
|Imply (a, b) -> if (eval (a) = false) then true
 else if (eval (b) = true) then true
 else false
|AndAlso (a, b) -> if ((eval (a) = true) && (eval (b) = true)) then true
 else false
|OrElse (a, b) -> if (eval (a) = true) then true
 else if (eval (b) = true) then true
 else false
|Equal (a, b) -> if (eval_exp (a) = eval_exp (b)) then true
 else false),

eval_exp -> (9344 : 
Input : (e : exp) 
Output : int
Body : 
 (match e with 
|Num n -> n
|Plus (n1, n2) -> (eval_exp (n1) + eval_exp (n2))
|Minus (n1, n2) -> (eval_exp (n1) - eval_exp (n2)))}
Edge : 
{(9343, 9343) -> ,
(9343, 9344) -> ,
(9344, 9344) -> }
Starting : 9343
-----------------------------
Call graph (sol)
-----------------------------
Node : 
{eval -> (9309 : 
Input : (f : formula) 
Output : bool
Body : 
 (match f with 
|True -> true
|False -> false
|Not f -> not (eval (f))
|AndAlso (f1, f2) -> (eval (f1) && eval (f2))
|OrElse (f1, f2) -> (eval (f1) || eval (f2))
|Imply (f1, f2) -> if ((eval (f1) = false) || (eval (f2) = true)) then true
 else false
|Equal (exp1, exp2) -> (evalExp (exp1) = evalExp (exp2))),

evalExp -> (9308 : 
Input : (f : exp) 
Output : int
Body : 
 (match f with 
|Num n -> n
|Plus (exp1, exp2) -> (evalExp (exp1) + evalExp (exp2))
|Minus (exp1, exp2) -> (evalExp (exp1) - evalExp (exp2)))}
Edge : 
{(9308, 9308) -> ,
(9309, 9308) -> ,
(9309, 9309) -> }
Starting : 9309
-----------------------------
Matching Info
-----------------------------
------Match Informations (submissoin)------
{eval -> eval,
eval_exp -> evalExp}
------Remainings in solution ------
{}
-----------------------------
Templates
-----------------------------
{Exp : Modify (19579 : ?)

Decls : 
,Exp : Modify (19589 : not (? (?)))

Decls : 
,Exp : Modify (19594 : ((? (?) = false) || (? (?) = true)))

Decls : 
,Exp : Modify (19603 : false)

Decls : 
,Exp : Modify (19618 : (? (?) && ? (?)))

Decls : 
,Exp : Modify (19633 : (? (?) || ? (?)))

Decls : 
,Exp : Modify (19634 : ?)

Decls : 
,Exp : Modify (19635 : ?)

Decls : 
,Exp : Modify (19638 : ? (?))

Decls : 
,Exp : Modify (19641 : ? (?))

Decls : 
,Exp : Modify (19645 : ? (?))

Decls : 
,Exp : Modify (19648 : ? (?))

Decls : 
,Exp : Modify (19661 : (? (?) = ? (?)))

Decls : 
}
-----------------------------
Patch
-----------------------------

type formula =
|Equal of (exp * exp)
|Imply of (formula * formula)
|OrElse of (formula * formula)
|AndAlso of (formula * formula)
|Not of formula
|False
|True
and exp =
|Minus of (exp * exp)
|Plus of (exp * exp)
|Num of int

let rec eval  : (formula -> bool) = 
fun f -> 
 (match f with 
|True -> true
|False -> false
|Not b -> not (eval (b))
|Imply (a, b) -> if (eval (a) = false) then true
 else if (eval (b) = true) then true
 else false
|AndAlso (a, b) -> if ((eval (a) = true) && (eval (b) = true)) then true
 else false
|OrElse (a, b) -> if (eval (a) = true) then true
 else if (eval (b) = true) then true
 else false
|Equal (a, b) -> 
let rec eval_exp  : (exp -> int) = 
fun e -> 
 (match e with 
|Num n -> n
|Plus (n1, n2) -> (eval_exp (n1) + eval_exp (n2))
|Minus (n1, n2) -> (eval_exp (n1) - eval_exp (n2)))
 in 
if (eval_exp (a) = eval_exp (b)) then true
 else false)

Time : 0.00926494598389
