------------------------
Patch Candidate
------------------------
Exp : {Modify (45044 : str)}

Decls : 


------------------------
Result
------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec isThereStr aexp str  = 
 (match aexp with 
|Const i -> false
|Var s -> (s = str)
|Power (s, i) -> (s = str)
|Times l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Times (t)) (str)))
|Sum l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Sum (t)) (str))))
 in 

let rec mul al str  = 
 (match al with 
|[] -> []
|h::[] -> if isThereStr (h) (str) then [diff ((h, str))]
 else [h]
|h::t -> if isThereStr (h) (str) then List.append ([diff ((h, str))]) (mul (t) (str))
 else List.append ([h]) (mul (t) (str)))
 in 

 (match aexp with 
|Const i -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, i) -> if (str = str) then if (i > 1) then Times ([Const (i); Power ((s, (i - 1)))])
 else Const (1)
 else Const (0)
|Times l -> if isThereStr (aexp) (str) then Times (mul (l) (str))
 else Const (0)
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, str))
|h::t -> Sum (List.append ([diff ((h, str))]) ([diff ((Sum (t), str))]))))


------------------------
Patch Candidate
------------------------
Exp : {Modify (45037 : s)}

Decls : 


------------------------
Result
------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec isThereStr aexp str  = 
 (match aexp with 
|Const i -> false
|Var s -> (s = str)
|Power (s, i) -> (s = str)
|Times l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Times (t)) (str)))
|Sum l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Sum (t)) (str))))
 in 

let rec mul al str  = 
 (match al with 
|[] -> []
|h::[] -> if isThereStr (h) (str) then [diff ((h, str))]
 else [h]
|h::t -> if isThereStr (h) (str) then List.append ([diff ((h, str))]) (mul (t) (str))
 else List.append ([h]) (mul (t) (str)))
 in 

 (match aexp with 
|Const i -> Const (0)
|Var s -> if (s = s) then Const (1)
 else Const (0)
|Power (s, i) -> if (s = str) then if (i > 1) then Times ([Const (i); Power ((s, (i - 1)))])
 else Const (1)
 else Const (0)
|Times l -> if isThereStr (aexp) (str) then Times (mul (l) (str))
 else Const (0)
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, str))
|h::t -> Sum (List.append ([diff ((h, str))]) ([diff ((Sum (t), str))]))))


------------------------
Patch Candidate
------------------------
Exp : {Modify (45036 : str)}

Decls : 


------------------------
Result
------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec isThereStr aexp str  = 
 (match aexp with 
|Const i -> false
|Var s -> (s = str)
|Power (s, i) -> (s = str)
|Times l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Times (t)) (str)))
|Sum l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Sum (t)) (str))))
 in 

let rec mul al str  = 
 (match al with 
|[] -> []
|h::[] -> if isThereStr (h) (str) then [diff ((h, str))]
 else [h]
|h::t -> if isThereStr (h) (str) then List.append ([diff ((h, str))]) (mul (t) (str))
 else List.append ([h]) (mul (t) (str)))
 in 

 (match aexp with 
|Const i -> Const (0)
|Var s -> if (str = str) then Const (1)
 else Const (0)
|Power (s, i) -> if (s = str) then if (i > 1) then Times ([Const (i); Power ((s, (i - 1)))])
 else Const (1)
 else Const (0)
|Times l -> if isThereStr (aexp) (str) then Times (mul (l) (str))
 else Const (0)
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, str))
|h::t -> Sum (List.append ([diff ((h, str))]) ([diff ((Sum (t), str))]))))


------------------------
Patch Candidate
------------------------
Exp : {Modify (44978 : l)}

Decls : 


------------------------
Result
------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec isThereStr aexp str  = 
 (match aexp with 
|Const i -> false
|Var s -> (s = str)
|Power (s, i) -> (s = str)
|Times l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Times (t)) (str)))
|Sum l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Sum (l)) (str))))
 in 

let rec mul al str  = 
 (match al with 
|[] -> []
|h::[] -> if isThereStr (h) (str) then [diff ((h, str))]
 else [h]
|h::t -> if isThereStr (h) (str) then List.append ([diff ((h, str))]) (mul (t) (str))
 else List.append ([h]) (mul (t) (str)))
 in 

 (match aexp with 
|Const i -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, i) -> if (s = str) then if (i > 1) then Times ([Const (i); Power ((s, (i - 1)))])
 else Const (1)
 else Const (0)
|Times l -> if isThereStr (aexp) (str) then Times (mul (l) (str))
 else Const (0)
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, str))
|h::t -> Sum (List.append ([diff ((h, str))]) ([diff ((Sum (t), str))]))))


------------------------
Patch Candidate
------------------------
Exp : {Modify (44963 : l)}

Decls : 


------------------------
Result
------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec isThereStr aexp str  = 
 (match aexp with 
|Const i -> false
|Var s -> (s = str)
|Power (s, i) -> (s = str)
|Times l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Times (l)) (str)))
|Sum l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Sum (t)) (str))))
 in 

let rec mul al str  = 
 (match al with 
|[] -> []
|h::[] -> if isThereStr (h) (str) then [diff ((h, str))]
 else [h]
|h::t -> if isThereStr (h) (str) then List.append ([diff ((h, str))]) (mul (t) (str))
 else List.append ([h]) (mul (t) (str)))
 in 

 (match aexp with 
|Const i -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, i) -> if (s = str) then if (i > 1) then Times ([Const (i); Power ((s, (i - 1)))])
 else Const (1)
 else Const (0)
|Times l -> if isThereStr (aexp) (str) then Times (mul (l) (str))
 else Const (0)
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, str))
|h::t -> Sum (List.append ([diff ((h, str))]) ([diff ((Sum (t), str))]))))


------------------------
Patch Candidate
------------------------
Exp : {Modify (44953 : s)}

Decls : 


------------------------
Result
------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec isThereStr aexp str  = 
 (match aexp with 
|Const i -> false
|Var s -> (s = str)
|Power (s, i) -> (s = s)
|Times l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Times (t)) (str)))
|Sum l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Sum (t)) (str))))
 in 

let rec mul al str  = 
 (match al with 
|[] -> []
|h::[] -> if isThereStr (h) (str) then [diff ((h, str))]
 else [h]
|h::t -> if isThereStr (h) (str) then List.append ([diff ((h, str))]) (mul (t) (str))
 else List.append ([h]) (mul (t) (str)))
 in 

 (match aexp with 
|Const i -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, i) -> if (s = str) then if (i > 1) then Times ([Const (i); Power ((s, (i - 1)))])
 else Const (1)
 else Const (0)
|Times l -> if isThereStr (aexp) (str) then Times (mul (l) (str))
 else Const (0)
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, str))
|h::t -> Sum (List.append ([diff ((h, str))]) ([diff ((Sum (t), str))]))))


------------------------
Patch Candidate
------------------------
Exp : {Modify (44952 : str)}

Decls : 


------------------------
Result
------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec isThereStr aexp str  = 
 (match aexp with 
|Const i -> false
|Var s -> (s = str)
|Power (s, i) -> (str = str)
|Times l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Times (t)) (str)))
|Sum l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Sum (t)) (str))))
 in 

let rec mul al str  = 
 (match al with 
|[] -> []
|h::[] -> if isThereStr (h) (str) then [diff ((h, str))]
 else [h]
|h::t -> if isThereStr (h) (str) then List.append ([diff ((h, str))]) (mul (t) (str))
 else List.append ([h]) (mul (t) (str)))
 in 

 (match aexp with 
|Const i -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, i) -> if (s = str) then if (i > 1) then Times ([Const (i); Power ((s, (i - 1)))])
 else Const (1)
 else Const (0)
|Times l -> if isThereStr (aexp) (str) then Times (mul (l) (str))
 else Const (0)
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, str))
|h::t -> Sum (List.append ([diff ((h, str))]) ([diff ((Sum (t), str))]))))


------------------------
Patch Candidate
------------------------
Exp : {Modify (44950 : s)}

Decls : 


------------------------
Result
------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec isThereStr aexp str  = 
 (match aexp with 
|Const i -> false
|Var s -> (s = s)
|Power (s, i) -> (s = str)
|Times l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Times (t)) (str)))
|Sum l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Sum (t)) (str))))
 in 

let rec mul al str  = 
 (match al with 
|[] -> []
|h::[] -> if isThereStr (h) (str) then [diff ((h, str))]
 else [h]
|h::t -> if isThereStr (h) (str) then List.append ([diff ((h, str))]) (mul (t) (str))
 else List.append ([h]) (mul (t) (str)))
 in 

 (match aexp with 
|Const i -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, i) -> if (s = str) then if (i > 1) then Times ([Const (i); Power ((s, (i - 1)))])
 else Const (1)
 else Const (0)
|Times l -> if isThereStr (aexp) (str) then Times (mul (l) (str))
 else Const (0)
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, str))
|h::t -> Sum (List.append ([diff ((h, str))]) ([diff ((Sum (t), str))]))))


------------------------
Patch Candidate
------------------------
Exp : {Modify (44949 : str)}

Decls : 


------------------------
Result
------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec isThereStr aexp str  = 
 (match aexp with 
|Const i -> false
|Var s -> (str = str)
|Power (s, i) -> (s = str)
|Times l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Times (t)) (str)))
|Sum l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Sum (t)) (str))))
 in 

let rec mul al str  = 
 (match al with 
|[] -> []
|h::[] -> if isThereStr (h) (str) then [diff ((h, str))]
 else [h]
|h::t -> if isThereStr (h) (str) then List.append ([diff ((h, str))]) (mul (t) (str))
 else List.append ([h]) (mul (t) (str)))
 in 

 (match aexp with 
|Const i -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, i) -> if (s = str) then if (i > 1) then Times ([Const (i); Power ((s, (i - 1)))])
 else Const (1)
 else Const (0)
|Times l -> if isThereStr (aexp) (str) then Times (mul (l) (str))
 else Const (0)
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, str))
|h::t -> Sum (List.append ([diff ((h, str))]) ([diff ((Sum (t), str))]))))


------------------------
Patch Candidate
------------------------
Exp : {Modify (45062 : Const (0))}

Decls : 


------------------------
Result
------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec isThereStr aexp str  = 
 (match aexp with 
|Const i -> false
|Var s -> (s = str)
|Power (s, i) -> (s = str)
|Times l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Times (t)) (str)))
|Sum l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Sum (t)) (str))))
 in 

let rec mul al str  = 
 (match al with 
|[] -> []
|h::[] -> if isThereStr (h) (str) then [diff ((h, str))]
 else [h]
|h::t -> if isThereStr (h) (str) then List.append ([diff ((h, str))]) (mul (t) (str))
 else List.append ([h]) (mul (t) (str)))
 in 

 (match aexp with 
|Const i -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, i) -> if (s = str) then Const (0)
 else Const (0)
|Times l -> if isThereStr (aexp) (str) then Times (mul (l) (str))
 else Const (0)
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, str))
|h::t -> Sum (List.append ([diff ((h, str))]) ([diff ((Sum (t), str))]))))


------------------------
Patch Candidate
------------------------
Exp : {Modify (44981 : isThereStr (h))}

Decls : 


------------------------
Result
------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec isThereStr aexp str  = 
 (match aexp with 
|Const i -> false
|Var s -> (s = str)
|Power (s, i) -> (s = str)
|Times l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Times (t)) (str)))
|Sum l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (h) (str))))
 in 

let rec mul al str  = 
 (match al with 
|[] -> []
|h::[] -> if isThereStr (h) (str) then [diff ((h, str))]
 else [h]
|h::t -> if isThereStr (h) (str) then List.append ([diff ((h, str))]) (mul (t) (str))
 else List.append ([h]) (mul (t) (str)))
 in 

 (match aexp with 
|Const i -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, i) -> if (s = str) then if (i > 1) then Times ([Const (i); Power ((s, (i - 1)))])
 else Const (1)
 else Const (0)
|Times l -> if isThereStr (aexp) (str) then Times (mul (l) (str))
 else Const (0)
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, str))
|h::t -> Sum (List.append ([diff ((h, str))]) ([diff ((Sum (t), str))]))))


------------------------
Patch Candidate
------------------------
Exp : {Modify (44966 : isThereStr (h))}

Decls : 


------------------------
Result
------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec isThereStr aexp str  = 
 (match aexp with 
|Const i -> false
|Var s -> (s = str)
|Power (s, i) -> (s = str)
|Times l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (h) (str)))
|Sum l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Sum (t)) (str))))
 in 

let rec mul al str  = 
 (match al with 
|[] -> []
|h::[] -> if isThereStr (h) (str) then [diff ((h, str))]
 else [h]
|h::t -> if isThereStr (h) (str) then List.append ([diff ((h, str))]) (mul (t) (str))
 else List.append ([h]) (mul (t) (str)))
 in 

 (match aexp with 
|Const i -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, i) -> if (s = str) then if (i > 1) then Times ([Const (i); Power ((s, (i - 1)))])
 else Const (1)
 else Const (0)
|Times l -> if isThereStr (aexp) (str) then Times (mul (l) (str))
 else Const (0)
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::[] -> diff ((h, str))
|h::t -> Sum (List.append ([diff ((h, str))]) ([diff ((Sum (t), str))]))))


------------------------
Patch Candidate
------------------------
Exp : {Delete (h::[] -> diff ((h, str)) At label 45105}

Decls : 


------------------------
Result
------------------------
type aexp =
|Const of int
|Var of string
|Power of (string * int)
|Times of aexp list
|Sum of aexp list

let rec diff (aexp, str)  = 
let rec isThereStr aexp str  = 
 (match aexp with 
|Const i -> false
|Var s -> (s = str)
|Power (s, i) -> (s = str)
|Times l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Times (t)) (str)))
|Sum l -> 
 (match l with 
|[] -> false
|h::t -> (isThereStr (h) (str) || isThereStr (Sum (t)) (str))))
 in 

let rec mul al str  = 
 (match al with 
|[] -> []
|h::[] -> if isThereStr (h) (str) then [diff ((h, str))]
 else [h]
|h::t -> if isThereStr (h) (str) then List.append ([diff ((h, str))]) (mul (t) (str))
 else List.append ([h]) (mul (t) (str)))
 in 

 (match aexp with 
|Const i -> Const (0)
|Var s -> if (s = str) then Const (1)
 else Const (0)
|Power (s, i) -> if (s = str) then if (i > 1) then Times ([Const (i); Power ((s, (i - 1)))])
 else Const (1)
 else Const (0)
|Times l -> if isThereStr (aexp) (str) then Times (mul (l) (str))
 else Const (0)
|Sum l -> 
 (match l with 
|[] -> Const (0)
|h::t -> Sum (List.append ([diff ((h, str))]) ([diff ((Sum (t), str))]))))


